<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何搭建个人博客</title>
    <url>/2024/05/18/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>受到了b站一位up主<a href="https://space.bilibili.com/384068749">CodeSheep</a>的启发：</p>
<ul>
<li><p><a href="https://www.bilibili.com/video/BV1at411X7nu/?spm_id_from=333.999.0.0&vd_source=249a8ad55bb26717dd55ec3dd295f644">程序猿如何搭建一个属于自己的个人博客</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty/?spm_id_from=333.788.top_right_bar_window_default_collection.content.click&vd_source=249a8ad55bb26717dd55ec3dd295f644">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/BV1q4411i7gL/?spm_id_from=333.999.0.0&vd_source=249a8ad55bb26717dd55ec3dd295f644">手把手教你从0开始搭建自己的个人博客 |第二种姿势 | hugo</a></p>
</li>
</ul>
<h2 id="博客框架选型"><a href="#博客框架选型" class="headerlink" title="博客框架选型"></a>博客框架选型</h2><h3 id="动态博客"><a href="#动态博客" class="headerlink" title="动态博客"></a>动态博客</h3><p>自己搭建网站，实现前后端</p>
<p><a href="https://www.wordpress.org/">wordpress</a>：动态博客框架</p>
<h3 id="静态博客"><a href="#静态博客" class="headerlink" title="静态博客"></a>静态博客</h3><p><a href="https://www.hexo.io/">hexo</a>：简洁，易于搭建，支持<code>markdown</code>，使用<code>js</code></p>
<p><a href="https://www.gohugo.org/">Hugo</a>：基于<code>go</code>语言</p>
<p><a href="https://vuepress.vuejs.org/">vuepress</a>：基于<code>vue.js</code></p>
<p><a href="https://b3log.org/">solo</a>：基于<code>Java</code>语言</p>
<h2 id="使用hexo搭建个人博客"><a href="#使用hexo搭建个人博客" class="headerlink" title="使用hexo搭建个人博客"></a>使用<code>hexo</code>搭建个人博客</h2><p>在<code>Windows</code>上配置环境，使用<code>Hexo + Github</code>的组合搭建个人博客。</p>
<h3 id="搭建hexo环境"><a href="#搭建hexo环境" class="headerlink" title="搭建hexo环境"></a>搭建<code>hexo</code>环境</h3><p>安装<code>node.js</code>，安装成功后查看其版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node -v</span></span><br><span class="line">v18.17.1</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm -v</span></span><br><span class="line">9.6.7</span><br></pre></td></tr></table></figure>

<p>使用<code>npm</code>下载<code>hexo</code>(<code>-g</code>参数表示全局安装)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure>

<p>下载成功后查看<code>hexo</code>版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo -v</span></span><br><span class="line">hexo-cli: 4.3.2</span><br><span class="line">os: win32 10.0.19045 undefined</span><br><span class="line">node: 18.17.1</span><br><span class="line">acorn: 8.8.2</span><br><span class="line">ada: 2.5.0</span><br><span class="line">ares: 1.19.1</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">cldr: 43.0</span><br><span class="line">icu: 73.1</span><br><span class="line">llhttp: 6.0.11</span><br><span class="line">modules: 108</span><br><span class="line">napi: 9</span><br><span class="line">nghttp2: 1.52.0</span><br><span class="line">nghttp3: 0.7.0</span><br><span class="line">ngtcp2: 0.8.1</span><br><span class="line">openssl: 3.0.10+quic</span><br><span class="line">simdutf: 3.2.12</span><br><span class="line">tz: 2023c</span><br><span class="line">undici: 5.22.1</span><br><span class="line">unicode: 15.0</span><br><span class="line">uv: 1.44.2</span><br><span class="line">uvwasi: 0.0.18</span><br><span class="line">v8: 10.2.154.26-node.26</span><br><span class="line">zlib: 1.2.13.1-motley</span><br></pre></td></tr></table></figure>

<h3 id="搭建hexo博客"><a href="#搭建hexo博客" class="headerlink" title="搭建hexo博客"></a>搭建<code>hexo</code>博客</h3><p>创建一个<code>blog</code>目录，用于存放<code>hexo</code>博客系统，进入该目录后生成一个初始模板：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> blog</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> blog/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo init</span></span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>

<p>启动博客，使其能够在本地调试(<code>s</code>是<code>server</code>的缩写，表示启动服务器)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo s</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<p>创建第一篇博客(<code>n</code>是<code>new</code>的缩写，表示新建一篇博客)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo n <span class="string">&quot;如何搭建个人博客&quot;</span></span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: D:\blog\source\_posts\如何搭建个人博客.md</span><br></pre></td></tr></table></figure>

<p>清除生成的静态文件和缓存：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo clean</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deleted database.</span><br></pre></td></tr></table></figure>

<h3 id="使用Github部署博客"><a href="#使用Github部署博客" class="headerlink" title="使用Github部署博客"></a>使用<code>Github</code>部署博客</h3><p>使用<code>npm</code>下载部署插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>生成静态文件，用于部署到<code>Github</code>上(<code>g</code>是<code>generate</code>的缩写，表示生成静态文件)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo g</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 128 ms</span><br><span class="line">INFO  Generated: archives/index.html</span><br><span class="line">INFO  Generated: archives/2024/index.html</span><br><span class="line">INFO  Generated: archives/2024/05/index.html</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  Generated: js/script.js</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.min.css</span><br><span class="line">INFO  Generated: css/style.css</span><br><span class="line">INFO  Generated: js/jquery-3.6.4.min.js</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.min.js</span><br><span class="line">INFO  Generated: css/images/banner.jpg</span><br><span class="line">INFO  Generated: 2024/05/18/hello-world/index.html</span><br><span class="line">INFO  Generated: 2024/05/18/如何搭建个人博客/index.html</span><br><span class="line">INFO  12 files generated in 287 ms</span><br></pre></td></tr></table></figure>

<p>部署博客到<code>Github</code>上(<code>d</code>是<code>deploy</code>的缩写，表示部署博客)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo d</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Setting up Git deployment...</span><br><span class="line">Initialized empty Git repository in D:/blog/.deploy_git/.git/</span><br><span class="line">[master (root-commit) 011bb0a] First commit</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 placeholder</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">warning: in the working copy of &#x27;2024/05/18/hello-world/index.html&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;2024/05/18/如何搭建个人博客/index.html&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;archives/2024/05/index.html&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;archives/2024/index.html&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;archives/index.html&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;css/style.css&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;fancybox/jquery.fancybox.min.js&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;index.html&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;js/jquery-3.6.4.min.js&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;js/script.js&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">[master 60727be] Site updated: 2024-05-18 10:44:05</span><br><span class="line"> 13 files changed, 2798 insertions(+)</span><br><span class="line"> create mode 100644 2024/05/18/hello-world/index.html</span><br><span class="line"> create mode 100644 2024/05/18/如何搭建个人博客/index.html</span><br><span class="line"> create mode 100644 archives/2024/05/index.html</span><br><span class="line"> create mode 100644 archives/2024/index.html</span><br><span class="line"> create mode 100644 archives/index.html</span><br><span class="line"> create mode 100644 css/images/banner.jpg</span><br><span class="line"> create mode 100644 css/style.css</span><br><span class="line"> create mode 100644 fancybox/jquery.fancybox.min.css</span><br><span class="line"> create mode 100644 fancybox/jquery.fancybox.min.js</span><br><span class="line"> create mode 100644 index.html</span><br><span class="line"> create mode 100644 js/jquery-3.6.4.min.js</span><br><span class="line"> create mode 100644 js/script.js</span><br><span class="line"> delete mode 100644 placeholder</span><br><span class="line">Enumerating objects: 29, done.</span><br><span class="line">Counting objects: 100% (29/29), done.</span><br><span class="line">Delta compression using up to 12 threads</span><br><span class="line">Compressing objects: 100% (21/21), done.</span><br><span class="line">Writing objects: 100% (29/29), 278.71 KiB | 671.00 KiB/s, done.</span><br><span class="line">Total 29 (delta 5), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (5/5), done.</span><br><span class="line">To github.com:Maxwell2020152049/Maxwell2020152049.github.io.git</span><br><span class="line"> * [new branch]      HEAD -&gt; master</span><br><span class="line">branch &#x27;master&#x27; set up to track &#x27;git@github.com:Maxwell2020152049/Maxwell2020152049.github.io.git/master&#x27;.</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure>

<p>部署完成后，需要在<code>GitHub</code>上设置从<code>master</code>分支构建<code>Github Page</code>。</p>
<p>参考：<a href="https://stackoverflow.com/questions/64369729/git-404-there-isnt-a-github-pages-site-here">Git 404 There isn’t a GitHub Pages site here</a></p>
<p>最后，在<a href="https://maxwell2020152049.github.io/">My Blog</a>就能看到博客了，第一次部署可能需要一点时间。</p>
<h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><p>下载<code>yilia</code>主题在<code>themes</code>目录下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> git@github.com:litten/hexo-theme-yilia.git yilia</span></span><br><span class="line">Cloning into &#x27;yilia&#x27;...</span><br><span class="line">remote: Enumerating objects: 2037, done.</span><br><span class="line">remote: Counting objects: 100% (1/1), done.</span><br><span class="line">remote: Total 2037 (delta 0), reused 0 (delta 0), pack-reused 2036</span><br><span class="line">Receiving objects: 100% (2037/2037), 10.53 MiB | 514.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (1079/1079), done.</span><br></pre></td></tr></table></figure>

<p>在<code>_config.yml</code>文件中修改博客主题：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">yilia</span></span><br></pre></td></tr></table></figure>

<h2 id="使用Hugo搭建个人博客"><a href="#使用Hugo搭建个人博客" class="headerlink" title="使用Hugo搭建个人博客"></a>使用<code>Hugo</code>搭建个人博客</h2><p>在<code>Linux</code>上配置环境，使用<code>Hugo + Github</code>的组合搭建个人博客。</p>
<h3 id="下载brew"><a href="#下载brew" class="headerlink" title="下载brew"></a>下载brew</h3><p>下载<code>Hugo</code>要使用<code>brew</code>这个工具。</p>
<p>过程详见这篇博客：<a href="https://linux.cn/article-14065-1.html">在 Linux 上安装和使用 Homebrew 包管理器</a></p>
<p>注意一点，把最后两个添加<code>PATH</code>变量的命令写入<code>~/.bashrc</code>中，不然每次重启终端都要重新输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">start hugo</span></span><br><span class="line">echo &#x27;eval &quot;$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)&quot;&#x27; &gt;&gt; $HOME/.bash_profile</span><br><span class="line">eval &quot;$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)&quot;</span><br></pre></td></tr></table></figure>

<h3 id="下载Hugo"><a href="#下载Hugo" class="headerlink" title="下载Hugo"></a>下载<code>Hugo</code></h3><p>使用如下命令下载<code>Hugo</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install hugo</span><br></pre></td></tr></table></figure>

<p>使用如下命令检验是否下载成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hugo version</span><br></pre></td></tr></table></figure>

<p>若成功输出版本信息，说明下载成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hugo v0.115.4+extended linux/amd64 BuildDate=unknown</span><br></pre></td></tr></table></figure>

<p>创建一个名为<code>blog</code>博客：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hugo new site blog</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Congratulations! Your new Hugo site is created in /home/rex/blog.</span><br><span class="line"></span><br><span class="line">Just a few more steps and you&#x27;re ready to go:</span><br><span class="line"></span><br><span class="line">1. Download a theme into the same-named folder.</span><br><span class="line">   Choose a theme from https://themes.gohugo.io/ or</span><br><span class="line">   create your own with the &quot;hugo new theme &lt;THEMENAME&gt;&quot; command.</span><br><span class="line">2. Perhaps you want to add some content. You can add single files</span><br><span class="line">   with &quot;hugo new &lt;SECTIONNAME&gt;/&lt;FILENAME&gt;.&lt;FORMAT&gt;&quot;.</span><br><span class="line">3. Start the built-in live server via &quot;hugo server&quot;.</span><br><span class="line"></span><br><span class="line">Visit https://gohugo.io/ for quickstart guide and full documentation.</span><br></pre></td></tr></table></figure>

<h3 id="下载并设置Hugo主题"><a href="#下载并设置Hugo主题" class="headerlink" title="下载并设置Hugo主题"></a>下载并设置<code>Hugo</code>主题</h3><p><code>Hugo</code>没有默认主题，需要手动下载并设置一个。</p>
<p>可以前往<code>Hugo</code>官网下载：<a href="https://themes.gohugo.io/">Hugo Themes</a></p>
<p>选择一个<code>分栏</code>风格的主题：<a href="https://themes.gohugo.io/themes/hugo-theme-m10c/">hugo-theme-m10c</a></p>
<p>在<code>blog</code>目录下，运行如下命令，下载主题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c</span><br></pre></td></tr></table></figure>

<h3 id="启动博客服务器"><a href="#启动博客服务器" class="headerlink" title="启动博客服务器"></a>启动博客服务器</h3><p>使用如下命令，使用主题<code>LoveIt</code>，启动博客服务器:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hugo server -t LoveIt --buildDrafts</span><br></pre></td></tr></table></figure>

<p>将该命令写成一个<code>shell</code>脚本<code>hugo_server</code>，并添加可执行权限：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /usr/bin/bash</span></span><br><span class="line">hugo server -t LoveIt --buildDrafts</span><br></pre></td></tr></table></figure>

<p>创建一篇名为<code>self-blog</code>的博客：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hugo new post/self-blog.md</span><br></pre></td></tr></table></figure>

<h3 id="将个人博客部署到远端服务器"><a href="#将个人博客部署到远端服务器" class="headerlink" title="将个人博客部署到远端服务器"></a>将个人博客部署到远端服务器</h3><p>在<code>Github</code>上创建一个名为<code>Maxwell2020152049</code>的仓库。</p>
<p>使用如下命令生成一个用于维护远端服务器网站的文件夹<code>public</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hugo --theme=LoveIt --baseURL=&quot;https://Maxwell2020152049.github.io&quot; --buildDrafts</span><br></pre></td></tr></table></figure>

<p>将该命令写成一个<code>shell</code>脚本<code>hugo_build</code>，并添加可执行权限：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /usr/bin/bash</span></span><br><span class="line">hugo --theme=LoveIt --baseURL=&quot;https://Maxwell2020152049.github.io&quot; --buildDrafts</span><br></pre></td></tr></table></figure>

<p>进入<code>public</code>目录，使用以下命令将该目录推送至<code>Maxwell2020152049</code>仓库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;create hugo blog&quot;</span><br><span class="line">git remote add origin git@github.com:Maxwell2020152049/Maxwell2020152049.github.io.git</span><br><span class="line">git push --set-upstream origin master</span><br></pre></td></tr></table></figure>

<p>然后就能够进入网站了。</p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/05/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>【Hexo的图片管理问题】阿里云OSS + PicGo搭建图床</title>
    <url>/2024/05/21/%E3%80%90Hexo%E7%9A%84%E5%9B%BE%E7%89%87%E7%AE%A1%E7%90%86%E9%97%AE%E9%A2%98%E3%80%91%E9%98%BF%E9%87%8C%E4%BA%91OSS-PicGo%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h2 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h2><h3 id="Bucket的存储和读取"><a href="#Bucket的存储和读取" class="headerlink" title="Bucket的存储和读取"></a>Bucket的存储和读取</h3><p>在阿里云上开通<a href="https://oss.console.aliyun.com/overview">OSS</a>，创建一个<code>Bucket</code>，地区选择<strong>华南1-深圳</strong>，存储类型为<strong>标准存储</strong>，存储冗余类型为<strong>本地冗余存储</strong>。</p>
<p>购买OSS资源包，选择<strong>40G&#x2F;1年</strong>的套餐，这样就能够把图片存储到阿里云上了。</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/22127b7f64ff476d3f5bae1a8d0c938.png" alt="22127b7f64ff476d3f5bae1a8d0c938"></p>
<p>需要注意：因为图床需要让任何来源都能访问到资源，<code>Bucket</code>的读写权限需要设置为<strong>公共读</strong>（需要关闭<strong>“阻止公共访问”</strong>）。</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/ffdb72988de51e8038a4c1497d0d4ed.png" alt="ffdb72988de51e8038a4c1497d0d4ed"></p>
<p>另外，<strong>OSS资源包不包括外网流出流量，就是说从阿里云拉取图片产生的流量是需要付费的</strong>，<a href="https://www.aliyun.com/price/product?spm=a2c4g.11186623.0.0.14d71887x72wt4#/oss/detail/ossbag">收费标准</a>如下（开启<strong>同城冗余</strong>和<strong>跨区域复制</strong>流量费更高）：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/99b459af64d549b1186f90d6320429d.png" alt="99b459af64d549b1186f90d6320429d"></p>
<h3 id="创建用户进行访问控制"><a href="#创建用户进行访问控制" class="headerlink" title="创建用户进行访问控制"></a>创建用户进行访问控制</h3><p>在阿里云的访问控制模块中创建新用户，注意需要勾选<strong>启动OpenAPI</strong>选项，记录下生成的<strong>AccessKey ID</strong>和<strong>AccessKey Secret</strong>。</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/dd34568a7bdd19f85b830c649a97a71.png" alt="dd34568a7bdd19f85b830c649a97a71"></p>
<h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><p>在<a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.1">PicGo官网</a>下载稳定版本的<code>PicGo</code>客户端，使用之前获取的参数进行设置（img目录需要在阿里云上先创建，初始使用可以不填写<strong>存储路径</strong>）：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/67cb206f75494599386f7558f512e0b.png" alt="67cb206f75494599386f7558f512e0b"></p>
<h2 id="Typora上传插入图片"><a href="#Typora上传插入图片" class="headerlink" title="Typora上传插入图片"></a>Typora上传插入图片</h2><p>在<code>Typora</code>上进行设置，使用<code>PicGo</code>上传插入的图片到阿里云。</p>
<p>配置完成后，可以使用<code>Typora</code>的<strong>验证图片上传选项</strong>测试图床是否被正确配置。</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/acb0232932277fccf8ef1fcc2b22d6f.png" alt="acb0232932277fccf8ef1fcc2b22d6f"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://blog.csdn.net/qq_30105599/article/details/119651114">关于Hexo写博客时的图片插入问题（OSS对象存储+PicGo搭建图床）</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/104152479">阿里云OSS PicGo 配置图床教程 超详细</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>【C++ Primer 学习笔记】第一章 开始</title>
    <url>/2024/05/19/%E3%80%90C-Primer%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<h1 id="chap01-开始"><a href="#chap01-开始" class="headerlink" title="chap01 开始"></a>chap01 开始</h1><h2 id="chap1-1-编写一个简单的C-程序"><a href="#chap1-1-编写一个简单的C-程序" class="headerlink" title="chap1.1 编写一个简单的C++程序"></a>chap1.1 编写一个简单的C++程序</h2><ul>
<li>如何编译运行一个<code>cpp</code>程序</li>
<li>如何获得系统执行完程序的退出状态码</li>
<li><code>return 0</code>和<code>return -1</code>的退出状态码有什么区别</li>
</ul>
<h3 id="编译运行cpp程序"><a href="#编译运行cpp程序" class="headerlink" title="编译运行cpp程序"></a>编译运行cpp程序</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ -o main main.cpp</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./main</span></span><br></pre></td></tr></table></figure>

<p>如果缺省<code>-o</code>选项，<code>Windows</code>系统上编译得到的可执行文件为<code>a.exe</code>，<code>Linux</code>系统上得到<code>a.out</code>。</p>
<h3 id="退出状态码"><a href="#退出状态码" class="headerlink" title="退出状态码"></a>退出状态码</h3><p><code>Linux</code>系统 (<code>Windows</code>系统使用<code>Git Bash</code>也一样) 上使用如下命令获取退出状态码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> $?</span></span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<p>通常情况下，程序成功执行返回0，失败返回127。</p>
<p><code>return 0</code>和<code>return -1</code>的退出状态码分别为0和127。</p>
<h2 id="chap1-2-初识输入输出"><a href="#chap1-2-初识输入输出" class="headerlink" title="chap1.2 初识输入输出"></a>chap1.2 初识输入输出</h2><ul>
<li>标准库定义了哪四个IO对象，它们分别是什么类型</li>
<li><code>istream</code>和<code>ostream</code>类型的对象运算时有什么区别，计算结果是什么</li>
<li>命名空间<code>std</code>有什么用</li>
</ul>
<h3 id="标准库的IO对象"><a href="#标准库的IO对象" class="headerlink" title="标准库的IO对象"></a>标准库的IO对象</h3><ul>
<li><code>cin</code>，<code>istream</code></li>
<li><code>cout</code>，<code>ostream</code></li>
<li><code>cerr</code>，<code>ostream</code></li>
<li><code>clog</code>，<code>ostream</code></li>
</ul>
<p>在<code>iostream</code>声明如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> istream cin;		  <span class="comment">/// Linked to standard input</span></span><br><span class="line"><span class="keyword">extern</span> ostream cout;		<span class="comment">/// Linked to standard output</span></span><br><span class="line"><span class="keyword">extern</span> ostream cerr;		<span class="comment">/// Linked to standard error (unbuffered)</span></span><br><span class="line"><span class="keyword">extern</span> ostream clog;		<span class="comment">/// Linked to standard error (buffered)</span></span><br></pre></td></tr></table></figure>

<h3 id="istream和ostream类型的运算"><a href="#istream和ostream类型的运算" class="headerlink" title="istream和ostream类型的运算"></a><code>istream</code>和<code>ostream</code>类型的运算</h3><p><code>istream</code>使用<code>&gt;&gt;</code>运算符，运算结果是左侧的对象。</p>
<p><code>ostream</code>使用<code>&lt;&lt;</code>运算符，运算结果是左侧的对象。</p>
<h3 id="命名空间std"><a href="#命名空间std" class="headerlink" title="命名空间std"></a>命名空间<code>std</code></h3><p><code>std</code>用于隔离变量和函数的命名，使得不同的命名空间能够有同名的函数和变量。</p>
<p>使用<code>std::cin</code>的形式调用命名空间中的变量。</p>
<p><code>::</code>称为作用域运算符。</p>
<h3 id="Windows命令行运行C-程序出现中文乱码"><a href="#Windows命令行运行C-程序出现中文乱码" class="headerlink" title="Windows命令行运行C++程序出现中文乱码"></a><code>Windows</code>命令行运行C++程序出现中文乱码</h3><p><code>VSCode</code>的默认编码为<code>UTF-8</code>，终端的编码默认为<code>GBK</code>，将<code>VSCode</code>的编码设置为<code>GBK</code>即可解决问题。</p>
<h2 id="chap1-3-注释简介"><a href="#chap1-3-注释简介" class="headerlink" title="chap1.3 注释简介"></a>chap1.3 注释简介</h2><ul>
<li>C++如何编写注释，有哪些类型的注释</li>
</ul>
<h3 id="C-的注释"><a href="#C-的注释" class="headerlink" title="C++的注释"></a>C++的注释</h3><p>单行注释：<code>//</code></p>
<p>多行注释：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id="chap1-4-控制流"><a href="#chap1-4-控制流" class="headerlink" title="chap1.4 控制流"></a>chap1.4 控制流</h2><ul>
<li>while语句</li>
<li>for语句</li>
<li>if语句</li>
</ul>
<h3 id="读取数量不确定的输入数据"><a href="#读取数量不确定的输入数据" class="headerlink" title="读取数量不确定的输入数据"></a>读取数量不确定的输入数据</h3><p>可以使用如下的模式读取不确定数量的输入数据：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> value;</span><br><span class="line"><span class="keyword">while</span> (std::cin &gt;&gt; value) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>std::cin &gt;&gt; value</code>会将输入存入<code>value</code>这个变量中，返回<code>std::cin</code>，如果<code>std::cin</code>的状态无效，比如读取到非整型或者EOF（<code>Windows</code>输入<code>Ctrl-Z</code>，<code>Linux</code>输入<code>Ctrl-D</code>），则退出循环，结束读取。</p>
<h2 id="chap1-5-类简介"><a href="#chap1-5-类简介" class="headerlink" title="chap1.5 类简介"></a>chap1.5 类简介</h2><ul>
<li>类与基本数据类型的区别在哪里</li>
</ul>
<p>类聚合了一组数据和操作，对于基本数据类型（如整型），<code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>+</code>、<code>=</code>等运算符能够被C++语言默认支持，但类的对象需要自己实现，书中提供了<code>Sales_item</code>这个头文件，能够提供<code>Sales_item</code>这个类，支持了对各种运算符的操作，能够方便地进行读写和计算。</p>
]]></content>
      <categories>
        <category>C++</category>
        <category>C++ Primer</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>【C++ Primer 学习笔记】第三章 字符串、向量和数组</title>
    <url>/2024/05/30/%E3%80%90C-Primer-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E5%90%91%E9%87%8F%E5%92%8C%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="chap03-字符串、向量和数组"><a href="#chap03-字符串、向量和数组" class="headerlink" title="chap03 字符串、向量和数组"></a>chap03 字符串、向量和数组</h1><h2 id="chap3-1-命名空间的using声明"><a href="#chap3-1-命名空间的using声明" class="headerlink" title="chap3.1 命名空间的using声明"></a>chap3.1 命名空间的<code>using</code>声明</h2><ul>
<li><code>C++</code>中的<code>using</code>关键字有什么作用？</li>
</ul>
<p><code>using</code>声明可以将命名空间中的成员的作用域拓展到全局作用域，故不需要使用形如<code>std::cin</code>的方式，而是直接使用<code>cin</code>就能从标准输入读取信息。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br></pre></td></tr></table></figure>

<p>需要注意，<code>using</code>声明不能放在头文件中，因为头文件会被多个源文件包含，容易可能导致命名冲突，应该尽量减小命名空间的作用范围。</p>
<h2 id="chap3-2-标准库类型string"><a href="#chap3-2-标准库类型string" class="headerlink" title="chap3.2 标准库类型string"></a>chap3.2 标准库类型<code>string</code></h2><ul>
<li>如何初始化<code>string</code>？</li>
<li><code>string</code>支持哪些操作？</li>
</ul>
<h3 id="string初始化"><a href="#string初始化" class="headerlink" title="string初始化"></a><code>string</code>初始化</h3><p><code>string</code>包含直接初始化和赋值初始化。使用赋值运算符<code>=</code>进行初始化，就是拷贝初始化；否则就是直接初始化。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s1 = <span class="string">&quot;Hello, World!&quot;</span>;    <span class="comment">// 拷贝初始化</span></span><br><span class="line"><span class="function">string <span class="title">s2</span><span class="params">(<span class="string">&quot;Hello, World!&quot;</span>)</span></span>;     <span class="comment">// 直接初始化</span></span><br><span class="line">string s3 = &#123;<span class="string">&quot;Hello, World!&quot;</span>&#125;;  <span class="comment">// 拷贝初始化</span></span><br><span class="line">string s4&#123;<span class="string">&quot;Hello, World!&quot;</span>&#125;;     <span class="comment">// 直接初始化</span></span><br><span class="line"></span><br><span class="line">string s5 = s1;                 <span class="comment">// 拷贝初始化</span></span><br><span class="line"><span class="function">string <span class="title">s6</span><span class="params">(s1)</span></span>;                  <span class="comment">// 直接初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">s7</span><span class="params">(<span class="number">10</span>, <span class="string">&#x27;c&#x27;</span>)</span></span>;             <span class="comment">// 直接初始化</span></span><br><span class="line">string s7 = <span class="built_in">string</span>(<span class="number">10</span>, <span class="string">&#x27;c&#x27;</span>);    <span class="comment">// 拷贝初始化</span></span><br></pre></td></tr></table></figure>

<p>使用<code>cin &gt;&gt; s</code>读取字符串时，遇到空白符停止，使用<code>getline(cin, s)</code>读取字符串时，遇到换行符停止。</p>
<p>默认初始化指的是不为变量提供初始值。<code>string</code>进行默认初始化时，默认为空串。整型进行初始化时，默认为0。</p>
<p>需要注意，定义内置类型的局部变量，不会进行默认初始化，会产生未定义行为。</p>
<h3 id="range-for"><a href="#range-for" class="headerlink" title="range for"></a><code>range for</code></h3><p>C++11提供了<code>range for</code>，可以很方便地遍历序列的元素：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s&#123;<span class="string">&quot;Hello, World!&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;c : s) &#123;</span><br><span class="line">    c = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="chap3-3-标准库vector"><a href="#chap3-3-标准库vector" class="headerlink" title="chap3.3 标准库vector"></a>chap3.3 标准库vector</h2><ul>
<li><p>如何初始化<code>vector</code>？</p>
</li>
<li><p><code>vector</code>支持哪些操作？</p>
</li>
</ul>
<h3 id="vector初始化"><a href="#vector初始化" class="headerlink" title="vector初始化"></a><code>vector</code>初始化</h3><p><code>vector</code>和<code>string</code>一样，也支持直接初始化和赋值初始化：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v1;			<span class="comment">// 直接初始化</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v2</span><span class="params">(<span class="number">10</span>)</span></span>; 	<span class="comment">// 直接初始化</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v3</span><span class="params">(<span class="number">10</span>, <span class="number">42</span>)</span></span>;	<span class="comment">// 直接初始化</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v4&#123;<span class="number">10</span>&#125;;		<span class="comment">// 列表初始化</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v5&#123;<span class="number">10</span>, <span class="number">42</span>&#125;;	<span class="comment">// 列表初始化</span></span><br><span class="line">vector&lt;string&gt; v6&#123;<span class="number">10</span>&#125;;	<span class="comment">// 列表初始化</span></span><br><span class="line">vector&lt;string&gt; v7&#123;<span class="number">10</span>, <span class="string">&quot;hi&quot;</span>&#125;;	<span class="comment">// 列表初始化</span></span><br></pre></td></tr></table></figure>

<p>列表初始化也可以是赋值初始化：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>列表初始化的原理是，如果参数支持列表列表初始化，就进行列表初始化，否则就尝试直接初始化，如果还是失败，就编译出错。</p>
<h2 id="chap3-4-迭代器介绍"><a href="#chap3-4-迭代器介绍" class="headerlink" title="chap3.4 迭代器介绍"></a>chap3.4 迭代器介绍</h2><ul>
<li>如何使用迭代器？</li>
<li>什么情况下迭代器可能失效？</li>
</ul>
<h3 id="迭代器的使用"><a href="#迭代器的使用" class="headerlink" title="迭代器的使用"></a>迭代器的使用</h3><p>迭代器主要用于访问容器的元素，与索引访问容器元素的区别在于，索引在存储上是连续的，迭代器不一定是连续的，所以需要使用<code>!=</code>判断是否迭代结束。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">10</span>, <span class="number">2020</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">    *it *= <span class="number">2</span>;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>初始化迭代器后，如果容器的元素个数发生变化，可能会导致迭代器异常，即迭代器失效。</p>
<p><code>sizeof(std::string) == 32</code></p>
<p><code>sizeof(std::vector&lt;int&gt;) == 24</code></p>
<h2 id="chap3-5-数组"><a href="#chap3-5-数组" class="headerlink" title="chap3.5 数组"></a>chap3.5 数组</h2><ul>
<li>如何对数组进行初始化？</li>
<li>数组和<code>vector</code>比较，有什么缺点？</li>
</ul>
<p>数组可以使用列表初始化。数组使用默认初始化时，会将元素进行默认初始化。</p>
<p><code>vector</code>是不定长的容器，数组的长度固定，在很多无法预知数据大小的场合，<code>vector</code>更有优势。</p>
<p><code>vector</code>提供了一组便于操作数据的接口，和数组相比，减小了如越界、手动计数索引等问题。</p>
]]></content>
      <categories>
        <category>C++</category>
        <category>C++ Primer</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>【C++ Primer 学习笔记】第二章 变量和基本类型</title>
    <url>/2024/05/22/%E3%80%90C-Primer%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%8F%98%E9%87%8F%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="chap02-变量和基本类型"><a href="#chap02-变量和基本类型" class="headerlink" title="chap02 变量和基本类型"></a>chap02 变量和基本类型</h1><h2 id="cpp代码规范"><a href="#cpp代码规范" class="headerlink" title="cpp代码规范"></a><code>cpp</code>代码规范</h2><p>使用<code>Google C++ Style</code>规范代码，用到了<code>VSCode</code>的<code>cpplint</code>插件。</p>
<p>使用参考：<a href="https://juejin.cn/post/7175821057587150885">【C++编程】在Visual Studio Code中配置Cpplint代码检测</a></p>
<h2 id="chap2-1-基本内置类型"><a href="#chap2-1-基本内置类型" class="headerlink" title="chap2.1 基本内置类型"></a>chap2.1 基本内置类型</h2><ul>
<li><code>short</code>、<code>int</code>、<code>long</code>、<code>long long</code>这几种基本类型有什么区别</li>
<li><code>float</code>和<code>double</code>有什么区别</li>
<li>无符号类型和有符号类型进行运算，如何处理</li>
</ul>
<h3 id="练习2-1"><a href="#练习2-1" class="headerlink" title="练习2.1"></a>练习2.1</h3><p><code>sizeof(short)</code>&lt;&#x3D;<code>sizeof(int)</code>&lt;&#x3D;<code>sizeof(long)</code>&lt;&#x3D;<code>sizeof(long long)</code></p>
<p>无符号类型只能表示0和正数，有符号类型可以表示负数、0和正数。</p>
<p>无符号类型和有符号类型进行运算时，先把有符号类型转换为无符号类型，无符号类型溢出时，进行取模操作（mod 2^m，m为该类型的位数）。</p>
<p><code>float</code>的精度较<code>double</code>更差，而且开销不一定更小，一般情况下尽量使用<code>double</code>。</p>
<h3 id="练习2-2"><a href="#练习2-2" class="headerlink" title="练习2.2"></a>练习2.2</h3><p>利率应该使用浮点型，本金和付款应该使用整型。</p>
<h2 id="chap2-2-变量"><a href="#chap2-2-变量" class="headerlink" title="chap2.2 变量"></a>chap2.2 变量</h2><ul>
<li>列表初始化有什么好处？</li>
</ul>
<h3 id="列表初始化"><a href="#列表初始化" class="headerlink" title="列表初始化"></a>列表初始化</h3><p>C++有多种初始化变量的方式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> units_sold1 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> units_sold2 = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">units_sold3</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> units_sold4&#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>其中使用了花括号<code>&#123;&#125;</code>的即为列表初始化，该特性在<code>C++11</code>中受到了全面应用,列表初始化会在存在丢失信息的风险时出现<code>warning</code>。</p>
<p>下面这段代码，只有使用列表初始化时编译会出现<code>warning</code>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">double</span> ld = <span class="number">3.141592654L</span>;</span><br><span class="line"><span class="type">int</span> i1 = ld, <span class="built_in">i2</span>(ld);</span><br><span class="line"><span class="type">int</span> i3 = &#123;ld&#125;, i4&#123;ld&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="chap2-3-复合类型"><a href="#chap2-3-复合类型" class="headerlink" title="chap2.3 复合类型"></a>chap2.3 复合类型</h2><ul>
<li>指针和引用的区别？</li>
</ul>
<h2 id="chap2-4-const限定符"><a href="#chap2-4-const限定符" class="headerlink" title="chap2.4 const限定符"></a>chap2.4 const限定符</h2><ul>
<li>顶层const和底层const的区别</li>
</ul>
<h3 id="顶层const和底层const"><a href="#顶层const和底层const" class="headerlink" title="顶层const和底层const"></a>顶层const和底层const</h3><p>顶层const指的是修饰对象本身的const限定符，底层const指的是修饰指向的对象的const限定符。</p>
<p>可以参考<a href="https://stackoverflow.com/questions/7914444/what-are-top-level-const-qualifiers">What are top-level const qualifiers?</a></p>
<h3 id="跨文件的常量"><a href="#跨文件的常量" class="headerlink" title="跨文件的常量"></a>跨文件的常量</h3><p>如果需要访问其他文件的常量，需要将该文件的常量定义加上<code>extern</code>修饰符，因为常量默认定义为静态链接，外部文件是不可见的。</p>
<p>参考<a href="https://learn.microsoft.com/en-us/cpp/error-messages/tool-errors/global-constants-in-cpp?view=msvc-170">Global Constants in C++</a>的例子，以下代码在编译时出现<a href="https://learn.microsoft.com/en-us/cpp/error-messages/tool-errors/linker-tools-error-lnk2019?view=msvc-170">Linker Tools Error LNK2019</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// global_constants.cpp</span></span><br><span class="line"><span class="comment">// LNK2019 expected</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> lnktest1 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="built_in">test</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// global_constants_2.cpp</span></span><br><span class="line"><span class="comment">// compile with: global_constants.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> lnktest1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> i = lnktest1;   <span class="comment">// LNK2019</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决办法：给常量的定义加上<code>extern</code>修饰符，使其变成外部链接。</p>
<h2 id="chap2-5-处理类型"><a href="#chap2-5-处理类型" class="headerlink" title="chap2.5 处理类型"></a>chap2.5 处理类型</h2><ul>
<li>如何定义新的类型</li>
<li>类型别名是什么，给基本数据类型和复合类型起别名有什么区别</li>
<li><code>auto</code>类型说明符是如何推导类型的</li>
<li><code>decltype</code>类型说明符是如何推导类型的</li>
</ul>
<h3 id="定义新的类型"><a href="#定义新的类型" class="headerlink" title="定义新的类型"></a>定义新的类型</h3><p><code>typedef</code>关键字可以定义新的类型：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> wages;       <span class="comment">// wages是double的别名</span></span><br><span class="line"><span class="keyword">typedef</span> wages base, *dp;    <span class="comment">// base是double的别名，dp是double*的别名</span></span><br></pre></td></tr></table></figure>

<p><code>C++11</code>支持使用<code>using</code>关键字定义新的类型：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> DOUBLE = <span class="type">double</span>;      <span class="comment">// DOUBLE是double的别名</span></span><br></pre></td></tr></table></figure>

<p>涉及到指针、常量等结合的复合类型时，要注意，<code>typedef</code>定义的新类型在声明语句中是作为整体，即数据类型。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> *pstring;      <span class="comment">// pstring是char*的别名</span></span><br><span class="line"><span class="type">const</span> pstring cstr = <span class="number">0</span>;     <span class="comment">// cstr是指向char的指针常量</span></span><br><span class="line"><span class="type">const</span> pstring *ps;          <span class="comment">// ps是指向 指向char的指针常量 的指针</span></span><br></pre></td></tr></table></figure>

<h3 id="auto类型说明符"><a href="#auto类型说明符" class="headerlink" title="auto类型说明符"></a><code>auto</code>类型说明符</h3><p><code>C++11</code>引入了<code>auto</code>类型说明符，能够自动推导类型。</p>
<p>需要注意：</p>
<ul>
<li><p><code>auto</code>声明的变量必须有初始值，否则编译器无法推导出变量的类型。</p>
</li>
<li><p>使用<code>auto</code>声明多个变量时，这些变量的类型必须一致。</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief </span></span><br><span class="line"><span class="comment"> * ci是const int</span></span><br><span class="line"><span class="comment"> * m是int</span></span><br><span class="line"><span class="comment"> * p是指向const int的指针</span></span><br><span class="line"><span class="comment"> * error: inconsistent deduction for &#x27;auto&#x27;: &#x27;int&#x27; and then &#x27;const int&#x27;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">auto</span> m = ci, *p = &amp;ci;</span><br></pre></td></tr></table></figure>


<ul>
<li><code>auto</code>推导引用的类型时，会得到引用指向对象的类型。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief </span></span><br><span class="line"><span class="comment"> * r是int的引用，a是int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">auto</span> a = r;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>auto</code>会忽略<code>顶层const</code>，保留<code>底层const</code>，如果需要定义const对象，则使用<code>const auto</code>。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief </span></span><br><span class="line"><span class="comment"> * cr是对const int的引用</span></span><br><span class="line"><span class="comment"> * 此时顶层const被忽略</span></span><br><span class="line"><span class="comment"> * c是int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">auto</span> c = cr;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief </span></span><br><span class="line"><span class="comment"> * ci是const int</span></span><br><span class="line"><span class="comment"> * 此时顶层const被忽略</span></span><br><span class="line"><span class="comment"> * 但auto前明确指出该类型是一个顶层const</span></span><br><span class="line"><span class="comment"> * 故f是const int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> f = ci;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>auto</code>支持声明引用类型，以<code>auto &amp;r</code>的形式</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief </span></span><br><span class="line"><span class="comment"> * ci是const int</span></span><br><span class="line"><span class="comment"> * 此时const退化为底层引用</span></span><br><span class="line"><span class="comment"> * 故g为const int的引用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">auto</span> &amp;g = ci;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief</span></span><br><span class="line"><span class="comment"> * 42是int</span></span><br><span class="line"><span class="comment"> * j是对int常量的引用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> &amp;j = <span class="number">42</span>;</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://en.cppreference.com/w/cpp/language/auto">Placeholder type specifiers</a></p>
<h3 id="decltype类型指示符"><a href="#decltype类型指示符" class="headerlink" title="decltype类型指示符"></a><code>decltype</code>类型指示符</h3><p><code>C++11</code>还提供了<code>decltype</code>关键字用于推导类型，该关键字使用表达式推导类型。</p>
<p>需要注意：</p>
<ul>
<li>与<code>auto</code>不同，<code>deltype</code>不会忽略表达式的类型中存在的<code>顶层const</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> ci = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">auto</span> a = ci;            <span class="comment">// a: int</span></span><br><span class="line"><span class="keyword">decltype</span>(ci) b = <span class="number">2024</span>;  <span class="comment">// b: const int</span></span><br></pre></td></tr></table></figure>

<ul>
<li>赋值表达式的类型是左值引用</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">3</span>, b = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">decltype</span>(a) c = a;      <span class="comment">// c: int</span></span><br><span class="line"><span class="keyword">decltype</span>(a = b) d = a;  <span class="comment">// d: int&amp;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>变量不加括号，类型是其本身；变量加了括号，就变成了表达式，类型是其本身的引用</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">3</span>, b = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">decltype</span>(a) c = a;      <span class="comment">// c: int</span></span><br><span class="line"><span class="keyword">decltype</span>((b)) d = b;    <span class="comment">// d: int&amp;</span></span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://en.cppreference.com/w/cpp/language/decltype">decltype specifier</a></p>
<h2 id="chap2-6-自定义数据结构"><a href="#chap2-6-自定义数据结构" class="headerlink" title="chap2.6 自定义数据结构"></a>chap2.6 自定义数据结构</h2><ul>
<li>C++如何定义数据结构？</li>
</ul>
<h3 id="struct和class"><a href="#struct和class" class="headerlink" title="struct和class"></a><code>struct</code>和<code>class</code></h3><p>使用结构体可以定义数据结构：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Sales_data</span> &#123;</span><br><span class="line">    std::string book_no;        <span class="comment">// 书籍ISBN号</span></span><br><span class="line">    <span class="type">int</span> sales_num = <span class="number">0</span>;          <span class="comment">// 销量</span></span><br><span class="line">    <span class="type">double</span> sales_revenue = <span class="number">0.0</span>;     <span class="comment">// 平均售价</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>使用类也可以起到同样的效果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    std::string book_no;        <span class="comment">// 书籍ISBN号</span></span><br><span class="line">    <span class="type">int</span> sales_num = <span class="number">0</span>;          <span class="comment">// 销量</span></span><br><span class="line">    <span class="type">double</span> sales_revenue = <span class="number">0.0</span>;     <span class="comment">// 平均售价</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="编写自己的Sales-data类"><a href="#编写自己的Sales-data类" class="headerlink" title="编写自己的Sales_data类"></a>编写自己的<code>Sales_data</code>类</h3><p>在头文件中，需要加入头文件保护符，防止头文件被重复包含 (末尾加下划线是<code>Google C++ Style</code>的命名风格)：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SALES_DATA_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SALES_DATA_H_</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  <span class="comment">// SALES_DATA_H_</span></span></span><br></pre></td></tr></table></figure>

<p>因为没有类的运算符重载和成员函数，故使用面向过程的方式，定义一组函数接口，实现<code>读取</code>、打印、<code>求和</code>书籍信息的功能。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">read_item</span><span class="params">(Sales_data* item)</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> price;</span><br><span class="line">    <span class="keyword">if</span> (std::cin &gt;&gt; item-&gt;book_no) &#123;</span><br><span class="line">        std::cin &gt;&gt; item-&gt;sales_num &gt;&gt; price;</span><br><span class="line">        item-&gt;sales_revenue = price;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_item</span><span class="params">(Sales_data* item)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt;</span><br><span class="line">        item-&gt;book_no &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;</span><br><span class="line">        item-&gt;sales_num &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;</span><br><span class="line">        item-&gt;sales_num * item-&gt;sales_revenue &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;</span><br><span class="line">        item-&gt;sales_revenue &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">item_add</span><span class="params">(Sales_data* item1, Sales_data* item2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// add item2 into item1</span></span><br><span class="line">    <span class="keyword">if</span> (item1-&gt;book_no == item2-&gt;book_no) &#123;</span><br><span class="line">        <span class="type">double</span> total_revenue = item1-&gt;sales_num * item1-&gt;sales_revenue +</span><br><span class="line">            item2-&gt;sales_num * item2-&gt;sales_revenue;</span><br><span class="line">        item1-&gt;sales_num += item2-&gt;sales_num;</span><br><span class="line">        item1-&gt;sales_revenue = total_revenue / item1-&gt;sales_num;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt;</span><br><span class="line">            <span class="string">&quot;When adding two types of books, &quot;</span></span><br><span class="line">            <span class="string">&quot;they must have the same ISBN.&quot;</span> &lt;&lt; std::endl &lt;&lt;</span><br><span class="line">            <span class="string">&quot;In this case, ISBN &quot;</span> &lt;&lt; item1-&gt;book_no &lt;&lt; <span class="string">&quot; != &quot;</span> &lt;&lt;</span><br><span class="line">            <span class="string">&quot;ISBN &quot;</span> &lt;&lt; item2-&gt;book_no &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ul>
<li><p><a href="https://learn.microsoft.com/en-us/cpp/error-messages/tool-errors/global-constants-in-cpp?view=msvc-170">Global Constants in C++</a></p>
</li>
<li><p><a href="https://learn.microsoft.com/en-us/cpp/error-messages/tool-errors/linker-tools-error-lnk2019?view=msvc-170">Linker Tools Error LNK2019</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
        <category>C++ Primer</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>【C++游戏开发】EasyX开发环境搭建|跟随鼠标移动的小球</title>
    <url>/2024/05/24/%E3%80%90C-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E3%80%91EasyX%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-%E8%B7%9F%E9%9A%8F%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%8A%A8%E7%9A%84%E5%B0%8F%E7%90%83/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习<code>C++ Primer</code>，学习语法之余，还需要找些项目练练手，刚好在b站上看到了<a href="https://space.bilibili.com/25864506"><strong>Voidmatrix</strong></a></p>
<p>做的<a href="https://space.bilibili.com/25864506/channel/collectiondetail?sid=1825182&ctype=0">【从零开始的C++游戏开发】</a>系列教程，本期博客是参考了<a href="https://www.bilibili.com/video/BV1iQ4y1s7Qj/">【从零开始的C++游戏开发】EasyX开发环境搭建 | 跟随鼠标移动的小球</a>，完成<code>EasyX</code>开发环境的搭建和实现第一个游戏<code>Demo</code>。</p>
<h2 id="EasyX开发环境搭建"><a href="#EasyX开发环境搭建" class="headerlink" title="EasyX开发环境搭建"></a>EasyX开发环境搭建</h2><p><code>IDE</code>使用<a href="https://visualstudio.microsoft.com/zh-hans/free-developer-offers/">Visual Studio</a>，安装<strong>C++的桌面开发</strong>即可。</p>
<p>在<a href="https://easyx.cn/t/download">EasyX</a>官网下载最新版的<code>EasyX</code>库，为<code>VS2022</code>安装即可。</p>
<p>写一段打印EasyX版本号的代码，验证环境是否正常运行：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;graphics.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%ws\n&quot;</span>, <span class="built_in">GetEasyXVer</span>());</span><br><span class="line">	std::wcout &lt;&lt; <span class="built_in">GetEasyXVer</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意<code>GetEasyXVer</code>这个函数，返回类型为换字符的字符串，打印的方式与<code>std::string</code>略有不同：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> TCHAR* <span class="title">GetEasyXVer</span><span class="params">()</span></span>;						<span class="comment">// Get version of EasyX library</span></span><br></pre></td></tr></table></figure>

<p>打印结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">20240225</span><br><span class="line">20240225</span><br></pre></td></tr></table></figure>

<h2 id="跟随鼠标移动的小球"><a href="#跟随鼠标移动的小球" class="headerlink" title="跟随鼠标移动的小球"></a>跟随鼠标移动的小球</h2><h3 id="绘制窗口"><a href="#绘制窗口" class="headerlink" title="绘制窗口"></a>绘制窗口</h3><p>EasyX提供了<a href="https://docs.easyx.cn/zh-cn/initgraph">initgraph</a>用于绘制窗口，实际使用如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化窗口</span></span><br><span class="line"><span class="built_in">initgraph</span>(<span class="number">1280</span>, <span class="number">960</span>);</span><br></pre></td></tr></table></figure>

<h3 id="绘制填充圆"><a href="#绘制填充圆" class="headerlink" title="绘制填充圆"></a>绘制填充圆</h3><p><code>EasyX</code>提供了<a href="https://docs.easyx.cn/zh-cn/solidcircle">solidcircle</a>用于绘制圆，实际使用如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (x, y)为圆心</span></span><br><span class="line"><span class="built_in">solidcircle</span>(x, y, <span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<h3 id="处理鼠标事件"><a href="#处理鼠标事件" class="headerlink" title="处理鼠标事件"></a>处理鼠标事件</h3><p><code>EasyX</code>自带了消息队列，提供了一组<a href="https://docs.easyx.cn/zh-cn/msg-func">消息处理相关函数</a>进行处理，使用<code>peekmessage</code>函数获取一个消息，消费消息队列的模式如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ExMessage msg;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">peekmessage</span>(&amp;msg)) &#123;</span><br><span class="line">	<span class="keyword">if</span> (msg.message == WM_MOUSEMOVE) &#123;</span><br><span class="line">		...</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ExMessage</code>类型的变量用于存放鼠标消息，定义了成员变量<code>message</code>作为消息标识，其中<code>WM_MOUSEMOVE</code>标识鼠标移动。</p>
<h3 id="清除屏幕"><a href="#清除屏幕" class="headerlink" title="清除屏幕"></a>清除屏幕</h3><p>进行绘制后需要有规律地清除屏幕，否则屏幕会比较杂乱，此时使用<a href="https://docs.easyx.cn/zh-cn/cleardevice">cleardevice</a>，用于清除屏幕。注意：清屏操作需要在绘制操作之前进行，否则刷新速度较快，会看不到绘制的内容。</p>
<h3 id="屏幕闪烁"><a href="#屏幕闪烁" class="headerlink" title="屏幕闪烁"></a>屏幕闪烁</h3><p>使用<a href="https://docs.easyx.cn/zh-cn/beginbatchdraw">BeginBatchDraw</a>、<a href="https://docs.easyx.cn/zh-cn/endbatchdraw">EndBatchDraw</a>、<a href="https://docs.easyx.cn/zh-cn/flushbatchdraw">FlushBatchDraw</a>解决该问题。</p>
<h3 id="残影效果"><a href="#残影效果" class="headerlink" title="残影效果"></a>残影效果</h3><p>绘制100次圆后，清除屏幕一次，这样小球会留下移动的痕迹。</p>
<p>最终实现代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;graphics.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 初始化窗口</span></span><br><span class="line">	<span class="built_in">initgraph</span>(<span class="number">1280</span>, <span class="number">960</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> x = <span class="number">300</span>, y = <span class="number">300</span>;</span><br><span class="line">	ExMessage msg;</span><br><span class="line">	<span class="type">const</span> <span class="type">unsigned</span> CIRCLE_COUNT = <span class="number">100</span>;</span><br><span class="line">	<span class="type">unsigned</span> crc_cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">BeginBatchDraw</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="keyword">while</span> (<span class="built_in">peekmessage</span>(&amp;msg)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (msg.message == WM_MOUSEMOVE) &#123;</span><br><span class="line">				<span class="comment">// 圆心坐标即为鼠标位置</span></span><br><span class="line">				x = msg.x, y = msg.y;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 清除屏幕和绘制的顺序不能反过来</span></span><br><span class="line">			<span class="comment">// 不然在屏幕上看不到圆</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 打印100次圆后清除屏幕</span></span><br><span class="line">		<span class="keyword">if</span> (crc_cnt == CIRCLE_COUNT) &#123;</span><br><span class="line">			<span class="built_in">cleardevice</span>();</span><br><span class="line">			crc_cnt = <span class="number">0</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			crc_cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">solidcircle</span>(x, y, <span class="number">100</span>);</span><br><span class="line">		<span class="built_in">FlushBatchDraw</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">EndBatchDraw</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终效果如下：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/b20140e55d4b1a59f562087ad63e7fa.png" alt="b20140e55d4b1a59f562087ad63e7fa"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://space.bilibili.com/25864506/channel/collectiondetail">合集·从零开始的提瓦特幸存者</a></li>
<li><a href="https://www.bilibili.com/video/BV1iQ4y1s7Qj/">【从零开始的C++游戏开发】EasyX开发环境搭建 | 跟随鼠标移动的小球</a></li>
<li><a href="https://docs.easyx.cn/zh-cn/intro">EasyX 在线文档</a></li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
        <category>EasyX</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>基于EasyX的游戏开发</tag>
      </tags>
  </entry>
  <entry>
    <title>【个人博客优化】Hexo+Next</title>
    <url>/2024/05/24/%E3%80%90%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E3%80%91Hexo-Next/</url>
    <content><![CDATA[<p>注意：下文将<code>Hexo</code>的主题文件<code>_config.yml</code>称为<strong>站点配置文件</strong>，将<code>_config.next.yml</code>称为<strong>主题配置文件</strong>。</p>
<h2 id="首页设置"><a href="#首页设置" class="headerlink" title="首页设置"></a>首页设置</h2><p><code>Hexo</code>默认的首页会显示每一篇文章的标题和全文，笔者觉得不是很美观，故想把首页样式修改为只显示文章的标题和摘要，这点可以比较方便的通过设置<strong>主题配置文件</strong>实现：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use `description` in front-matter to specify post excerpt.</span></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>之后在博客的模板文件中，添加<code>description</code>一项，这样创建博客时会自动创建描述，再简单修改就可以实现目标功能：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">toc: true</span><br><span class="line">description: 这是显示在首页的概述，正文内容均会被隐藏。</span><br></pre></td></tr></table></figure>

<p>设置成功后，效果如下：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/049a2fc7b2ce5230b68a1e46ae83f27.png" alt="049a2fc7b2ce5230b68a1e46ae83f27"></p>
<h2 id="菜单页设置"><a href="#菜单页设置" class="headerlink" title="菜单页设置"></a>菜单页设置</h2><p>在<strong>主题配置文件</strong>中，开启所需的菜单项：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="comment"># about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>

<h2 id="搜索栏"><a href="#搜索栏" class="headerlink" title="搜索栏"></a>搜索栏</h2><p>在站点配置文件中加入以下内容（<code>limit</code>的值表示搜索条目的最大数量）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>在主题配置文件中，启动本地搜索功能：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>安装依赖项：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-generator-searchdb --save</span></span><br></pre></td></tr></table></figure>

<p>最终效果如下：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/b048d568938326cdc0d662a5f2c50c5.png" alt="b048d568938326cdc0d662a5f2c50c5"></p>
<h2 id="标签页和分类页"><a href="#标签页和分类页" class="headerlink" title="标签页和分类页"></a>标签页和分类页</h2><p>创建分类目录文件和标签目录文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new page categories</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new page tags</span></span><br></pre></td></tr></table></figure>

<p>将对应页面的类型（<code>type</code>）设置正确：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: categories</span><br><span class="line">toc: true</span><br><span class="line">date: 2024-05-24 10:16:44</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: tags</span><br><span class="line">toc: true</span><br><span class="line">date: 2024-05-24 10:21:41</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure>

<p>在博客文件中设置<code>tags</code>和<code>categories</code>词条，就能在对应目录下显示了。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://blog.smallerpig.com/set-hexo-show-more-button-on-indexpage.html">让hexo的首页只显示文章的部分内容而不是全部</a></p>
</li>
<li><p><a href="https://theme-next.iissnan.com/getting-started.html">Next 开始使用</a></p>
</li>
<li><p><a href="https://www.sqlsec.com/2017/12/hexosearch.html">Hexo 博客无法搜索的终极解决方法</a></p>
</li>
<li><p><a href="https://tohugo.com/2021/01/26/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE%EF%BC%88%E5%9C%A8Next%E4%B8%BB%E9%A2%98%E4%B8%8B%EF%BC%89/">Hexo添加分类及标签（在Next主题下）</a></p>
</li>
<li><p><a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>【C++ Primer 学习笔记】第四章 表达式</title>
    <url>/2024/06/05/cppPrimerNotesChapter04-md/</url>
    <content><![CDATA[<h2 id="如何看待C-的表达式"><a href="#如何看待C-的表达式" class="headerlink" title="如何看待C++的表达式"></a>如何看待C++的表达式</h2><p>C++的表达式运算符和操作数组成的式子。</p>
<p>C++有一元运算符、二元运算符、三元运算符。（区别在于操作数的不同）</p>
<p>运算符有以下属性：</p>
<ul>
<li><p>优先级：运算符的计算顺序</p>
</li>
<li><p>求值顺序：操作数的计算顺序</p>
</li>
<li><p>结合律：相同的运算符之间的计算顺序</p>
</li>
<li><p>返回值：运算符运算后的结果。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
        <category>C++ Primer</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
</search>
