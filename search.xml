<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/05/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>【C++ Primer 学习笔记】第二章 变量和基本类型</title>
    <url>/2024/05/22/%E3%80%90C-Primer%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%8F%98%E9%87%8F%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="chap02-变量和基本类型"><a href="#chap02-变量和基本类型" class="headerlink" title="chap02 变量和基本类型"></a>chap02 变量和基本类型</h1><h2 id="cpp代码规范"><a href="#cpp代码规范" class="headerlink" title="cpp代码规范"></a><code>cpp</code>代码规范</h2><p>使用<code>Google C++ Style</code>规范代码，用到了<code>VSCode</code>的<code>cpplint</code>插件。</p>
<p>使用参考：<a href="https://juejin.cn/post/7175821057587150885">【C++编程】在Visual Studio Code中配置Cpplint代码检测</a></p>
<h2 id="chap2-1-基本内置类型"><a href="#chap2-1-基本内置类型" class="headerlink" title="chap2.1 基本内置类型"></a>chap2.1 基本内置类型</h2><ul>
<li><code>short</code>、<code>int</code>、<code>long</code>、<code>long long</code>这几种基本类型有什么区别</li>
<li><code>float</code>和<code>double</code>有什么区别</li>
<li>无符号类型和有符号类型进行运算，如何处理</li>
</ul>
<h3 id="练习2-1"><a href="#练习2-1" class="headerlink" title="练习2.1"></a>练习2.1</h3><p><code>sizeof(short)</code>&lt;&#x3D;<code>sizeof(int)</code>&lt;&#x3D;<code>sizeof(long)</code>&lt;&#x3D;<code>sizeof(long long)</code></p>
<p>无符号类型只能表示0和正数，有符号类型可以表示负数、0和正数。</p>
<p>无符号类型和有符号类型进行运算时，先把有符号类型转换为无符号类型，无符号类型溢出时，进行取模操作（mod 2^m，m为该类型的位数）。</p>
<p><code>float</code>的精度较<code>double</code>更差，而且开销不一定更小，一般情况下尽量使用<code>double</code>。</p>
<h3 id="练习2-2"><a href="#练习2-2" class="headerlink" title="练习2.2"></a>练习2.2</h3><p>利率应该使用浮点型，本金和付款应该使用整型。</p>
<h2 id="chap2-2-变量"><a href="#chap2-2-变量" class="headerlink" title="chap2.2 变量"></a>chap2.2 变量</h2><ul>
<li>列表初始化有什么好处？</li>
</ul>
<h3 id="列表初始化"><a href="#列表初始化" class="headerlink" title="列表初始化"></a>列表初始化</h3><p>C++有多种初始化变量的方式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> units_sold1 = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> units_sold2 = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">units_sold3</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="type">int</span> units_sold4&#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>其中使用了花括号<code>&#123;&#125;</code>的即为列表初始化，该特性在<code>C++11</code>中受到了全面应用,列表初始化会在存在丢失信息的风险时出现<code>warning</code>。</p>
<p>下面这段代码，只有使用列表初始化时编译会出现<code>warning</code>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">double</span> ld = <span class="number">3.141592654L</span>;</span><br><span class="line"><span class="type">int</span> i1 = ld, <span class="built_in">i2</span>(ld);</span><br><span class="line"><span class="type">int</span> i3 = &#123;ld&#125;, i4&#123;ld&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="chap2-3-复合类型"><a href="#chap2-3-复合类型" class="headerlink" title="chap2.3 复合类型"></a>chap2.3 复合类型</h2><ul>
<li>指针和引用的区别？</li>
</ul>
<h2 id="chap2-4-const限定符"><a href="#chap2-4-const限定符" class="headerlink" title="chap2.4 const限定符"></a>chap2.4 const限定符</h2><ul>
<li>顶层const和底层const的区别</li>
</ul>
<h3 id="顶层const和底层const"><a href="#顶层const和底层const" class="headerlink" title="顶层const和底层const"></a>顶层const和底层const</h3><p>顶层const指的是修饰对象本身的const限定符，底层const指的是修饰指向的对象的const限定符。</p>
<p>可以参考<a href="https://stackoverflow.com/questions/7914444/what-are-top-level-const-qualifiers">What are top-level const qualifiers?</a></p>
<h3 id="跨文件的常量"><a href="#跨文件的常量" class="headerlink" title="跨文件的常量"></a>跨文件的常量</h3><p>如果需要访问其他文件的常量，需要将该文件的常量定义加上<code>extern</code>修饰符，因为常量默认定义为静态链接，外部文件是不可见的。</p>
<p>参考<a href="https://learn.microsoft.com/en-us/cpp/error-messages/tool-errors/global-constants-in-cpp?view=msvc-170">Global Constants in C++</a>的例子，以下代码在编译时出现<a href="https://learn.microsoft.com/en-us/cpp/error-messages/tool-errors/linker-tools-error-lnk2019?view=msvc-170">Linker Tools Error LNK2019</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// global_constants.cpp</span></span><br><span class="line"><span class="comment">// LNK2019 expected</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> lnktest1 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="built_in">test</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// global_constants_2.cpp</span></span><br><span class="line"><span class="comment">// compile with: global_constants.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> lnktest1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> i = lnktest1;   <span class="comment">// LNK2019</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决办法：给常量的定义加上<code>extern</code>修饰符，使其变成外部链接。</p>
<h2 id="chap2-5-处理类型"><a href="#chap2-5-处理类型" class="headerlink" title="chap2.5 处理类型"></a>chap2.5 处理类型</h2><ul>
<li>如何定义新的类型</li>
<li>类型别名是什么，给基本数据类型和复合类型起别名有什么区别</li>
<li><code>auto</code>类型说明符是如何推导类型的</li>
<li><code>decltype</code>类型说明符是如何推导类型的</li>
</ul>
<h3 id="定义新的类型"><a href="#定义新的类型" class="headerlink" title="定义新的类型"></a>定义新的类型</h3><p><code>typedef</code>关键字可以定义新的类型：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> wages;       <span class="comment">// wages是double的别名</span></span><br><span class="line"><span class="keyword">typedef</span> wages base, *dp;    <span class="comment">// base是double的别名，dp是double*的别名</span></span><br></pre></td></tr></table></figure>

<p><code>C++11</code>支持使用<code>using</code>关键字定义新的类型：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> DOUBLE = <span class="type">double</span>;      <span class="comment">// DOUBLE是double的别名</span></span><br></pre></td></tr></table></figure>

<p>涉及到指针、常量等结合的复合类型时，要注意，<code>typedef</code>定义的新类型在声明语句中是作为整体，即数据类型。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> *pstring;      <span class="comment">// pstring是char*的别名</span></span><br><span class="line"><span class="type">const</span> pstring cstr = <span class="number">0</span>;     <span class="comment">// cstr是指向char的指针常量</span></span><br><span class="line"><span class="type">const</span> pstring *ps;          <span class="comment">// ps是指向 指向char的指针常量 的指针</span></span><br></pre></td></tr></table></figure>

<h3 id="auto类型说明符"><a href="#auto类型说明符" class="headerlink" title="auto类型说明符"></a><code>auto</code>类型说明符</h3><p><code>C++11</code>引入了<code>auto</code>类型说明符，能够自动推导类型。</p>
<p>需要注意：</p>
<ul>
<li><p><code>auto</code>声明的变量必须有初始值，否则编译器无法推导出变量的类型。</p>
</li>
<li><p>使用<code>auto</code>声明多个变量时，这些变量的类型必须一致。</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief </span></span><br><span class="line"><span class="comment"> * ci是const int</span></span><br><span class="line"><span class="comment"> * m是int</span></span><br><span class="line"><span class="comment"> * p是指向const int的指针</span></span><br><span class="line"><span class="comment"> * error: inconsistent deduction for &#x27;auto&#x27;: &#x27;int&#x27; and then &#x27;const int&#x27;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">auto</span> m = ci, *p = &amp;ci;</span><br></pre></td></tr></table></figure>


<ul>
<li><code>auto</code>推导引用的类型时，会得到引用指向对象的类型。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief </span></span><br><span class="line"><span class="comment"> * r是int的引用，a是int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">auto</span> a = r;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>auto</code>会忽略<code>顶层const</code>，保留<code>底层const</code>，如果需要定义const对象，则使用<code>const auto</code>。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief </span></span><br><span class="line"><span class="comment"> * cr是对const int的引用</span></span><br><span class="line"><span class="comment"> * 此时顶层const被忽略</span></span><br><span class="line"><span class="comment"> * c是int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">auto</span> c = cr;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief </span></span><br><span class="line"><span class="comment"> * ci是const int</span></span><br><span class="line"><span class="comment"> * 此时顶层const被忽略</span></span><br><span class="line"><span class="comment"> * 但auto前明确指出该类型是一个顶层const</span></span><br><span class="line"><span class="comment"> * 故f是const int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> f = ci;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>auto</code>支持声明引用类型，以<code>auto &amp;r</code>的形式</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief </span></span><br><span class="line"><span class="comment"> * ci是const int</span></span><br><span class="line"><span class="comment"> * 此时const退化为底层引用</span></span><br><span class="line"><span class="comment"> * 故g为const int的引用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">auto</span> &amp;g = ci;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief</span></span><br><span class="line"><span class="comment"> * 42是int</span></span><br><span class="line"><span class="comment"> * j是对int常量的引用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">const</span> <span class="keyword">auto</span> &amp;j = <span class="number">42</span>;</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://en.cppreference.com/w/cpp/language/auto">Placeholder type specifiers</a></p>
<h3 id="decltype类型指示符"><a href="#decltype类型指示符" class="headerlink" title="decltype类型指示符"></a><code>decltype</code>类型指示符</h3><p><code>C++11</code>还提供了<code>decltype</code>关键字用于推导类型，该关键字使用表达式推导类型。</p>
<p>需要注意：</p>
<ul>
<li>与<code>auto</code>不同，<code>deltype</code>不会忽略表达式的类型中存在的<code>顶层const</code></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> ci = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">auto</span> a = ci;            <span class="comment">// a: int</span></span><br><span class="line"><span class="keyword">decltype</span>(ci) b = <span class="number">2024</span>;  <span class="comment">// b: const int</span></span><br></pre></td></tr></table></figure>

<ul>
<li>赋值表达式的类型是左值引用</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">3</span>, b = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">decltype</span>(a) c = a;      <span class="comment">// c: int</span></span><br><span class="line"><span class="keyword">decltype</span>(a = b) d = a;  <span class="comment">// d: int&amp;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>变量不加括号，类型是其本身；变量加了括号，就变成了表达式，类型是其本身的引用</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">3</span>, b = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">decltype</span>(a) c = a;      <span class="comment">// c: int</span></span><br><span class="line"><span class="keyword">decltype</span>((b)) d = b;    <span class="comment">// d: int&amp;</span></span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://en.cppreference.com/w/cpp/language/decltype">decltype specifier</a></p>
<h2 id="chap2-6-自定义数据结构"><a href="#chap2-6-自定义数据结构" class="headerlink" title="chap2.6 自定义数据结构"></a>chap2.6 自定义数据结构</h2><ul>
<li>C++如何定义数据结构？</li>
</ul>
<h3 id="struct和class"><a href="#struct和class" class="headerlink" title="struct和class"></a><code>struct</code>和<code>class</code></h3><p>使用结构体可以定义数据结构：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Sales_data</span> &#123;</span><br><span class="line">    std::string book_no;        <span class="comment">// 书籍ISBN号</span></span><br><span class="line">    <span class="type">int</span> sales_num = <span class="number">0</span>;          <span class="comment">// 销量</span></span><br><span class="line">    <span class="type">double</span> sales_revenue = <span class="number">0.0</span>;     <span class="comment">// 平均售价</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>使用类也可以起到同样的效果：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sales_data</span> &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">    std::string book_no;        <span class="comment">// 书籍ISBN号</span></span><br><span class="line">    <span class="type">int</span> sales_num = <span class="number">0</span>;          <span class="comment">// 销量</span></span><br><span class="line">    <span class="type">double</span> sales_revenue = <span class="number">0.0</span>;     <span class="comment">// 平均售价</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="编写自己的Sales-data类"><a href="#编写自己的Sales-data类" class="headerlink" title="编写自己的Sales_data类"></a>编写自己的<code>Sales_data</code>类</h3><p>在头文件中，需要加入头文件保护符，防止头文件被重复包含 (末尾加下划线是<code>Google C++ Style</code>的命名风格)：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SALES_DATA_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SALES_DATA_H_</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  <span class="comment">// SALES_DATA_H_</span></span></span><br></pre></td></tr></table></figure>

<p>因为没有类的运算符重载和成员函数，故使用面向过程的方式，定义一组函数接口，实现<code>读取</code>、打印、<code>求和</code>书籍信息的功能。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">read_item</span><span class="params">(Sales_data* item)</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> price;</span><br><span class="line">    <span class="keyword">if</span> (std::cin &gt;&gt; item-&gt;book_no) &#123;</span><br><span class="line">        std::cin &gt;&gt; item-&gt;sales_num &gt;&gt; price;</span><br><span class="line">        item-&gt;sales_revenue = price;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_item</span><span class="params">(Sales_data* item)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt;</span><br><span class="line">        item-&gt;book_no &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;</span><br><span class="line">        item-&gt;sales_num &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;</span><br><span class="line">        item-&gt;sales_num * item-&gt;sales_revenue &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;</span><br><span class="line">        item-&gt;sales_revenue &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">item_add</span><span class="params">(Sales_data* item1, Sales_data* item2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// add item2 into item1</span></span><br><span class="line">    <span class="keyword">if</span> (item1-&gt;book_no == item2-&gt;book_no) &#123;</span><br><span class="line">        <span class="type">double</span> total_revenue = item1-&gt;sales_num * item1-&gt;sales_revenue +</span><br><span class="line">            item2-&gt;sales_num * item2-&gt;sales_revenue;</span><br><span class="line">        item1-&gt;sales_num += item2-&gt;sales_num;</span><br><span class="line">        item1-&gt;sales_revenue = total_revenue / item1-&gt;sales_num;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt;</span><br><span class="line">            <span class="string">&quot;When adding two types of books, &quot;</span></span><br><span class="line">            <span class="string">&quot;they must have the same ISBN.&quot;</span> &lt;&lt; std::endl &lt;&lt;</span><br><span class="line">            <span class="string">&quot;In this case, ISBN &quot;</span> &lt;&lt; item1-&gt;book_no &lt;&lt; <span class="string">&quot; != &quot;</span> &lt;&lt;</span><br><span class="line">            <span class="string">&quot;ISBN &quot;</span> &lt;&lt; item2-&gt;book_no &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://learn.microsoft.com/en-us/cpp/error-messages/tool-errors/global-constants-in-cpp?view=msvc-170">Global Constants in C++</a></p>
</li>
<li><p><a href="https://learn.microsoft.com/en-us/cpp/error-messages/tool-errors/linker-tools-error-lnk2019?view=msvc-170">Linker Tools Error LNK2019</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
        <category>C++ Primer</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>【C++ Primer 学习笔记】第一章 开始</title>
    <url>/2024/05/19/%E3%80%90C-Primer%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<h1 id="chap01-开始"><a href="#chap01-开始" class="headerlink" title="chap01 开始"></a>chap01 开始</h1><h2 id="chap1-1-编写一个简单的C-程序"><a href="#chap1-1-编写一个简单的C-程序" class="headerlink" title="chap1.1 编写一个简单的C++程序"></a>chap1.1 编写一个简单的C++程序</h2><ul>
<li>如何编译运行一个<code>cpp</code>程序</li>
<li>如何获得系统执行完程序的退出状态码</li>
<li><code>return 0</code>和<code>return -1</code>的退出状态码有什么区别</li>
</ul>
<h3 id="编译运行cpp程序"><a href="#编译运行cpp程序" class="headerlink" title="编译运行cpp程序"></a>编译运行cpp程序</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">g++ -o main main.cpp</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./main</span></span><br></pre></td></tr></table></figure>

<p>如果缺省<code>-o</code>选项，<code>Windows</code>系统上编译得到的可执行文件为<code>a.exe</code>，<code>Linux</code>系统上得到<code>a.out</code>。</p>
<h3 id="退出状态码"><a href="#退出状态码" class="headerlink" title="退出状态码"></a>退出状态码</h3><p><code>Linux</code>系统 (<code>Windows</code>系统使用<code>Git Bash</code>也一样) 上使用如下命令获取退出状态码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> $?</span></span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<p>通常情况下，程序成功执行返回0，失败返回127。</p>
<p><code>return 0</code>和<code>return -1</code>的退出状态码分别为0和127。</p>
<h2 id="chap1-2-初识输入输出"><a href="#chap1-2-初识输入输出" class="headerlink" title="chap1.2 初识输入输出"></a>chap1.2 初识输入输出</h2><ul>
<li>标准库定义了哪四个IO对象，它们分别是什么类型</li>
<li><code>istream</code>和<code>ostream</code>类型的对象运算时有什么区别，计算结果是什么</li>
<li>命名空间<code>std</code>有什么用</li>
</ul>
<h3 id="标准库的IO对象"><a href="#标准库的IO对象" class="headerlink" title="标准库的IO对象"></a>标准库的IO对象</h3><ul>
<li><code>cin</code>，<code>istream</code></li>
<li><code>cout</code>，<code>ostream</code></li>
<li><code>cerr</code>，<code>ostream</code></li>
<li><code>clog</code>，<code>ostream</code></li>
</ul>
<p>在<code>iostream</code>声明如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> istream cin;		  <span class="comment">/// Linked to standard input</span></span><br><span class="line"><span class="keyword">extern</span> ostream cout;		<span class="comment">/// Linked to standard output</span></span><br><span class="line"><span class="keyword">extern</span> ostream cerr;		<span class="comment">/// Linked to standard error (unbuffered)</span></span><br><span class="line"><span class="keyword">extern</span> ostream clog;		<span class="comment">/// Linked to standard error (buffered)</span></span><br></pre></td></tr></table></figure>

<h3 id="istream和ostream类型的运算"><a href="#istream和ostream类型的运算" class="headerlink" title="istream和ostream类型的运算"></a><code>istream</code>和<code>ostream</code>类型的运算</h3><p><code>istream</code>使用<code>&gt;&gt;</code>运算符，运算结果是左侧的对象。</p>
<p><code>ostream</code>使用<code>&lt;&lt;</code>运算符，运算结果是左侧的对象。</p>
<h3 id="命名空间std"><a href="#命名空间std" class="headerlink" title="命名空间std"></a>命名空间<code>std</code></h3><p><code>std</code>用于隔离变量和函数的命名，使得不同的命名空间能够有同名的函数和变量。</p>
<p>使用<code>std::cin</code>的形式调用命名空间中的变量。</p>
<p><code>::</code>称为作用域运算符。</p>
<h3 id="Windows命令行运行C-程序出现中文乱码"><a href="#Windows命令行运行C-程序出现中文乱码" class="headerlink" title="Windows命令行运行C++程序出现中文乱码"></a><code>Windows</code>命令行运行C++程序出现中文乱码</h3><p><code>VSCode</code>的默认编码为<code>UTF-8</code>，终端的编码默认为<code>GBK</code>，将<code>VSCode</code>的编码设置为<code>GBK</code>即可解决问题。</p>
<h2 id="chap1-3-注释简介"><a href="#chap1-3-注释简介" class="headerlink" title="chap1.3 注释简介"></a>chap1.3 注释简介</h2><ul>
<li>C++如何编写注释，有哪些类型的注释</li>
</ul>
<h3 id="C-的注释"><a href="#C-的注释" class="headerlink" title="C++的注释"></a>C++的注释</h3><p>单行注释：<code>//</code></p>
<p>多行注释：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id="chap1-4-控制流"><a href="#chap1-4-控制流" class="headerlink" title="chap1.4 控制流"></a>chap1.4 控制流</h2><ul>
<li>while语句</li>
<li>for语句</li>
<li>if语句</li>
</ul>
<h3 id="读取数量不确定的输入数据"><a href="#读取数量不确定的输入数据" class="headerlink" title="读取数量不确定的输入数据"></a>读取数量不确定的输入数据</h3><p>可以使用如下的模式读取不确定数量的输入数据：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> value;</span><br><span class="line"><span class="keyword">while</span> (std::cin &gt;&gt; value) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>std::cin &gt;&gt; value</code>会将输入存入<code>value</code>这个变量中，返回<code>std::cin</code>，如果<code>std::cin</code>的状态无效，比如读取到非整型或者EOF（<code>Windows</code>输入<code>Ctrl-Z</code>，<code>Linux</code>输入<code>Ctrl-D</code>），则退出循环，结束读取。</p>
<h2 id="chap1-5-类简介"><a href="#chap1-5-类简介" class="headerlink" title="chap1.5 类简介"></a>chap1.5 类简介</h2><ul>
<li>类与基本数据类型的区别在哪里</li>
</ul>
<p>类聚合了一组数据和操作，对于基本数据类型（如整型），<code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>+</code>、<code>=</code>等运算符能够被C++语言默认支持，但类的对象需要自己实现，书中提供了<code>Sales_item</code>这个头文件，能够提供<code>Sales_item</code>这个类，支持了对各种运算符的操作，能够方便地进行读写和计算。</p>
]]></content>
      <categories>
        <category>C++</category>
        <category>C++ Primer</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>如何搭建个人博客</title>
    <url>/2024/05/18/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>受到了b站一位up主<a href="https://space.bilibili.com/384068749">CodeSheep</a>的启发：</p>
<ul>
<li><p><a href="https://www.bilibili.com/video/BV1at411X7nu/?spm_id_from=333.999.0.0&vd_source=249a8ad55bb26717dd55ec3dd295f644">程序猿如何搭建一个属于自己的个人博客</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty/?spm_id_from=333.788.top_right_bar_window_default_collection.content.click&vd_source=249a8ad55bb26717dd55ec3dd295f644">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/BV1q4411i7gL/?spm_id_from=333.999.0.0&vd_source=249a8ad55bb26717dd55ec3dd295f644">手把手教你从0开始搭建自己的个人博客 |第二种姿势 | hugo</a></p>
</li>
</ul>
<h2 id="博客框架选型"><a href="#博客框架选型" class="headerlink" title="博客框架选型"></a>博客框架选型</h2><h3 id="动态博客"><a href="#动态博客" class="headerlink" title="动态博客"></a>动态博客</h3><p>自己搭建网站，实现前后端</p>
<p><a href="https://www.wordpress.org/">wordpress</a>：动态博客框架</p>
<h3 id="静态博客"><a href="#静态博客" class="headerlink" title="静态博客"></a>静态博客</h3><p><a href="https://www.hexo.io/">hexo</a>：简洁，易于搭建，支持<code>markdown</code>，使用<code>js</code></p>
<p><a href="https://www.gohugo.org/">Hugo</a>：基于<code>go</code>语言</p>
<p><a href="https://vuepress.vuejs.org/">vuepress</a>：基于<code>vue.js</code></p>
<p><a href="https://b3log.org/">solo</a>：基于<code>Java</code>语言</p>
<h2 id="使用hexo搭建个人博客"><a href="#使用hexo搭建个人博客" class="headerlink" title="使用hexo搭建个人博客"></a>使用<code>hexo</code>搭建个人博客</h2><p>在<code>Windows</code>上配置环境，使用<code>Hexo + Github</code>的组合搭建个人博客。</p>
<h3 id="搭建hexo环境"><a href="#搭建hexo环境" class="headerlink" title="搭建hexo环境"></a>搭建<code>hexo</code>环境</h3><p>安装<code>node.js</code>，安装成功后查看其版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node -v</span></span><br><span class="line">v18.17.1</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm -v</span></span><br><span class="line">9.6.7</span><br></pre></td></tr></table></figure>

<p>使用<code>npm</code>下载<code>hexo</code>(<code>-g</code>参数表示全局安装)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure>

<p>下载成功后查看<code>hexo</code>版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo -v</span></span><br><span class="line">hexo-cli: 4.3.2</span><br><span class="line">os: win32 10.0.19045 undefined</span><br><span class="line">node: 18.17.1</span><br><span class="line">acorn: 8.8.2</span><br><span class="line">ada: 2.5.0</span><br><span class="line">ares: 1.19.1</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">cldr: 43.0</span><br><span class="line">icu: 73.1</span><br><span class="line">llhttp: 6.0.11</span><br><span class="line">modules: 108</span><br><span class="line">napi: 9</span><br><span class="line">nghttp2: 1.52.0</span><br><span class="line">nghttp3: 0.7.0</span><br><span class="line">ngtcp2: 0.8.1</span><br><span class="line">openssl: 3.0.10+quic</span><br><span class="line">simdutf: 3.2.12</span><br><span class="line">tz: 2023c</span><br><span class="line">undici: 5.22.1</span><br><span class="line">unicode: 15.0</span><br><span class="line">uv: 1.44.2</span><br><span class="line">uvwasi: 0.0.18</span><br><span class="line">v8: 10.2.154.26-node.26</span><br><span class="line">zlib: 1.2.13.1-motley</span><br></pre></td></tr></table></figure>

<h3 id="搭建hexo博客"><a href="#搭建hexo博客" class="headerlink" title="搭建hexo博客"></a>搭建<code>hexo</code>博客</h3><p>创建一个<code>blog</code>目录，用于存放<code>hexo</code>博客系统，进入该目录后生成一个初始模板：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> blog</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> blog/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo init</span></span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>

<p>启动博客，使其能够在本地调试(<code>s</code>是<code>server</code>的缩写，表示启动服务器)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo s</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<p>创建第一篇博客(<code>n</code>是<code>new</code>的缩写，表示新建一篇博客)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo n <span class="string">&quot;如何搭建个人博客&quot;</span></span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: D:\blog\source\_posts\如何搭建个人博客.md</span><br></pre></td></tr></table></figure>

<p>清除生成的静态文件和缓存：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo clean</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deleted database.</span><br></pre></td></tr></table></figure>

<h3 id="使用Github部署博客"><a href="#使用Github部署博客" class="headerlink" title="使用Github部署博客"></a>使用<code>Github</code>部署博客</h3><p>使用<code>npm</code>下载部署插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>生成静态文件，用于部署到<code>Github</code>上(<code>g</code>是<code>generate</code>的缩写，表示生成静态文件)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo g</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 128 ms</span><br><span class="line">INFO  Generated: archives/index.html</span><br><span class="line">INFO  Generated: archives/2024/index.html</span><br><span class="line">INFO  Generated: archives/2024/05/index.html</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  Generated: js/script.js</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.min.css</span><br><span class="line">INFO  Generated: css/style.css</span><br><span class="line">INFO  Generated: js/jquery-3.6.4.min.js</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.min.js</span><br><span class="line">INFO  Generated: css/images/banner.jpg</span><br><span class="line">INFO  Generated: 2024/05/18/hello-world/index.html</span><br><span class="line">INFO  Generated: 2024/05/18/如何搭建个人博客/index.html</span><br><span class="line">INFO  12 files generated in 287 ms</span><br></pre></td></tr></table></figure>

<p>部署博客到<code>Github</code>上(<code>d</code>是<code>deploy</code>的缩写，表示部署博客)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo d</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Setting up Git deployment...</span><br><span class="line">Initialized empty Git repository in D:/blog/.deploy_git/.git/</span><br><span class="line">[master (root-commit) 011bb0a] First commit</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 placeholder</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">warning: in the working copy of &#x27;2024/05/18/hello-world/index.html&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;2024/05/18/如何搭建个人博客/index.html&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;archives/2024/05/index.html&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;archives/2024/index.html&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;archives/index.html&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;css/style.css&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;fancybox/jquery.fancybox.min.js&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;index.html&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;js/jquery-3.6.4.min.js&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">warning: in the working copy of &#x27;js/script.js&#x27;, LF will be replaced by CRLF the next time Git touches it</span><br><span class="line">[master 60727be] Site updated: 2024-05-18 10:44:05</span><br><span class="line"> 13 files changed, 2798 insertions(+)</span><br><span class="line"> create mode 100644 2024/05/18/hello-world/index.html</span><br><span class="line"> create mode 100644 2024/05/18/如何搭建个人博客/index.html</span><br><span class="line"> create mode 100644 archives/2024/05/index.html</span><br><span class="line"> create mode 100644 archives/2024/index.html</span><br><span class="line"> create mode 100644 archives/index.html</span><br><span class="line"> create mode 100644 css/images/banner.jpg</span><br><span class="line"> create mode 100644 css/style.css</span><br><span class="line"> create mode 100644 fancybox/jquery.fancybox.min.css</span><br><span class="line"> create mode 100644 fancybox/jquery.fancybox.min.js</span><br><span class="line"> create mode 100644 index.html</span><br><span class="line"> create mode 100644 js/jquery-3.6.4.min.js</span><br><span class="line"> create mode 100644 js/script.js</span><br><span class="line"> delete mode 100644 placeholder</span><br><span class="line">Enumerating objects: 29, done.</span><br><span class="line">Counting objects: 100% (29/29), done.</span><br><span class="line">Delta compression using up to 12 threads</span><br><span class="line">Compressing objects: 100% (21/21), done.</span><br><span class="line">Writing objects: 100% (29/29), 278.71 KiB | 671.00 KiB/s, done.</span><br><span class="line">Total 29 (delta 5), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (5/5), done.</span><br><span class="line">To github.com:Maxwell2020152049/Maxwell2020152049.github.io.git</span><br><span class="line"> * [new branch]      HEAD -&gt; master</span><br><span class="line">branch &#x27;master&#x27; set up to track &#x27;git@github.com:Maxwell2020152049/Maxwell2020152049.github.io.git/master&#x27;.</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure>

<p>部署完成后，需要在<code>GitHub</code>上设置从<code>master</code>分支构建<code>Github Page</code>。</p>
<p>参考：<a href="https://stackoverflow.com/questions/64369729/git-404-there-isnt-a-github-pages-site-here">Git 404 There isn’t a GitHub Pages site here</a></p>
<p>最后，在<a href="https://maxwell2020152049.github.io/">My Blog</a>就能看到博客了，第一次部署可能需要一点时间。</p>
<h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><p>下载<code>yilia</code>主题在<code>themes</code>目录下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> git@github.com:litten/hexo-theme-yilia.git yilia</span></span><br><span class="line">Cloning into &#x27;yilia&#x27;...</span><br><span class="line">remote: Enumerating objects: 2037, done.</span><br><span class="line">remote: Counting objects: 100% (1/1), done.</span><br><span class="line">remote: Total 2037 (delta 0), reused 0 (delta 0), pack-reused 2036</span><br><span class="line">Receiving objects: 100% (2037/2037), 10.53 MiB | 514.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (1079/1079), done.</span><br></pre></td></tr></table></figure>

<p>在<code>_config.yml</code>文件中修改博客主题：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">yilia</span></span><br></pre></td></tr></table></figure>

<h2 id="使用Hugo搭建个人博客"><a href="#使用Hugo搭建个人博客" class="headerlink" title="使用Hugo搭建个人博客"></a>使用<code>Hugo</code>搭建个人博客</h2><p>在<code>Linux</code>上配置环境，使用<code>Hugo + Github</code>的组合搭建个人博客。</p>
<h3 id="下载brew"><a href="#下载brew" class="headerlink" title="下载brew"></a>下载brew</h3><p>下载<code>Hugo</code>要使用<code>brew</code>这个工具。</p>
<p>过程详见这篇博客：<a href="https://linux.cn/article-14065-1.html">在 Linux 上安装和使用 Homebrew 包管理器</a></p>
<p>注意一点，把最后两个添加<code>PATH</code>变量的命令写入<code>~/.bashrc</code>中，不然每次重启终端都要重新输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">start hugo</span></span><br><span class="line">echo &#x27;eval &quot;$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)&quot;&#x27; &gt;&gt; $HOME/.bash_profile</span><br><span class="line">eval &quot;$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)&quot;</span><br></pre></td></tr></table></figure>

<h3 id="下载Hugo"><a href="#下载Hugo" class="headerlink" title="下载Hugo"></a>下载<code>Hugo</code></h3><p>使用如下命令下载<code>Hugo</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install hugo</span><br></pre></td></tr></table></figure>

<p>使用如下命令检验是否下载成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hugo version</span><br></pre></td></tr></table></figure>

<p>若成功输出版本信息，说明下载成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hugo v0.115.4+extended linux/amd64 BuildDate=unknown</span><br></pre></td></tr></table></figure>

<p>创建一个名为<code>blog</code>博客：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hugo new site blog</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Congratulations! Your new Hugo site is created in /home/rex/blog.</span><br><span class="line"></span><br><span class="line">Just a few more steps and you&#x27;re ready to go:</span><br><span class="line"></span><br><span class="line">1. Download a theme into the same-named folder.</span><br><span class="line">   Choose a theme from https://themes.gohugo.io/ or</span><br><span class="line">   create your own with the &quot;hugo new theme &lt;THEMENAME&gt;&quot; command.</span><br><span class="line">2. Perhaps you want to add some content. You can add single files</span><br><span class="line">   with &quot;hugo new &lt;SECTIONNAME&gt;/&lt;FILENAME&gt;.&lt;FORMAT&gt;&quot;.</span><br><span class="line">3. Start the built-in live server via &quot;hugo server&quot;.</span><br><span class="line"></span><br><span class="line">Visit https://gohugo.io/ for quickstart guide and full documentation.</span><br></pre></td></tr></table></figure>

<h3 id="下载并设置Hugo主题"><a href="#下载并设置Hugo主题" class="headerlink" title="下载并设置Hugo主题"></a>下载并设置<code>Hugo</code>主题</h3><p><code>Hugo</code>没有默认主题，需要手动下载并设置一个。</p>
<p>可以前往<code>Hugo</code>官网下载：<a href="https://themes.gohugo.io/">Hugo Themes</a></p>
<p>选择一个<code>分栏</code>风格的主题：<a href="https://themes.gohugo.io/themes/hugo-theme-m10c/">hugo-theme-m10c</a></p>
<p>在<code>blog</code>目录下，运行如下命令，下载主题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c</span><br></pre></td></tr></table></figure>

<h3 id="启动博客服务器"><a href="#启动博客服务器" class="headerlink" title="启动博客服务器"></a>启动博客服务器</h3><p>使用如下命令，使用主题<code>LoveIt</code>，启动博客服务器:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hugo server -t LoveIt --buildDrafts</span><br></pre></td></tr></table></figure>

<p>将该命令写成一个<code>shell</code>脚本<code>hugo_server</code>，并添加可执行权限：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /usr/bin/bash</span></span><br><span class="line">hugo server -t LoveIt --buildDrafts</span><br></pre></td></tr></table></figure>

<p>创建一篇名为<code>self-blog</code>的博客：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hugo new post/self-blog.md</span><br></pre></td></tr></table></figure>

<h3 id="将个人博客部署到远端服务器"><a href="#将个人博客部署到远端服务器" class="headerlink" title="将个人博客部署到远端服务器"></a>将个人博客部署到远端服务器</h3><p>在<code>Github</code>上创建一个名为<code>Maxwell2020152049</code>的仓库。</p>
<p>使用如下命令生成一个用于维护远端服务器网站的文件夹<code>public</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hugo --theme=LoveIt --baseURL=&quot;https://Maxwell2020152049.github.io&quot; --buildDrafts</span><br></pre></td></tr></table></figure>

<p>将该命令写成一个<code>shell</code>脚本<code>hugo_build</code>，并添加可执行权限：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /usr/bin/bash</span></span><br><span class="line">hugo --theme=LoveIt --baseURL=&quot;https://Maxwell2020152049.github.io&quot; --buildDrafts</span><br></pre></td></tr></table></figure>

<p>进入<code>public</code>目录，使用以下命令将该目录推送至<code>Maxwell2020152049</code>仓库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;create hugo blog&quot;</span><br><span class="line">git remote add origin git@github.com:Maxwell2020152049/Maxwell2020152049.github.io.git</span><br><span class="line">git push --set-upstream origin master</span><br></pre></td></tr></table></figure>

<p>然后就能够进入网站了。</p>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo的图片管理问题】阿里云OSS + PicGo搭建图床</title>
    <url>/2024/05/21/%E3%80%90Hexo%E7%9A%84%E5%9B%BE%E7%89%87%E7%AE%A1%E7%90%86%E9%97%AE%E9%A2%98%E3%80%91%E9%98%BF%E9%87%8C%E4%BA%91OSS-PicGo%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h2 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h2><h3 id="Bucket的存储和读取"><a href="#Bucket的存储和读取" class="headerlink" title="Bucket的存储和读取"></a>Bucket的存储和读取</h3><p>在阿里云上开通<a href="https://oss.console.aliyun.com/overview">OSS</a>，创建一个<code>Bucket</code>，地区选择<strong>华南1-深圳</strong>，存储类型为<strong>标准存储</strong>，存储冗余类型为<strong>本地冗余存储</strong>。</p>
<p>购买OSS资源包，选择<strong>40G&#x2F;1年</strong>的套餐，这样就能够把图片存储到阿里云上了。</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/22127b7f64ff476d3f5bae1a8d0c938.png" alt="22127b7f64ff476d3f5bae1a8d0c938"></p>
<p>需要注意：因为图床需要让任何来源都能访问到资源，<code>Bucket</code>的读写权限需要设置为<strong>公共读</strong>（需要关闭<strong>“阻止公共访问”</strong>）。</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/ffdb72988de51e8038a4c1497d0d4ed.png" alt="ffdb72988de51e8038a4c1497d0d4ed"></p>
<p>另外，<strong>OSS资源包不包括外网流出流量，就是说从阿里云拉取图片产生的流量是需要付费的</strong>，<a href="https://www.aliyun.com/price/product?spm=a2c4g.11186623.0.0.14d71887x72wt4#/oss/detail/ossbag">收费标准</a>如下（开启<strong>同城冗余</strong>和<strong>跨区域复制</strong>流量费更高）：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/99b459af64d549b1186f90d6320429d.png" alt="99b459af64d549b1186f90d6320429d"></p>
<h3 id="创建用户进行访问控制"><a href="#创建用户进行访问控制" class="headerlink" title="创建用户进行访问控制"></a>创建用户进行访问控制</h3><p>在阿里云的访问控制模块中创建新用户，注意需要勾选<strong>启动OpenAPI</strong>选项，记录下生成的<strong>AccessKey ID</strong>和<strong>AccessKey Secret</strong>。</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/dd34568a7bdd19f85b830c649a97a71.png" alt="dd34568a7bdd19f85b830c649a97a71"></p>
<h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><p>在<a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.1">PicGo官网</a>下载稳定版本的<code>PicGo</code>客户端，使用之前获取的参数进行设置（img目录需要在阿里云上先创建，初始使用可以不填写<strong>存储路径</strong>）：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/67cb206f75494599386f7558f512e0b.png" alt="67cb206f75494599386f7558f512e0b"></p>
<h2 id="Typora上传插入图片"><a href="#Typora上传插入图片" class="headerlink" title="Typora上传插入图片"></a>Typora上传插入图片</h2><p>在<code>Typora</code>上进行设置，使用<code>PicGo</code>上传插入的图片到阿里云。</p>
<p>配置完成后，可以使用<code>Typora</code>的<strong>验证图片上传选项</strong>测试图床是否被正确配置。</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/acb0232932277fccf8ef1fcc2b22d6f.png" alt="acb0232932277fccf8ef1fcc2b22d6f"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://blog.csdn.net/qq_30105599/article/details/119651114">关于Hexo写博客时的图片插入问题（OSS对象存储+PicGo搭建图床）</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/104152479">阿里云OSS PicGo 配置图床教程 超详细</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>【C++游戏开发】EasyX开发环境搭建|跟随鼠标移动的小球</title>
    <url>/2024/05/24/%E3%80%90C-%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E3%80%91EasyX%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-%E8%B7%9F%E9%9A%8F%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%8A%A8%E7%9A%84%E5%B0%8F%E7%90%83/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习<code>C++ Primer</code>，学习语法之余，还需要找些项目练练手，刚好在b站上看到了<a href="https://space.bilibili.com/25864506"><strong>Voidmatrix</strong></a></p>
<p>做的<a href="https://space.bilibili.com/25864506/channel/collectiondetail?sid=1825182&ctype=0">【从零开始的C++游戏开发】</a>系列教程，本期博客是参考了<a href="https://www.bilibili.com/video/BV1iQ4y1s7Qj/">【从零开始的C++游戏开发】EasyX开发环境搭建 | 跟随鼠标移动的小球</a>，完成<code>EasyX</code>开发环境的搭建和实现第一个游戏<code>Demo</code>。</p>
<h2 id="EasyX开发环境搭建"><a href="#EasyX开发环境搭建" class="headerlink" title="EasyX开发环境搭建"></a>EasyX开发环境搭建</h2><p><code>IDE</code>使用<a href="https://visualstudio.microsoft.com/zh-hans/free-developer-offers/">Visual Studio</a>，安装<strong>C++的桌面开发</strong>即可。</p>
<p>在<a href="https://easyx.cn/t/download">EasyX</a>官网下载最新版的<code>EasyX</code>库，为<code>VS2022</code>安装即可。</p>
<p>写一段打印EasyX版本号的代码，验证环境是否正常运行：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;graphics.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%ws\n&quot;</span>, <span class="built_in">GetEasyXVer</span>());</span><br><span class="line">	std::wcout &lt;&lt; <span class="built_in">GetEasyXVer</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意<code>GetEasyXVer</code>这个函数，返回类型为换字符的字符串，打印的方式与<code>std::string</code>略有不同：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">const</span> TCHAR* <span class="title">GetEasyXVer</span><span class="params">()</span></span>;						<span class="comment">// Get version of EasyX library</span></span><br></pre></td></tr></table></figure>

<p>打印结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">20240225</span><br><span class="line">20240225</span><br></pre></td></tr></table></figure>

<h2 id="跟随鼠标移动的小球"><a href="#跟随鼠标移动的小球" class="headerlink" title="跟随鼠标移动的小球"></a>跟随鼠标移动的小球</h2><h3 id="绘制窗口"><a href="#绘制窗口" class="headerlink" title="绘制窗口"></a>绘制窗口</h3><p>EasyX提供了<a href="https://docs.easyx.cn/zh-cn/initgraph">initgraph</a>用于绘制窗口，实际使用如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化窗口</span></span><br><span class="line"><span class="built_in">initgraph</span>(<span class="number">1280</span>, <span class="number">960</span>);</span><br></pre></td></tr></table></figure>

<h3 id="绘制填充圆"><a href="#绘制填充圆" class="headerlink" title="绘制填充圆"></a>绘制填充圆</h3><p><code>EasyX</code>提供了<a href="https://docs.easyx.cn/zh-cn/solidcircle">solidcircle</a>用于绘制圆，实际使用如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (x, y)为圆心</span></span><br><span class="line"><span class="built_in">solidcircle</span>(x, y, <span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<h3 id="处理鼠标事件"><a href="#处理鼠标事件" class="headerlink" title="处理鼠标事件"></a>处理鼠标事件</h3><p><code>EasyX</code>自带了消息队列，提供了一组<a href="https://docs.easyx.cn/zh-cn/msg-func">消息处理相关函数</a>进行处理，使用<code>peekmessage</code>函数获取一个消息，消费消息队列的模式如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ExMessage msg;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">peekmessage</span>(&amp;msg)) &#123;</span><br><span class="line">	<span class="keyword">if</span> (msg.message == WM_MOUSEMOVE) &#123;</span><br><span class="line">		...</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ExMessage</code>类型的变量用于存放鼠标消息，定义了成员变量<code>message</code>作为消息标识，其中<code>WM_MOUSEMOVE</code>标识鼠标移动。</p>
<h3 id="清除屏幕"><a href="#清除屏幕" class="headerlink" title="清除屏幕"></a>清除屏幕</h3><p>进行绘制后需要有规律地清除屏幕，否则屏幕会比较杂乱，此时使用<a href="https://docs.easyx.cn/zh-cn/cleardevice">cleardevice</a>，用于清除屏幕。注意：清屏操作需要在绘制操作之前进行，否则刷新速度较快，会看不到绘制的内容。</p>
<h3 id="屏幕闪烁"><a href="#屏幕闪烁" class="headerlink" title="屏幕闪烁"></a>屏幕闪烁</h3><p>使用<a href="https://docs.easyx.cn/zh-cn/beginbatchdraw">BeginBatchDraw</a>、<a href="https://docs.easyx.cn/zh-cn/endbatchdraw">EndBatchDraw</a>、<a href="https://docs.easyx.cn/zh-cn/flushbatchdraw">FlushBatchDraw</a>解决该问题。</p>
<h3 id="残影效果"><a href="#残影效果" class="headerlink" title="残影效果"></a>残影效果</h3><p>绘制100次圆后，清除屏幕一次，这样小球会留下移动的痕迹。</p>
<p>最终实现代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;graphics.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 初始化窗口</span></span><br><span class="line">	<span class="built_in">initgraph</span>(<span class="number">1280</span>, <span class="number">960</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> x = <span class="number">300</span>, y = <span class="number">300</span>;</span><br><span class="line">	ExMessage msg;</span><br><span class="line">	<span class="type">const</span> <span class="type">unsigned</span> CIRCLE_COUNT = <span class="number">100</span>;</span><br><span class="line">	<span class="type">unsigned</span> crc_cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">BeginBatchDraw</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="keyword">while</span> (<span class="built_in">peekmessage</span>(&amp;msg)) &#123;</span><br><span class="line">			<span class="keyword">if</span> (msg.message == WM_MOUSEMOVE) &#123;</span><br><span class="line">				<span class="comment">// 圆心坐标即为鼠标位置</span></span><br><span class="line">				x = msg.x, y = msg.y;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 清除屏幕和绘制的顺序不能反过来</span></span><br><span class="line">			<span class="comment">// 不然在屏幕上看不到圆</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 打印100次圆后清除屏幕</span></span><br><span class="line">		<span class="keyword">if</span> (crc_cnt == CIRCLE_COUNT) &#123;</span><br><span class="line">			<span class="built_in">cleardevice</span>();</span><br><span class="line">			crc_cnt = <span class="number">0</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			crc_cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">solidcircle</span>(x, y, <span class="number">100</span>);</span><br><span class="line">		<span class="built_in">FlushBatchDraw</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">EndBatchDraw</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终效果如下：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/b20140e55d4b1a59f562087ad63e7fa.png" alt="b20140e55d4b1a59f562087ad63e7fa"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://space.bilibili.com/25864506/channel/collectiondetail">合集·从零开始的提瓦特幸存者</a></li>
<li><a href="https://www.bilibili.com/video/BV1iQ4y1s7Qj/">【从零开始的C++游戏开发】EasyX开发环境搭建 | 跟随鼠标移动的小球</a></li>
<li><a href="https://docs.easyx.cn/zh-cn/intro">EasyX 在线文档</a></li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
        <category>EasyX</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>基于EasyX的游戏开发</tag>
      </tags>
  </entry>
  <entry>
    <title>【个人博客优化】Hexo+Next</title>
    <url>/2024/05/24/%E3%80%90%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E3%80%91Hexo-Next/</url>
    <content><![CDATA[<p>注意：下文将<code>Hexo</code>的主题文件<code>_config.yml</code>称为<strong>站点配置文件</strong>，将<code>_config.next.yml</code>称为<strong>主题配置文件</strong>。</p>
<h2 id="首页设置"><a href="#首页设置" class="headerlink" title="首页设置"></a>首页设置</h2><p><code>Hexo</code>默认的首页会显示每一篇文章的标题和全文，笔者觉得不是很美观，故想把首页样式修改为只显示文章的标题和摘要，这点可以比较方便的通过设置<strong>主题配置文件</strong>实现：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Use `description` in front-matter to specify post excerpt.</span></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>之后在博客的模板文件中，添加<code>description</code>一项，这样创建博客时会自动创建描述，再简单修改就可以实现目标功能：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">toc: true</span><br><span class="line">description: 这是显示在首页的概述，正文内容均会被隐藏。</span><br></pre></td></tr></table></figure>

<p>设置成功后，效果如下：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/049a2fc7b2ce5230b68a1e46ae83f27.png" alt="049a2fc7b2ce5230b68a1e46ae83f27"></p>
<h2 id="菜单页设置"><a href="#菜单页设置" class="headerlink" title="菜单页设置"></a>菜单页设置</h2><p>在<strong>主题配置文件</strong>中，开启所需的菜单项：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="comment"># about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>

<h2 id="搜索栏"><a href="#搜索栏" class="headerlink" title="搜索栏"></a>搜索栏</h2><p>在站点配置文件中加入以下内容（<code>limit</code>的值表示搜索条目的最大数量）：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>在主题配置文件中，启动本地搜索功能：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>安装依赖项：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-generator-searchdb --save</span></span><br></pre></td></tr></table></figure>

<p>最终效果如下：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/b048d568938326cdc0d662a5f2c50c5.png" alt="b048d568938326cdc0d662a5f2c50c5"></p>
<h2 id="标签页和分类页"><a href="#标签页和分类页" class="headerlink" title="标签页和分类页"></a>标签页和分类页</h2><p>创建分类目录文件和标签目录文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new page categories</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new page tags</span></span><br></pre></td></tr></table></figure>

<p>将对应页面的类型（<code>type</code>）设置正确：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: categories</span><br><span class="line">toc: true</span><br><span class="line">date: 2024-05-24 10:16:44</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: tags</span><br><span class="line">toc: true</span><br><span class="line">date: 2024-05-24 10:21:41</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure>

<p>在博客文件中设置<code>tags</code>和<code>categories</code>词条，就能在对应目录下显示了。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><a href="https://blog.smallerpig.com/set-hexo-show-more-button-on-indexpage.html">让hexo的首页只显示文章的部分内容而不是全部</a></p>
</li>
<li><p><a href="https://theme-next.iissnan.com/getting-started.html">Next 开始使用</a></p>
</li>
<li><p><a href="https://www.sqlsec.com/2017/12/hexosearch.html">Hexo 博客无法搜索的终极解决方法</a></p>
</li>
<li><p><a href="https://tohugo.com/2021/01/26/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE%EF%BC%88%E5%9C%A8Next%E4%B8%BB%E9%A2%98%E4%B8%8B%EF%BC%89/">Hexo添加分类及标签（在Next主题下）</a></p>
</li>
<li><p><a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>【C++ Primer 学习笔记】第三章 字符串、向量和数组</title>
    <url>/2024/05/30/%E3%80%90C-Primer-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E5%90%91%E9%87%8F%E5%92%8C%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="chap03-字符串、向量和数组"><a href="#chap03-字符串、向量和数组" class="headerlink" title="chap03 字符串、向量和数组"></a>chap03 字符串、向量和数组</h1><h2 id="chap3-1-命名空间的using声明"><a href="#chap3-1-命名空间的using声明" class="headerlink" title="chap3.1 命名空间的using声明"></a>chap3.1 命名空间的<code>using</code>声明</h2><ul>
<li><code>C++</code>中的<code>using</code>关键字有什么作用？</li>
</ul>
<p><code>using</code>声明可以将命名空间中的成员的作用域拓展到全局作用域，故不需要使用形如<code>std::cin</code>的方式，而是直接使用<code>cin</code>就能从标准输入读取信息。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> std::cin;</span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br></pre></td></tr></table></figure>

<p>需要注意，<code>using</code>声明不能放在头文件中，因为头文件会被多个源文件包含，容易可能导致命名冲突，应该尽量减小命名空间的作用范围。</p>
<h2 id="chap3-2-标准库类型string"><a href="#chap3-2-标准库类型string" class="headerlink" title="chap3.2 标准库类型string"></a>chap3.2 标准库类型<code>string</code></h2><ul>
<li>如何初始化<code>string</code>？</li>
<li><code>string</code>支持哪些操作？</li>
</ul>
<h3 id="string初始化"><a href="#string初始化" class="headerlink" title="string初始化"></a><code>string</code>初始化</h3><p><code>string</code>包含直接初始化和赋值初始化。使用赋值运算符<code>=</code>进行初始化，就是拷贝初始化；否则就是直接初始化。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s1 = <span class="string">&quot;Hello, World!&quot;</span>;    <span class="comment">// 拷贝初始化</span></span><br><span class="line"><span class="function">string <span class="title">s2</span><span class="params">(<span class="string">&quot;Hello, World!&quot;</span>)</span></span>;     <span class="comment">// 直接初始化</span></span><br><span class="line">string s3 = &#123;<span class="string">&quot;Hello, World!&quot;</span>&#125;;  <span class="comment">// 拷贝初始化</span></span><br><span class="line">string s4&#123;<span class="string">&quot;Hello, World!&quot;</span>&#125;;     <span class="comment">// 直接初始化</span></span><br><span class="line"></span><br><span class="line">string s5 = s1;                 <span class="comment">// 拷贝初始化</span></span><br><span class="line"><span class="function">string <span class="title">s6</span><span class="params">(s1)</span></span>;                  <span class="comment">// 直接初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">s7</span><span class="params">(<span class="number">10</span>, <span class="string">&#x27;c&#x27;</span>)</span></span>;             <span class="comment">// 直接初始化</span></span><br><span class="line">string s7 = <span class="built_in">string</span>(<span class="number">10</span>, <span class="string">&#x27;c&#x27;</span>);    <span class="comment">// 拷贝初始化</span></span><br></pre></td></tr></table></figure>

<p>使用<code>cin &gt;&gt; s</code>读取字符串时，遇到空白符停止，使用<code>getline(cin, s)</code>读取字符串时，遇到换行符停止。</p>
<p>默认初始化指的是不为变量提供初始值。<code>string</code>进行默认初始化时，默认为空串。整型进行初始化时，默认为0。</p>
<p>需要注意，定义内置类型的局部变量，不会进行默认初始化，会产生未定义行为。</p>
<h3 id="range-for"><a href="#range-for" class="headerlink" title="range for"></a><code>range for</code></h3><p>C++11提供了<code>range for</code>，可以很方便地遍历序列的元素：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s&#123;<span class="string">&quot;Hello, World!&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp;c : s) &#123;</span><br><span class="line">    c = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="chap3-3-标准库vector"><a href="#chap3-3-标准库vector" class="headerlink" title="chap3.3 标准库vector"></a>chap3.3 标准库vector</h2><ul>
<li><p>如何初始化<code>vector</code>？</p>
</li>
<li><p><code>vector</code>支持哪些操作？</p>
</li>
</ul>
<h3 id="vector初始化"><a href="#vector初始化" class="headerlink" title="vector初始化"></a><code>vector</code>初始化</h3><p><code>vector</code>和<code>string</code>一样，也支持直接初始化和赋值初始化：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; v1;			<span class="comment">// 直接初始化</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v2</span><span class="params">(<span class="number">10</span>)</span></span>; 	<span class="comment">// 直接初始化</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v3</span><span class="params">(<span class="number">10</span>, <span class="number">42</span>)</span></span>;	<span class="comment">// 直接初始化</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v4&#123;<span class="number">10</span>&#125;;		<span class="comment">// 列表初始化</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v5&#123;<span class="number">10</span>, <span class="number">42</span>&#125;;	<span class="comment">// 列表初始化</span></span><br><span class="line">vector&lt;string&gt; v6&#123;<span class="number">10</span>&#125;;	<span class="comment">// 列表初始化</span></span><br><span class="line">vector&lt;string&gt; v7&#123;<span class="number">10</span>, <span class="string">&quot;hi&quot;</span>&#125;;	<span class="comment">// 列表初始化</span></span><br></pre></td></tr></table></figure>

<p>列表初始化也可以是赋值初始化：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>列表初始化的原理是，如果参数支持列表列表初始化，就进行列表初始化，否则就尝试直接初始化，如果还是失败，就编译出错。</p>
<h2 id="chap3-4-迭代器介绍"><a href="#chap3-4-迭代器介绍" class="headerlink" title="chap3.4 迭代器介绍"></a>chap3.4 迭代器介绍</h2><ul>
<li>如何使用迭代器？</li>
<li>什么情况下迭代器可能失效？</li>
</ul>
<h3 id="迭代器的使用"><a href="#迭代器的使用" class="headerlink" title="迭代器的使用"></a>迭代器的使用</h3><p>迭代器主要用于访问容器的元素，与索引访问容器元素的区别在于，索引在存储上是连续的，迭代器不一定是连续的，所以需要使用<code>!=</code>判断是否迭代结束。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">10</span>, <span class="number">2020</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">    *it *= <span class="number">2</span>;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>初始化迭代器后，如果容器的元素个数发生变化，可能会导致迭代器异常，即迭代器失效。</p>
<p><code>sizeof(std::string) == 32</code></p>
<p><code>sizeof(std::vector&lt;int&gt;) == 24</code></p>
<h2 id="chap3-5-数组"><a href="#chap3-5-数组" class="headerlink" title="chap3.5 数组"></a>chap3.5 数组</h2><ul>
<li>如何对数组进行初始化？</li>
<li>数组和<code>vector</code>比较，有什么缺点？</li>
</ul>
<p>数组可以使用列表初始化。数组使用默认初始化时，会将元素进行默认初始化。</p>
<p><code>vector</code>是不定长的容器，数组的长度固定，在很多无法预知数据大小的场合，<code>vector</code>更有优势。</p>
<p><code>vector</code>提供了一组便于操作数据的接口，和数组相比，减小了如越界、手动计数索引等问题。</p>
]]></content>
      <categories>
        <category>C++</category>
        <category>C++ Primer</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>【C++ Primer 学习笔记】第四章 表达式</title>
    <url>/2024/06/05/cppPrimerNotesChapter04-md/</url>
    <content><![CDATA[<h2 id="如何看待C-的表达式"><a href="#如何看待C-的表达式" class="headerlink" title="如何看待C++的表达式"></a>如何看待C++的表达式</h2><p>C++的表达式运算符和操作数组成的式子。</p>
<p>C++有一元运算符、二元运算符、三元运算符。（区别在于操作数的不同）</p>
<p>运算符有以下属性：</p>
<ul>
<li><p>优先级：运算符的计算顺序</p>
</li>
<li><p>求值顺序：操作数的计算顺序</p>
</li>
<li><p>结合律：相同的运算符之间的计算顺序</p>
</li>
<li><p>返回值：运算符运算后的结果。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
        <category>C++ Primer</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A Homework01</title>
    <url>/2024/06/08/CS61A-Homework01/</url>
    <content><![CDATA[<h2 id="Homework-1-Variables-Functions-Control"><a href="#Homework-1-Variables-Functions-Control" class="headerlink" title="Homework 1: Variables &amp; Functions, Control"></a>Homework 1: Variables &amp; Functions, Control</h2><h3 id="Q1-Syllabus-Quiz"><a href="#Q1-Syllabus-Quiz" class="headerlink" title="Q1: Syllabus Quiz"></a>Q1: Syllabus Quiz</h3><p>教学大纲和课程政策，详见<a href="https://docs.google.com/forms/d/e/1FAIpQLSfCH090Wp9dmmstwizj5MEXDDmb9J55G8L8Wjqczmwz1NLW_w/viewform">Syllabus Quiz</a>。</p>
<h3 id="Q2-A-Plus-Abs-B"><a href="#Q2-A-Plus-Abs-B" class="headerlink" title="Q2: A Plus Abs B"></a>Q2: A Plus Abs B</h3><blockquote>
<p>Fill in the blanks in the following function for adding <code>a</code> to the absolute value of <code>b</code>, without calling <code>abs</code>. You may <strong>not</strong> modify any of the provided code other than the two blanks.</p>
</blockquote>
<p>题意就是实现如下函数<code>f</code>：<br>$$<br>f(a, b) &#x3D; a + \lvert b \rvert<br>$$</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a_plus_abs_b</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a+abs(b), but without calling abs.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, -3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # a check that you didn&#x27;t change the return statement!</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; import inspect, re</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; re.findall(r&#x27;^\s*(return .*)&#x27;, inspect.getsource(a_plus_abs_b), re.M)</span></span><br><span class="line"><span class="string">    [&#x27;return f(a, b)&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> b &lt; <span class="number">0</span>:</span><br><span class="line">        f = <span class="keyword">lambda</span> x, y : x - y</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = <span class="keyword">lambda</span> x, y : x + y</span><br><span class="line">    <span class="keyword">return</span> f(a, b)</span><br></pre></td></tr></table></figure>

<p>另一种实现（使用<code>lambda</code>表达式）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a_plus_abs_b</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a+abs(b), but without calling abs.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a_plus_abs_b(2, -3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # a check that you didn&#x27;t change the return statement!</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; import inspect, re</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; re.findall(r&#x27;^\s*(return .*)&#x27;, inspect.getsource(a_plus_abs_b), re.M)</span></span><br><span class="line"><span class="string">    [&#x27;return f(a, b)&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> b &lt; <span class="number">0</span>:</span><br><span class="line">        f = sub</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = add</span><br><span class="line">    <span class="keyword">return</span> f(a, b)</span><br></pre></td></tr></table></figure>

<h3 id="Q3-Two-of-Three"><a href="#Q3-Two-of-Three" class="headerlink" title="Q3: Two of Three"></a>Q3: Two of Three</h3><blockquote>
<p>Write a function that takes three <em>positive</em> numbers as arguments and returns the sum of the squares of the two smallest numbers. <strong>Use only a single line for the body of the function.</strong></p>
</blockquote>
<blockquote>
<p><strong>Hint:</strong> Consider using the <code>max</code> or <code>min</code> function:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">max</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">min</span>(-<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">3</span>)</span><br><span class="line">-<span class="number">3</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>思路：最小的数可以用<code>min()</code>函数得到，次小的数可以用<code>x</code>、<code>y</code>、<code>z</code>三个数的和减掉最小值和最大值（<code>max()</code>）。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">two_of_three</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a*a + b*b, where a and b are the two smallest members of the</span></span><br><span class="line"><span class="string">    positive numbers x, y, and z.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(1, 2, 3)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 3, 1)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(10, 2, 8)</span></span><br><span class="line"><span class="string">    68</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; two_of_three(5, 5, 5)</span></span><br><span class="line"><span class="string">    50</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # check that your code consists of nothing but an expression (this docstring)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # a return statement</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; import inspect, ast</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; [type(x).__name__ for x in ast.parse(inspect.getsource(two_of_three)).body[0].body]</span></span><br><span class="line"><span class="string">    [&#x27;Expr&#x27;, &#x27;Return&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(x, y, z) ** <span class="number">2</span> + (x + y + z - <span class="built_in">min</span>(x, y, z) - <span class="built_in">max</span>(x, y, z)) ** <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="Q4-Largest-Factor"><a href="#Q4-Largest-Factor" class="headerlink" title="Q4: Largest Factor"></a>Q4: Largest Factor</h3><blockquote>
<p>Write a function that takes an integer <code>n</code> that is <strong>greater than 1</strong> and returns the largest integer that is smaller than <code>n</code> and evenly divides <code>n</code>.</p>
<p><strong>Hint:</strong> To check if <code>b</code> evenly divides <code>a</code>, you can use the expression <code>a % b == 0</code>, which can be read as, “the remainder of dividing <code>a</code> by <code>b</code> is 0.”</p>
</blockquote>
<p>思路：找一个数<code>n</code>的最大因子，用循环把<code>1~n-1</code>都检查一遍就行了。</p>
<p>实现代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">largest_factor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the largest factor of n that is smaller than n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(15) # factors are 1, 3, 5</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(80) # factors are 1, 2, 4, 5, 8, 10, 16, 20, 40</span></span><br><span class="line"><span class="string">    40</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; largest_factor(13) # factor is 1 since 13 is prime</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    ans = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            ans = i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

<h3 id="Q5-If-Function-vs-Statement"><a href="#Q5-If-Function-vs-Statement" class="headerlink" title="Q5: If Function vs Statement"></a>Q5: If Function vs Statement</h3><blockquote>
<p>Let’s try to write a function that does the same thing as an <code>if</code> statement.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">if_function</span>(<span class="params">condition, true_result, false_result</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return true_result if condition is a true value, and</span></span><br><span class="line"><span class="string">    false_result otherwise.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; if_function(True, 2, 3)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; if_function(False, 2, 3)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; if_function(3==2, &#x27;equal&#x27;, &#x27;not equal&#x27;)</span></span><br><span class="line"><span class="string">    &#x27;not equal&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; if_function(3&gt;2, &#x27;bigger&#x27;, &#x27;smaller&#x27;)</span></span><br><span class="line"><span class="string">    &#x27;bigger&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> condition:</span><br><span class="line">        <span class="keyword">return</span> true_result</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> false_result</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Despite the doctests above, this function actually does <em>not</em> do the same thing as an <code>if</code> statement in all cases. To prove this fact, write functions <code>cond</code>, <code>true_func</code>, and <code>false_func</code> such that <code>with_if_statement</code> prints <code>61A</code>, but <code>with_if_function</code> prints both <code>Welcome to</code> and <code>61A</code> on separate lines.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">with_if_statement</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; result = with_if_statement()</span></span><br><span class="line"><span class="string">    61A</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(result)</span></span><br><span class="line"><span class="string">    None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> cond():</span><br><span class="line">        <span class="keyword">return</span> true_func()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> false_func()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">with_if_function</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; result = with_if_function()</span></span><br><span class="line"><span class="string">    Welcome to</span></span><br><span class="line"><span class="string">    61A</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print(result)</span></span><br><span class="line"><span class="string">    None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> if_function(cond(), true_func(), false_func())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cond</span>():</span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">true_func</span>():</span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">false_func</span>():</span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br></pre></td></tr></table></figure>

<p>思路：这个题主要是考查对<code>if</code>语句的理解和对函数传递参数的理解，观察<code>with_if_statement()</code>和<code>with_if_function()</code>两个函数，不难发现，要实现的三个函数有以下特点：</p>
<ul>
<li>cond()：返回<code>True</code>或者<code>False</code>。</li>
<li><code>true_func()</code>和<code>false_func()</code>：调用输出函数，没有返回值，一个输出<code>&quot;Welcome to&quot;</code>，一个输出<code>&quot;61A&quot;</code>。</li>
</ul>
<p>综合下来，实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cond</span>():</span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">true_func</span>():</span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome to&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">false_func</span>():</span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;61A&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Q6-Hailstone"><a href="#Q6-Hailstone" class="headerlink" title="Q6: Hailstone"></a>Q6: Hailstone</h3><blockquote>
<p>Douglas Hofstadter’s Pulitzer-prize-winning book, <em>Gödel, Escher, Bach</em>, poses the following mathematical puzzle.</p>
<ol>
<li>Pick a positive integer <code>n</code> as the start.</li>
<li>If <code>n</code> is even, divide it by 2.</li>
<li>If <code>n</code> is odd, multiply it by 3 and add 1.</li>
<li>Continue this process until <code>n</code> is 1.</li>
</ol>
<p>The number <code>n</code> will travel up and down but eventually end at 1 (at least for all numbers that have ever been tried – nobody has ever proved that the sequence will terminate). Analogously, a hailstone travels up and down in the atmosphere before eventually landing on earth.</p>
<p>This sequence of values of <code>n</code> is often called a Hailstone sequence. Write a function that takes a single argument with formal parameter name <code>n</code>, prints out the hailstone sequence starting at <code>n</code>, and returns the number of steps in the sequence:</p>
</blockquote>
<p>思路：经典的<code>3*n+1</code>问题，注意最开始的<code>n</code>就算作一步。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hailstone</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the hailstone sequence starting at n and return its</span></span><br><span class="line"><span class="string">    length.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = hailstone(10)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    step = <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            n //= <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n = n * <span class="number">3</span> + <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        step += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> step</span><br></pre></td></tr></table></figure>

<h3 id="测评结果"><a href="#测评结果" class="headerlink" title="测评结果"></a>测评结果</h3><p>运行测评代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python ok --local</span><br></pre></td></tr></table></figure>

<p>测评结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Homework 1</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Running tests</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Test summary</span><br><span class="line">    6 test cases passed! No cases failed.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CS61A</category>
        <category>Homework</category>
      </categories>
  </entry>
  <entry>
    <title>CS61A Lab00</title>
    <url>/2024/06/08/CS61A-Lab00/</url>
    <content><![CDATA[<h2 id="Lab-0-Getting-Started"><a href="#Lab-0-Getting-Started" class="headerlink" title="Lab 0: Getting Started"></a>Lab 0: Getting Started</h2><h3 id="实验环境配置"><a href="#实验环境配置" class="headerlink" title="实验环境配置"></a>实验环境配置</h3><p><code>CS 61A</code>的实验需要：</p>
<ul>
<li><p><code>Terminal（终端）</code></p>
</li>
<li><p><code>Python3</code></p>
</li>
<li><p><code>Text Editor（代码编辑器）</code></p>
</li>
</ul>
<h3 id="命令行工具的使用"><a href="#命令行工具的使用" class="headerlink" title="命令行工具的使用"></a>命令行工具的使用</h3><p>实验会可能用到的命令：</p>
<ul>
<li><code>ls</code></li>
<li><code>cd</code></li>
<li><code>mkdir</code></li>
<li><code>unzip</code></li>
<li><code>mv</code></li>
</ul>
<h3 id="Python-Basic"><a href="#Python-Basic" class="headerlink" title="Python Basic"></a>Python Basic</h3><h4 id="Primitive-Expressions（原始表达式）"><a href="#Primitive-Expressions（原始表达式）" class="headerlink" title="Primitive Expressions（原始表达式）"></a>Primitive Expressions（原始表达式）</h4><p>**<code>原始表达式</code>**只进行一步计算：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">12.5</span></span><br><span class="line"><span class="number">12.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h4 id="Arithmetic-Expressions（算术表达式）"><a href="#Arithmetic-Expressions（算术表达式）" class="headerlink" title="Arithmetic Expressions（算术表达式）"></a>Arithmetic Expressions（算术表达式）</h4><p>算术表达式由以下运算符组成：</p>
<ul>
<li>加法：<code>+</code></li>
<li>减法：<code>-</code></li>
<li>乘法：<code>*</code></li>
<li>乘方：<code>**</code></li>
<li>浮点数除法：<code>/</code></li>
<li>下取整除法：<code>//</code></li>
<li>取余：<code>%</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">7</span> / <span class="number">4</span></span><br><span class="line"><span class="number">1.75</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">2</span> + <span class="number">6</span>) / <span class="number">4</span>	  <span class="comment"># Floating point division</span></span><br><span class="line"><span class="number">2.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">7</span> // <span class="number">4</span>        <span class="comment"># Floor division (rounding down)</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">7</span> % <span class="number">4</span>         <span class="comment"># Modulus (remainder of 7 // 4)</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h4 id="Assignment-statements（赋值语句）"><a href="#Assignment-statements（赋值语句）" class="headerlink" title="Assignment statements（赋值语句）"></a>Assignment statements（赋值语句）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="number">100</span> + <span class="number">50</span>) // <span class="number">2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">75</span></span><br></pre></td></tr></table></figure>

<h3 id="Doing-the-assignment（实验任务）"><a href="#Doing-the-assignment（实验任务）" class="headerlink" title="Doing the assignment（实验任务）"></a>Doing the assignment（实验任务）</h3><h4 id="Unlocking-tests（解锁测试）"><a href="#Unlocking-tests（解锁测试）" class="headerlink" title="Unlocking tests（解锁测试）"></a>Unlocking tests（解锁测试）</h4><p>完成正式实验前要进行一次测试，检测学生对<code>python</code>的基础知识的掌握程度，使用如下命令（<code>--local</code>参数使得测评在本地运行）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q python-basics -u --local</span><br></pre></td></tr></table></figure>

<p>测试过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Lab 0</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Python Basics &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">What would Python display? If you get stuck, try it out in the Python</span><br><span class="line">interpreter!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 10 + 2</span></span><br><span class="line">? 12</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 7 / 2</span></span><br><span class="line">? 3.5</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 7 // 2</span></span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 7 % 2                       <span class="comment"># 7 modulo 2, the remainder when dividing 7 by 2.</span></span></span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Python Basics &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">What would Python display? If you get stuck, try it out in the Python</span><br><span class="line">interpreter!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; x = 20</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; x + 2</span></span><br><span class="line">? 22</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; x</span></span><br><span class="line">? 20</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; y = 5</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; y = y + 3</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; y * 2</span></span><br><span class="line">? 16</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; y = y // 4</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; y + x</span></span><br><span class="line">? 22</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Python Basics unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<h4 id="Understanding-problems（了解问题）"><a href="#Understanding-problems（了解问题）" class="headerlink" title="Understanding problems（了解问题）"></a>Understanding problems（了解问题）</h4><blockquote>
<p>In <code>twenty_twenty_one</code>,</p>
<ul>
<li>The docstring tells you to “come up with the most creative expression that evaluates to 2021,” but that you can only use numbers and arithmetic operators <code>+</code> (add), <code>*</code> (multiply), and <code>-</code> (subtract).</li>
<li>The <code>doctest</code> checks that the function call <code>twenty_twenty_one()</code> should return the number 2021.</li>
</ul>
</blockquote>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">twenty_twenty_one</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Come up with the most creative expression that evaluates to 2021,</span></span><br><span class="line"><span class="string">    using only numbers and the +, *, and - operators.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; twenty_twenty_one()</span></span><br><span class="line"><span class="string">    2021</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">20</span> * <span class="number">100</span> + <span class="number">21</span></span><br></pre></td></tr></table></figure>

<h4 id="Running-tests（运行测试）"><a href="#Running-tests（运行测试）" class="headerlink" title="Running tests（运行测试）"></a>Running tests（运行测试）</h4><p>使用如下命令测评代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok --local</span><br></pre></td></tr></table></figure>

<p>测评结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Lab 0</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Running tests</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Test summary</span><br><span class="line">    3 test cases passed! No cases failed.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<h3 id="Appendix-Useful-Python-command-line-options（有用的Python命令行选项）"><a href="#Appendix-Useful-Python-command-line-options（有用的Python命令行选项）" class="headerlink" title="Appendix: Useful Python command line options（有用的Python命令行选项）"></a>Appendix: Useful Python command line options（有用的Python命令行选项）</h3><blockquote>
<ul>
<li><p><strong><code>-i</code></strong>: The <code>-i</code> option runs your Python script, then opens an interactive session. In an interactive session, you run Python code line by line and get immediate feedback instead of running an entire file all at once. To exit, type <code>exit()</code> into the interpreter prompt. You can also use the keyboard shortcut <code>Ctrl-D</code> on Linux&#x2F;Mac machines or <code>Ctrl-Z Enter</code> on Windows.</p>
<p>  If you edit the Python file while running it interactively, you will need to exit and restart the interpreter in order for those changes to take effect.</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -i </span><br></pre></td></tr></table></figure></li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><p><strong><code>-m doctest</code></strong>: Runs doctests in a particular file. Doctests are surrounded by triple quotes (<code>&quot;&quot;&quot;</code>) within functions.</p>
<p>  Each test in the file consists of <code>&gt;&gt;&gt;</code> followed by some Python code and the expected output (though the <code>&gt;&gt;&gt;</code> are not seen in the output of the doctest command).</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 -m doctest </span><br></pre></td></tr></table></figure></li>
</ul>
</blockquote>
<h2 id="关于-gitignore"><a href="#关于-gitignore" class="headerlink" title="关于.gitignore"></a>关于<code>.gitignore</code></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**/*.zip</span><br><span class="line">**/__pycache__</span><br></pre></td></tr></table></figure>

<p><code>git</code>不需要维护**<code>压缩包</code>** 和 <strong><code>缓存文件</code></strong></p>
]]></content>
      <categories>
        <category>CS61A</category>
        <category>Lab</category>
      </categories>
  </entry>
  <entry>
    <title>CS61A 课程笔记 Week01</title>
    <url>/2024/06/08/CS61A-courseNotes-week01/</url>
    <content><![CDATA[<h3 id="Wed-1-20-Lecture-1-Introduction"><a href="#Wed-1-20-Lecture-1-Introduction" class="headerlink" title="Wed 1&#x2F;20 Lecture #1: Introduction"></a>Wed 1&#x2F;20 Lecture #1: Introduction</h3><h4 id="Computer-Science"><a href="#Computer-Science" class="headerlink" title="Computer Science"></a>Computer Science</h4><p>简单介绍了计算机科学的分支：</p>
<ul>
<li><p><code>Programming</code></p>
</li>
<li><p><code>Theory</code></p>
</li>
<li><p><code>Programming Languages</code></p>
</li>
<li><p><code>Graphics</code></p>
</li>
<li><p><code>Artificial Intelligence</code></p>
</li>
<li><p><code>Systems</code></p>
</li>
</ul>
<p><code>CS 61A</code>是关于<code>Programming</code>(编程)的课程，需要使用一门编程语言<code>Python</code>。</p>
<h4 id="CS10"><a href="#CS10" class="headerlink" title="CS10"></a>CS10</h4><p>如果感觉本课程太困难，可以考虑<code>CS10</code>，关于<code>CS10</code>：<a href="https://cs10.org/">https://cs10.org</a></p>
<h4 id="Course-Organization"><a href="#Course-Organization" class="headerlink" title="Course Organization"></a>Course Organization</h4><ul>
<li><code>Readings</code></li>
<li><code>Lectures</code></li>
<li><code>Labs</code></li>
<li><code>Discussion</code></li>
<li><code>Tutorials</code></li>
<li><code>Homework</code></li>
<li><code>Projects</code></li>
</ul>
<h3 id="Fri-1-22-Lecture-2-Functions-Expressions-Environments"><a href="#Fri-1-22-Lecture-2-Functions-Expressions-Environments" class="headerlink" title="Fri 1&#x2F;22 Lecture #2: Functions, Expressions, Environments"></a>Fri 1&#x2F;22 Lecture #2: Functions, Expressions, Environments</h3><h4 id="Functions-as-Values"><a href="#Functions-as-Values" class="headerlink" title="Functions as Values"></a>Functions as Values</h4><p>在<code>Python</code>中，<code>functions</code>(函数)可以作为<code>fisrt class values</code>（第一类实体）</p>
<blockquote>
<p>在计算机科学中，”first-class values” 是指将值（或数据）视为第一类实体，具有与其他实体相同的地位和权利。这意味着在编程语言中，可以像对待其他变量、函数或对象一样对待值。</p>
<p>首先，”first-class values” 可以存储在变量中，就像任何其他值一样。可以将它们传递给函数作为参数，也可以从函数中返回。这使得值可以在程序中被传递和操作，而不仅限于某些特定的用法。</p>
<p>其次，”first-class values” 可以赋予其他特性，例如可以动态地创建和销毁。这允许在运行时生成新的值，以便根据需要进行计算和处理。</p>
<p>最重要的是，”first-class values” 具有与其他语言构造（如函数、方法、类等）相同的能力和权益。这包括对值进行操作、组合、扩展和抽象的能力，从而使程序具有更高的灵活性和表达能力。</p>
<p>使用支持 “first-class values” 的编程语言，开发者可以更自由地处理数据，并以更精确的方式描述问题和解决方案。这种概念在函数式编程、面向对象编程和许多现代编程语言中都得到了广泛应用。</p>
</blockquote>
<h4 id="Functions-Values"><a href="#Functions-Values" class="headerlink" title="Functions Values"></a>Functions Values</h4><p>在<code>Python</code>中，函数分为两种：</p>
<ul>
<li><code>Python</code>的内置函数（<code>built-in Function</code>）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">func <span class="built_in">abs</span>(number), func add(left, right)</span><br></pre></td></tr></table></figure>

<ul>
<li>用户自定义函数（<code>function definitions</code>）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">saxb</span>(<span class="params">a, x, b</span>): <span class="comment"># Header: Name and formal parameters</span></span><br><span class="line"><span class="keyword">return</span> a * x + b <span class="comment"># Body: Computation performed by function</span></span><br></pre></td></tr></table></figure>

<p>函数的参数列表是函数签名的一部分。</p>
<h4 id="Anonymous-Functions（匿名函数）"><a href="#Anonymous-Functions（匿名函数）" class="headerlink" title="Anonymous Functions（匿名函数）"></a>Anonymous Functions（匿名函数）</h4><p>在<code>Python</code>中，可以使用<code>lambda</code>表达式定义匿名函数，上述<code>saxb()</code>函数可以定义如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> a, x, b: a * x + b</span><br></pre></td></tr></table></figure>

<h4 id="Pure-Functions（纯函数）"><a href="#Pure-Functions（纯函数）" class="headerlink" title="Pure Functions（纯函数）"></a>Pure Functions（纯函数）</h4><p>纯函数调用参数列表传入的实参，并进行计算，返回结果，没有副作用（<code>side effects</code>）。</p>
<h4 id="Impure-Functions（非纯函数）"><a href="#Impure-Functions（非纯函数）" class="headerlink" title="Impure Functions（非纯函数）"></a>Impure Functions（非纯函数）</h4><p>非纯函数除了返回值之外，还会产生副作用（<code>side effects</code>），像<code>print()</code>函数，会有输出（<code>output</code>）；随机值函数<code>randint()</code>也有副作用。</p>
<h4 id="Call-Expressions"><a href="#Call-Expressions" class="headerlink" title="Call Expressions"></a>Call Expressions</h4><blockquote>
<p>A call expression denotes the operation of calling a function.</p>
</blockquote>
<p>调用顺序是 **<code>从外到内，从左到右</code>**。</p>
<p>下面的一个调用表达式很好地展示了这个原则（<code>2</code>在被调用前是<code>numeral</code>，<code>2</code>在被调用前是<code>number</code>）：</p>
<blockquote>
<p>“Numeral”和”number”是两个与数字相关的术语，它们有一些区别：</p>
<ol>
<li>Number（数字）：Number是一个广义的术语，用于表示数值或数量。它可以指代任何实际的、抽象的或符号化的数值，无论是整数、分数、小数还是负数。Number是数学中基本的概念，并且通常用来进行计算、比较和量化。</li>
<li>Numeral（数字符号）：Numeral是一种表示数字的符号或字符。它是一种书写系统，用于表示具体的数值。不同的文化和语言使用不同的数字符号和系统。例如，阿拉伯数字系统（0、1、2、3等）是世界上最常见的数字符号，而罗马数字（I、V、X、L等）是罗马帝国时期广泛使用的一种特殊符号系统。</li>
</ol>
<p>总结起来，”number”是指任何数值或数量，而”numeral”是指用于表示具体数值的符号或字符</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul, add</span><br><span class="line">mul(add(<span class="number">2</span>, mul(<span class="number">0x10</span>, <span class="number">0o10</span>)), add(<span class="number">0x3</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure>

<p>思考下面<code>Python</code>语句的输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">print</span>(<span class="number">1</span>), <span class="built_in">print</span>(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<p>函数名也是函数签名的一部分。</p>
<h4 id="Substitution"><a href="#Substitution" class="headerlink" title="Substitution"></a>Substitution</h4><p><code>Python</code>定义变量名的方法：</p>
<ul>
<li><p><code>assignment</code></p>
</li>
<li><p><code>functions definitions</code></p>
</li>
<li><p><code>parameter passing</code></p>
</li>
</ul>
<p>简单的代换示例1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">x, y</span>):</span><br><span class="line">	<span class="keyword">return</span> (x * y) ** x</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>compute(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">216</span></span><br></pre></td></tr></table></figure>

<p>简单的代换示例2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">incr</span>(<span class="params">n</span>):</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">		<span class="keyword">return</span> n + x</span><br><span class="line"><span class="keyword">return</span> f</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>incr(<span class="number">5</span>)(<span class="number">6</span>) </span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure>

<p>简单的代换示例3（<code>f()</code>内部的<code>x</code>不会被）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hmmmm</span>(<span class="params">x</span>):           </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> f</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hmmmm(<span class="number">5</span>)(<span class="number">6</span>)</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>对下面这个例子，代换就不能很好的解释了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">4</span></span><br><span class="line">x = <span class="number">8</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>这时候，就需要引入环境（<code>environment</code>）来进行解释。</p>
<h4 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h4><blockquote>
<ul>
<li><p>An environment is a mapping from names to values.</p>
</li>
<li><p>We say that a name is bound to a value in this environment. </p>
</li>
<li><p>In its simplest form, it consists of a single global environment frame:</p>
</li>
</ul>
</blockquote>
<h4 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h4><blockquote>
<ul>
<li><p>Every expression is evaluated in an environment, which supplies the meanings of any names in it. </p>
</li>
<li><p>Evaluating an expression typically involves first evaluating its subexpressions (the operators and operands of calls, the operands of conventional expressions such as <code>x*(y+z)</code>, . . . ). </p>
</li>
<li><p>These subexpressions are evaluated in the same environment as the expression that contains them. </p>
</li>
<li><p>Once their subexpressions (operator + operands) are evaluated, calls to user-defined functions must evaluate the expressions and statements from the definitions of those functions.</p>
</li>
</ul>
</blockquote>
<p><code>Environment</code>和<code>Evaluation</code>这个概念可以解释下面的程序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">   <span class="keyword">return</span> mul(x,x)</span><br><span class="line">x = -<span class="number">2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>square(mul(x, x))</span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><strong>翻译视频</strong>：<a href="https://www.bilibili.com/video/BV1v64y1Q78o/?spm_id_from=444.41.top_right_bar_window_default_collection.content.click&vd_source=249a8ad55bb26717dd55ec3dd295f644">【计算机程序的构造和解释】精译【UC Berkeley 公开课-CS61A (Spring 2021)】-中英双语字幕</a></li>
<li><code>github</code>: <a href="https://github.com/Maxwell2020152049/CS61A">Maxwell2020152049&#x2F;CS61A</a></li>
</ul>
]]></content>
      <categories>
        <category>CS61A</category>
        <category>Course Notes</category>
      </categories>
  </entry>
  <entry>
    <title>CS61A 课程笔记 Week03</title>
    <url>/2024/06/10/CS61A-CourseNote-Week03/</url>
    <content><![CDATA[<h2 id="Week3"><a href="#Week3" class="headerlink" title="Week3"></a>Week3</h2><h3 id="Lecture-6-Recursion"><a href="#Lecture-6-Recursion" class="headerlink" title="Lecture #6: Recursion"></a>Lecture #6: Recursion</h3><h4 id="一个有意思的高阶函数："><a href="#一个有意思的高阶函数：" class="headerlink" title="一个有意思的高阶函数："></a>一个有意思的高阶函数：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_sums</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next_sum</span>(<span class="params">k</span>):</span><br><span class="line">        <span class="keyword">return</span> print_sums(n+k)</span><br><span class="line">    <span class="keyword">return</span> next_sum</span><br><span class="line"></span><br><span class="line">print_sums(<span class="number">1</span>)(<span class="number">3</span>)(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">4</span><br><span class="line">9</span><br></pre></td></tr></table></figure>

<h4 id="Currying"><a href="#Currying" class="headerlink" title="Currying"></a>Currying</h4><p>一种将多参数函数转化为一系列单参数函数的方法，也称部分实例化（<code>partial instantiation</code>）。</p>
<p><code>eg.</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">curry2</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: \</span><br><span class="line">    <span class="keyword">lambda</span> y: \</span><br><span class="line">    f(x, y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(curry2(add)(<span class="number">30</span>)(<span class="number">12</span>))</span><br><span class="line"><span class="built_in">print</span>(curry2(add)(<span class="number">30</span>))</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">42</span><br><span class="line">&lt;function curry2.&lt;locals&gt;.&lt;lambda&gt;.&lt;locals&gt;.&lt;lambda&gt; at 0x7fa093dc1620&gt;</span><br></pre></td></tr></table></figure>

<h4 id="函数哲学（Philosophy-of-Functions）"><a href="#函数哲学（Philosophy-of-Functions）" class="headerlink" title="函数哲学（Philosophy of Functions）"></a>函数哲学（<code>Philosophy of Functions</code>）</h4><ul>
<li>语法规范说明了函数调用的语法（函数参数）</li>
<li>语义规范说明了如果工作：<ul>
<li>前置条件说明了对调用者的要求</li>
<li>后置条件说明了来自函数实现者的承诺</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>Specifies a <code>contract</code> between caller and function implementer. </li>
<li><code>Syntactic specification</code> gives syntax for calling (number of arguments). </li>
<li><code>Semantic specification</code> tells what it does: <ul>
<li>Preconditions are requirements on the caller. </li>
<li>Postconditions are promises from the function’s implementer.</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="函数抽象"><a href="#函数抽象" class="headerlink" title="函数抽象"></a>函数抽象</h4><p><strong>用户</strong>和<strong>函数实现者</strong>之间有不同的关注点：</p>
<ul>
<li>用户只提供函数参数并使用函数的返回值作为结果，不关心计算过程</li>
<li>函数实现者只考虑如果计算，不关心函数参数的来源和返回值如何被使用</li>
<li>对于用户来说，<code>sqrt</code>函数（平方根函数）就是一种抽象</li>
<li>综上，我们称其为<strong>函数抽象</strong></li>
</ul>
<blockquote>
<ul>
<li>Ideally, the specification (syntactic and semantic) should suffice to use the function (i.e., without seeing its body). </li>
<li>There is a <code>separation of concerns</code> here: <ul>
<li>The caller (client) is concerned with providing values of x and using the results, but <code>not</code> how the result is computed. </li>
<li>The implementer is concerned with how the result is computed, but <code>not</code> where x comes from or how the value is used. </li>
<li>From the client’s point of view, sqrt is an <code>abstraction</code> from the set of possible ways to compute this result. </li>
<li>Therefore, we call this <code>functional abstraction</code>.</li>
</ul>
</li>
<li>Programming is largely about choosing abstractions that lead to clear, fast, and maintainable programs.</li>
</ul>
</blockquote>
<h4 id="简单线性递归（Simple-Linear-Recursions）"><a href="#简单线性递归（Simple-Linear-Recursions）" class="headerlink" title="简单线性递归（Simple Linear Recursions）"></a>简单线性递归（<code>Simple Linear Recursions</code>）</h4><p>用<strong>递归</strong>实现一个求<code>1</code>到<code>N</code>的平方和的函数<code>sum_squares</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Simple linear recursions.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_squares1</span>(<span class="params">N</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return The sum of K**2 for K from 1 to N (inclusive).</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_squares1(-1)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_squares1(0)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_squares1(1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_squares1(4)</span></span><br><span class="line"><span class="string">    30</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> N &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> sum_squares1(N - <span class="number">1</span>) + N**<span class="number">2</span></span><br></pre></td></tr></table></figure>

<h4 id="尾递归（Tail-Recursion）"><a href="#尾递归（Tail-Recursion）" class="headerlink" title="尾递归（Tail Recursion）"></a>尾递归（<code>Tail Recursion</code>）</h4><p><strong>尾递归</strong>：递归函数的调用是该递归函数最后计算的部分，或者是返回值。</p>
<blockquote>
<p>The right version is a <code>tail-recursive</code> function, meaning that the recursive call is either the returned value or the very last action performed.</p>
</blockquote>
<p>上述函数可以用<strong>尾递归</strong>的方式实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tail-recursive sum_squares</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_squares2</span>(<span class="params">N</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the sum of K**2 for 1 &lt;= K &lt;= N.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_squares2(-1)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_squares2(0)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_squares2(1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_squares2(4)</span></span><br><span class="line"><span class="string">    30</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">part_sum</span>(<span class="params">accum, k</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return the sum of ACCUM + K**2 + (K+1)**2 + ... + N**2.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> k &gt; N:</span><br><span class="line">            <span class="keyword">return</span> accum</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> part_sum(accum + k**<span class="number">2</span>, k + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> part_sum(<span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>也可以用<strong>迭代</strong>方式实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Iterattive version</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_squares3</span>(<span class="params">N</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the sum of K**2 for 1 &lt;= K &lt;= N.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_squares3(-1)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_squares3(0)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_squares3(1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_squares3(4)</span></span><br><span class="line"><span class="string">    30</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    accum = <span class="number">0</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= N:</span><br><span class="line">        accum = accum + k**<span class="number">2</span></span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> accum</span><br></pre></td></tr></table></figure>

<h4 id="递归的思想（Recursive-Thinking）"><a href="#递归的思想（Recursive-Thinking）" class="headerlink" title="递归的思想（Recursive Thinking）"></a>递归的思想（<code>Recursive Thinking</code>）</h4><p>简单来说，递归的正确性的数学证明很像<strong>数学归纳法</strong>，详见本节课的<code>Slide</code>的<code>P11~P14</code>，写的很详细：</p>
<p>概括如下：</p>
<ul>
<li><p>起始步骤</p>
</li>
<li><p>递推步骤</p>
</li>
<li><p>递归要使得问题越变越小，有一个能够终止的终点</p>
</li>
</ul>
<h4 id="基于树递归的Sierpinski-s-Triangle"><a href="#基于树递归的Sierpinski-s-Triangle" class="headerlink" title="基于树递归的Sierpinski&#39;s Triangle"></a>基于树递归的<code>Sierpinski&#39;s Triangle</code></h4><p><code>Sierpinski&#39;s Triangle</code>是一种典型的基于递归实现的图形结构。</p>
<p>修改了课程给的示例代码，在<code>Linux</code>上可以跑起来了（<code>Windows</code>上跑不起来，可能是缺少对应的库），把<code>make_displayer</code>函数中的<code>-g1300x1000</code>修改为<code>-g1300x8000</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, DEVNULL, PIPE</span><br><span class="line"></span><br><span class="line">sin60 = sqrt(<span class="number">3</span>) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To use interactively:  Download 06.py from the cs61a.org website.</span></span><br><span class="line"><span class="comment"># Install gs (ghostscript) and put it in your path.  Then, run the command</span></span><br><span class="line"><span class="comment">#     python3 -i 06.py</span></span><br><span class="line"><span class="comment"># (or equivalent) on your local machine, at which point you can run</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; d = make_displayer()</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; draw_gasket(3, d.stdin)</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; draw_gasket(6, d.stdin)</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; stop_displayer(d)   # To clean up.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_gasket</span>(<span class="params">n, x, y, s, output</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Write Postscript commands to OUTPUT that draw an Nth-order</span></span><br><span class="line"><span class="string">    Sierpinski&#x27;s gasket, with lower-left corner at (X,Y), and</span></span><br><span class="line"><span class="string">    size S X S (units of points: 1/72 in).&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        draw_solid_triangle(x, y, s, output)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        make_gasket(n - <span class="number">1</span>, x, y, s/<span class="number">2</span>, output)</span><br><span class="line">        make_gasket(n - <span class="number">1</span>, x + s/<span class="number">2</span>, y, s/<span class="number">2</span>, output)</span><br><span class="line">        make_gasket(n - <span class="number">1</span>, x + s/<span class="number">4</span>, y + sin60*s/<span class="number">2</span>, s/<span class="number">2</span>, output)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_solid_triangle</span>(<span class="params">x, y, s, output</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Draw a solid triangle lower-left corner at (X, Y)</span></span><br><span class="line"><span class="string">    and side S on OUTPUT.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x:<span class="number">.2</span>f&#125;</span> <span class="subst">&#123;y:<span class="number">.2</span>f&#125;</span> moveto &quot;</span></span><br><span class="line">          <span class="string">f&quot;<span class="subst">&#123;s:<span class="number">.2</span>f&#125;</span> 0 rlineto &quot;</span></span><br><span class="line">          <span class="string">f&quot;-<span class="subst">&#123;s/<span class="number">2</span>:<span class="number">.2</span>f&#125;</span> <span class="subst">&#123;s*sin60:<span class="number">.2</span>f&#125;</span> rlineto &quot;</span></span><br><span class="line">          <span class="string">&quot;closepath fill&quot;</span>, file=output)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_gasket</span>(<span class="params">n, output=sys.stdout, x=<span class="number">10</span>, y=<span class="number">10</span>, s=<span class="number">400</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Create a complete Postscript file for the gasket created by</span></span><br><span class="line"><span class="string">    make_gasket(N, X, Y, S, OUTPUT).&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%!&quot;</span>, file=output)</span><br><span class="line">    make_gasket(n, x, y, s, output=output)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;showpage&quot;</span>, file=output)</span><br><span class="line">    output.flush()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_displayer</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Create a Ghostscript process that displays its input (sent in through</span></span><br><span class="line"><span class="string">    .stdin).&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Adjust the -gWIDTHxHEIGHT option to change drawing area.  Units are</span></span><br><span class="line">    <span class="comment"># pixels.</span></span><br><span class="line">    <span class="keyword">return</span> Popen([<span class="string">&quot;gs&quot;</span>, <span class="string">&quot;-g1300x8000&quot;</span>],</span><br><span class="line">                  universal_newlines=<span class="literal">True</span>, stdin=PIPE, stdout=DEVNULL)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stop_displayer</span>(<span class="params">d</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Terminate execution of displayer D (created by make_displayer).&quot;&quot;&quot;</span></span><br><span class="line">    d.stdin.close()</span><br><span class="line">    d.wait()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在终端中输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 -i 06.py</span> </span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; d = make_displayer()</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; draw_gasket(4, d.stdin)</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/9646793e6f6f565b04701586f8fb3b8.png"></p>
<h3 id="Lecture-7-Tree-Recursion"><a href="#Lecture-7-Tree-Recursion" class="headerlink" title="Lecture #7: Tree Recursion"></a>Lecture #7: Tree Recursion</h3><h4 id="树递归（Tree-Recursion）"><a href="#树递归（Tree-Recursion）" class="headerlink" title="树递归（Tree Recursion）"></a>树递归（<code>Tree Recursion</code>）</h4><p>上节课用到的<code>make_gasket</code>函数就是用树递归实现的。</p>
<blockquote>
<ul>
<li>The <code>make gasket</code> function is an example of a tree recursion, where each call makes multiple recursive calls on itself. </li>
<li>A <code>linear recursion</code> makes at most one recursive call per call. </li>
<li>A <code>tail recursion</code> has at most one recursive call per call, and it is the last thing evaluated.</li>
</ul>
</blockquote>
<p>一个<strong>尾递归</strong>的例子，<code>find_zero(lowest, highest, func)</code>函数返回<code>func</code>函数的<code>[lowest, highest]</code>区间上的零点的横坐标：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find</span> zero(lowest, highest, func):</span><br><span class="line"><span class="string">&quot;&quot;&quot;Return a value v such that LOWEST &lt;= v &lt;= HIGHEST and</span></span><br><span class="line"><span class="string">FUNC(v) == 0, or None if there is no such value.</span></span><br><span class="line"><span class="string">Assumes that FUNC is a non-decreasing function from integers</span></span><br><span class="line"><span class="string">to integers (that is, if a &lt; b, then FUNC(a) &lt;= FUNC(b).&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> lowest &gt; highest: 		<span class="comment"># Base Case</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">elif</span> func(lowest) == <span class="number">0</span>: 	<span class="comment"># Base Case</span></span><br><span class="line">        <span class="keyword">return</span> lowest</span><br><span class="line">    <span class="keyword">else</span>: 								<span class="comment"># Inductive (Recursive) Case</span></span><br><span class="line">    	<span class="keyword">return</span> find zero(lowest + <span class="number">1</span>, highest, func)</span><br></pre></td></tr></table></figure>

<p>等价的迭代版本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Equivalent iterative solution</span></span><br><span class="line"><span class="keyword">while</span> lowest &lt;= highest:</span><br><span class="line">	<span class="keyword">if</span> func(lowest) == <span class="number">0</span>:</span><br><span class="line">		<span class="keyword">return</span> lowest</span><br><span class="line">	lowest += <span class="number">1</span></span><br><span class="line"><span class="comment"># If we get here, returns None</span></span><br></pre></td></tr></table></figure>

<p>使用<strong>二分</strong>思想查找零点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_zero</span>(<span class="params">lowest, highest, func</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a value v such that LOWEST &lt;= v &lt;= HIGHEST and </span></span><br><span class="line"><span class="string">    FUNC(v) == 0, or None if there is no such value.</span></span><br><span class="line"><span class="string">    Assumes that FUNC is a non-descending function from integers</span></span><br><span class="line"><span class="string">    to integers (that is, if a &lt; b, then FUNC(a) &lt;= FUNC(b).</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; find_zero(0, 10, lambda x: x - 4)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; find_zero(0, 100, lambda x: x**2 - 36)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; find_zero(0, 100, lambda x: x**2 - 37)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> lowest &gt; highest:</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    middle = (lowest + highest) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> func(middle) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> middle</span><br><span class="line">    <span class="keyword">elif</span> func(middle) &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> find_zero(middle + <span class="number">1</span>, highest, func)</span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">return</span> find_zero(lowest, middle -<span class="number">1</span>, func)</span><br></pre></td></tr></table></figure>

<p>等价的迭代版本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Equivalent iterative solution</span></span><br><span class="line"><span class="keyword">while</span> lowest &lt;= highest:</span><br><span class="line">	middle = (lowest + highest) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> func(middle) == <span class="number">0</span>:</span><br><span class="line">   		<span class="keyword">return</span> middle</span><br><span class="line">    <span class="keyword">elif</span> func(middle) &lt; <span class="number">0</span>:</span><br><span class="line">    	lowest = middle + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    	highest = middle - <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>不使用<code>if</code>语句，只是用<code>and/or</code>逻辑运算符也能够实现一样的功能，详见本节课的<code>Slide</code>的<code>P16~P23</code></p>
<h4 id="寻路问题（Finding-a-Path）"><a href="#寻路问题（Finding-a-Path）" class="headerlink" title="寻路问题（Finding a Path）"></a>寻路问题（<code>Finding a Path</code>）</h4><p>树递归的另一个例子，在迷宫中自上向下寻路，搜索是否存在路径或者存在多少条路径：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Maze configuration from lecture</span></span><br><span class="line"><span class="comment"># 第一个迷宫，用于测试 is_path 函数</span></span><br><span class="line">BLOCKS1 = &#123; (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">3</span>), (<span class="number">0</span>, <span class="number">4</span>), (<span class="number">0</span>, <span class="number">5</span>), (<span class="number">0</span>, <span class="number">6</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">            (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">1</span>, <span class="number">5</span>), (<span class="number">2</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">6</span>), (<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">            (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">3</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>), (<span class="number">4</span>, <span class="number">0</span>), (<span class="number">4</span>, <span class="number">1</span>), (<span class="number">4</span>, <span class="number">2</span>), (<span class="number">4</span>, <span class="number">3</span>),</span><br><span class="line">            (<span class="number">4</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">6</span>), (<span class="number">5</span>, <span class="number">0</span>), (<span class="number">5</span>, <span class="number">2</span>), (<span class="number">5</span>, <span class="number">3</span>), (<span class="number">5</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">5</span>), (<span class="number">6</span>, <span class="number">1</span>),</span><br><span class="line">            (<span class="number">6</span>, <span class="number">3</span>), (<span class="number">6</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">1</span>), (<span class="number">7</span>, <span class="number">2</span>), (<span class="number">7</span>, <span class="number">4</span>), (<span class="number">7</span>, <span class="number">5</span>), (<span class="number">8</span>, <span class="number">0</span>), (<span class="number">8</span>, <span class="number">1</span>),</span><br><span class="line">            (<span class="number">8</span>, <span class="number">3</span>), (<span class="number">8</span>, <span class="number">4</span>), (<span class="number">8</span>, <span class="number">6</span>), (<span class="number">9</span>, <span class="number">0</span>), (<span class="number">9</span>, <span class="number">3</span>), (<span class="number">9</span>, <span class="number">6</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个 blocked 函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maze1</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> <span class="number">0</span> &lt;= x &lt; <span class="number">10</span> <span class="keyword">or</span> (x, y) <span class="keyword">in</span> BLOCKS1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Missing block at (7, 1)</span></span><br><span class="line"><span class="comment"># 第二个迷宫，用于测试 num_paths 函数</span></span><br><span class="line">BLOCKS2 = &#123; (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">3</span>), (<span class="number">0</span>, <span class="number">4</span>), (<span class="number">0</span>, <span class="number">5</span>), (<span class="number">0</span>, <span class="number">6</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">            (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">1</span>, <span class="number">5</span>), (<span class="number">2</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">6</span>), (<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">            (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">3</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>), (<span class="number">4</span>, <span class="number">0</span>), (<span class="number">4</span>, <span class="number">1</span>), (<span class="number">4</span>, <span class="number">2</span>), (<span class="number">4</span>, <span class="number">3</span>),</span><br><span class="line">            (<span class="number">4</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">6</span>), (<span class="number">5</span>, <span class="number">0</span>), (<span class="number">5</span>, <span class="number">2</span>), (<span class="number">5</span>, <span class="number">3</span>), (<span class="number">5</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">5</span>), (<span class="number">6</span>, <span class="number">1</span>),</span><br><span class="line">            (<span class="number">6</span>, <span class="number">3</span>), (<span class="number">6</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">2</span>), (<span class="number">7</span>, <span class="number">4</span>), (<span class="number">7</span>, <span class="number">5</span>), (<span class="number">8</span>, <span class="number">0</span>), (<span class="number">8</span>, <span class="number">1</span>),</span><br><span class="line">            (<span class="number">8</span>, <span class="number">3</span>), (<span class="number">8</span>, <span class="number">4</span>), (<span class="number">8</span>, <span class="number">6</span>), (<span class="number">9</span>, <span class="number">0</span>), (<span class="number">9</span>, <span class="number">3</span>), (<span class="number">9</span>, <span class="number">6</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个 blocked 函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maze2</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> <span class="number">0</span> &lt;= x &lt; <span class="number">10</span> <span class="keyword">or</span> (x, y) <span class="keyword">in</span> BLOCKS2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索是否存在路径</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_path</span>(<span class="params">blocked, x0, y0</span>):</span><br><span class="line">   <span class="string">&quot;&quot;&quot;True iff there is a path of squares from (X0, Y0) to some </span></span><br><span class="line"><span class="string">   square (x1, 0) such that all squares on the path (including first and</span></span><br><span class="line"><span class="string">   last) are unoccupied.  BLOCKED is a predicate such that BLOCKED(x, y) </span></span><br><span class="line"><span class="string">   is true iff the grid square at (x, y) is occupied or off the edge.</span></span><br><span class="line"><span class="string">   Each step of a path goes down one row and 1 or 0 columns left or right.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> blocked(x0, y0):</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">   <span class="keyword">elif</span> y0 == <span class="number">0</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> (is_path(blocked, x0-<span class="number">1</span>, y0-<span class="number">1</span>) </span><br><span class="line">              <span class="keyword">or</span> is_path(blocked, x0, y0-<span class="number">1</span>) </span><br><span class="line">              <span class="keyword">or</span> is_path(blocked, x0+<span class="number">1</span>, y0-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回存在多少条路径</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num_paths</span>(<span class="params">blocked, x0, y0</span>):</span><br><span class="line">   <span class="string">&quot;&quot;&quot;Return the number of unoccupied paths that run from (X0, Y0)</span></span><br><span class="line"><span class="string">   to some square (x1, 0). BLOCKED is a predicate such that BLOCKED(x, y) </span></span><br><span class="line"><span class="string">   is true iff the grid square at (x, y) is occupied or off the edge. &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> blocked(x0, y0):</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">   <span class="keyword">elif</span> y0 == <span class="number">0</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">return</span> num_paths(blocked, x0, y0-<span class="number">1</span>) \</span><br><span class="line">            + num_paths(blocked, x0-<span class="number">1</span>, y0-<span class="number">1</span>) \</span><br><span class="line">            + num_paths(blocked, x0+<span class="number">1</span>, y0-<span class="number">1</span>)</span><br><span class="line"><span class="comment"># OR (looking ahead a bit)</span></span><br><span class="line"><span class="comment">#      return sum( (num_paths(blocked, x0+k, y0-1)</span></span><br><span class="line"><span class="comment">#                   for k in range(-1, 2))</span></span><br><span class="line"><span class="comment">#                )</span></span><br></pre></td></tr></table></figure>

<h4 id="分区计数（Counting-Partitions）"><a href="#分区计数（Counting-Partitions）" class="headerlink" title="分区计数（Counting Partitions）"></a>分区计数（<code>Counting Partitions</code>）</h4><p>又一个使用<strong>树递归</strong>的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">num_partitions</span>(<span class="params">n, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return number of distinct ways to express N as a sum of </span></span><br><span class="line"><span class="string">    positive integers each of which is &lt;= K, where K &gt; 0.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> k == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> num_partitions(n-k, k) + num_partitions(n, k-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Lecture-8-More-on-Functions"><a href="#Lecture-8-More-on-Functions" class="headerlink" title="Lecture #8: More on Functions"></a>Lecture #8: More on Functions</h3><h4 id="汉诺塔（The-Towers-of-Hanoi）"><a href="#汉诺塔（The-Towers-of-Hanoi）" class="headerlink" title="汉诺塔（The Towers of Hanoi）"></a>汉诺塔（<code>The Towers of Hanoi</code>）</h4><p>经典递归问题，课程给出了其解决策略和一个可视化的程序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Towers of Hanoi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">move_tower</span>(<span class="params">n, start_peg, end_peg</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Perform moves that transfer an ordered tower of N&gt;0 disks in the</span></span><br><span class="line"><span class="string">    Towers of Hanoi puzzle from peg START_PEG to peg END_PEG, where </span></span><br><span class="line"><span class="string">    1 &lt;= START_PEG, END_PEG &lt;= 3, and START_PEG != END_PEG. Assumes</span></span><br><span class="line"><span class="string">    the disks to be moved are all smaller than those on the other pegs.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        move_disk(start_peg, end_peg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        spare_peg = <span class="number">6</span> - start_peg - end_peg</span><br><span class="line">        move_tower(n - <span class="number">1</span>, start_peg, spare_peg)</span><br><span class="line">        move_disk(start_peg, end_peg)</span><br><span class="line">        move_tower(n - <span class="number">1</span>, spare_peg, end_peg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Extra fancy stuff for showing the moves, setting up, and solving the puzzle.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">PAUSE = <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">pegs = [<span class="number">0</span>, [], [], []]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_puzzle</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Show the moves to solve a Towers of Hanoi problem for a tower</span></span><br><span class="line"><span class="string">    of N&gt;0 disks.&quot;&quot;&quot;</span></span><br><span class="line">    set_up_puzzle(n)</span><br><span class="line">    print_puzzle()</span><br><span class="line">    time.sleep(PAUSE)</span><br><span class="line">    move_tower(n, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_up_puzzle</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Set up Towers of Hanoi puzzle with N disks on peg 1, and</span></span><br><span class="line"><span class="string">    other pegs empty.&quot;&quot;&quot;</span></span><br><span class="line">    pegs[:] = [n, [ k <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n, <span class="number">0</span>, -<span class="number">1</span>) ], [], []]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">move_disk</span>(<span class="params">peg0, peg1</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Move disk from PEG0 and PEG1, printing the result.&quot;&quot;&quot;</span></span><br><span class="line">    pegs[peg1].append(pegs[peg0].pop())</span><br><span class="line">    print_puzzle()</span><br><span class="line">    time.sleep(PAUSE)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_puzzle</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print current configuration of puzzle (stored in pegs).&quot;&quot;&quot;</span></span><br><span class="line">    n = pegs[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(pegs[j]) &gt;= k:</span><br><span class="line">                c = pegs[j][k-<span class="number">1</span>]</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot; &quot;</span> + <span class="string">&quot; &quot;</span> * (n - c) + <span class="string">&quot;##&quot;</span> * c + <span class="string">&quot; &quot;</span> * (n - c) + <span class="string">&quot; &quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot; &quot;</span> * (<span class="number">2</span> * n + <span class="number">2</span>), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * (<span class="number">6</span>*n + <span class="number">9</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; &quot;</span> * (n+<span class="number">2</span>) + <span class="string">&quot;1&quot;</span> + <span class="string">&quot; &quot;</span> * (<span class="number">2</span> * n + <span class="number">2</span>) + <span class="string">&quot;2&quot;</span> + <span class="string">&quot; &quot;</span> * (<span class="number">2</span> * n + <span class="number">2</span>) + <span class="string">&quot;3&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>

<p>在终端输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 -i 08.py</span> </span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; solve_puzzle(3)</span></span><br></pre></td></tr></table></figure>

<p>可以打印三层汉诺塔的解决过程。</p>
<h4 id="异常（Exceptions）"><a href="#异常（Exceptions）" class="headerlink" title="异常（Exceptions）"></a>异常（<code>Exceptions</code>）</h4><p><code>python</code>处理异常有两种方法：</p>
<ul>
<li><code>Raise</code>：丢出一个错误，结束程序的运行：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> N &lt;= <span class="number">0</span>:</span><br><span class="line"><span class="keyword">raise</span> ValueError(<span class="string">&quot;Number of disks must be positive&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Try</code>：接收错误，打印错误信息，但不终止程序的运行</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">input</span> = <span class="built_in">open</span>(myfile).read()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError: <span class="comment"># Another standard exception</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Warning: could not open&quot;</span>, myfile)</span><br><span class="line">    <span class="built_in">input</span> = <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>


<h4 id="编程练习"><a href="#编程练习" class="headerlink" title="编程练习"></a>编程练习</h4><p>编写一个函数<code>remove_digits(n, digit)</code>，移除<code>n</code>中所有等于<code>digit</code>的位。</p>
<p>实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deleting digits (spoiler alert!)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_digit</span>(<span class="params">n, digit</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Assuming N&gt;=0, 0 &lt;= DIGIT &lt;= 9, return a number whose</span></span><br><span class="line"><span class="string">    base-10 representation is the same as N, but with all instances of</span></span><br><span class="line"><span class="string">    DIGIT removed.  If all digits removed, return 0.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove_digit(123, 3)</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove_digit(1234, 5)</span></span><br><span class="line"><span class="string">    1234</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove_digit(1234, 1)</span></span><br><span class="line"><span class="string">    234</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; remove_digit(111111, 1)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">10</span> == digit:</span><br><span class="line">        <span class="keyword">return</span> remove_digit(n // <span class="number">10</span>, digit)</span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">10</span> + remove_digit(n // <span class="number">10</span>, digit) * <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><p><strong>翻译视频</strong>：<a href="https://www.bilibili.com/video/BV1v64y1Q78o/?spm_id_from=444.41.top_right_bar_window_default_collection.content.click&vd_source=249a8ad55bb26717dd55ec3dd295f644">【计算机程序的构造和解释】精译【UC Berkeley 公开课-CS61A (Spring 2021)】-中英双语字幕</a></p>
</li>
<li><p><code>github</code>: <a href="https://github.com/Maxwell2020152049/CS61A">Maxwell2020152049&#x2F;CS61A</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>CS61A</category>
        <category>Course Notes</category>
      </categories>
  </entry>
  <entry>
    <title>CS61A Homework03</title>
    <url>/2024/06/10/CS61A-Homework03/</url>
    <content><![CDATA[<h1 id="Homework-3-Recursion"><a href="#Homework-3-Recursion" class="headerlink" title="Homework 3: Recursion"></a>Homework 3: Recursion</h1><h2 id="Required-questions"><a href="#Required-questions" class="headerlink" title="Required questions"></a>Required questions</h2><h3 id="Q1-Num-eights"><a href="#Q1-Num-eights" class="headerlink" title="Q1: Num eights"></a>Q1: Num eights</h3><p>实现一个递归函数<code>num_eights(x)</code>，返回<code>x</code>的位等于<code>8</code>的个数。</p>
<p>不允许使用<code>=</code>、<code>+=</code>等赋值运算符。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">num_eights</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the number of times 8 appears as a digit of x.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(3)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(8)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(88888888)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(2638)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(86380)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; num_eights(12345)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban all assignment statements</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;num_eights&#x27;,</span></span><br><span class="line"><span class="string">    ...       [&#x27;Assign&#x27;, &#x27;AugAssign&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> x == <span class="number">8</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> <span class="keyword">if</span> x % <span class="number">10</span> == <span class="number">8</span> <span class="keyword">else</span> <span class="number">0</span>) + num_eights(x // <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>使用<code>python</code>中布尔值和整数相加返回整数的特性，也可以实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> x &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">return</span> (x == <span class="number">8</span>) + <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> (x % <span class="number">10</span> == <span class="number">8</span>) + num_eights(x // <span class="number">10</span>) + <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="Q2-Ping-pong"><a href="#Q2-Ping-pong" class="headerlink" title="Q2: Ping-pong"></a>Q2: Ping-pong</h3><p>实现一个递归函数<code>pingpong(n)</code>，计算<code>n</code>次加<code>1</code>或<code>-1</code>的结果，当累加次数<code>i</code>是<code>8</code>的倍数或者含有<code>8</code>时，原本加<code>1</code>变成加<code>-1</code>，反之也成立。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pingpong</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the nth element of the ping-pong sequence.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(8)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(10)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(15)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(21)</span></span><br><span class="line"><span class="string">    -1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(22)</span></span><br><span class="line"><span class="string">    -2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(30)</span></span><br><span class="line"><span class="string">    -2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(68)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(69)</span></span><br><span class="line"><span class="string">    -1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(80)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(81)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(82)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pingpong(100)</span></span><br><span class="line"><span class="string">    -6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban assignment statements</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;pingpong&#x27;, [&#x27;Assign&#x27;, &#x27;AugAssign&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="comment"># recursion version</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">i, delta, ans, n</span>):</span><br><span class="line">        <span class="keyword">if</span> i &gt; n:</span><br><span class="line">            <span class="keyword">return</span> ans</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">8</span> == <span class="number">0</span> <span class="keyword">or</span> num_eights(i) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> func(i + <span class="number">1</span>, -delta, ans + delta, n)</span><br><span class="line">        <span class="keyword">return</span> func(i + <span class="number">1</span>, delta, ans + delta, n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> func(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, n)</span><br></pre></td></tr></table></figure>

<p>迭代版本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># iteration version</span></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line">delta = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    ans += delta</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">8</span> == <span class="number">0</span> <span class="keyword">or</span> num_eights(i) &gt; <span class="number">0</span>:</span><br><span class="line">        delta *= -<span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

<h3 id="Q3-Missing-Digits"><a href="#Q3-Missing-Digits" class="headerlink" title="Q3: Missing Digits"></a>Q3: Missing Digits</h3><p>实现<code>missing_digits(n)</code>函数，<code>n</code>是一个整数，所有位从左到右不降，返回<code>n</code>的位中缺失的数（<code>1~9</code>）的个数。</p>
<p>不允许使用循环语句。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">missing_digits</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Given a number a that is in sorted, increasing order,</span></span><br><span class="line"><span class="string">    return the number of missing digits in n. A missing digit is</span></span><br><span class="line"><span class="string">    a number between the first and last digit of a that is not in n.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(1248) # 3, 5, 6, 7</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(19) # 2, 3, 4, 5, 6, 7, 8</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(1122) # No missing numbers</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(123456) # No missing numbers</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(3558) # 4, 6, 7</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(35578) # 4, 6</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(12456) # 3</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(16789) # 2, 3, 4, 5</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; missing_digits(4) # No missing numbers between 4 and 4</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban while or for loops</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;missing_digits&#x27;, [&#x27;While&#x27;, &#x27;For&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> missing_digits(n // <span class="number">10</span>) + (<span class="built_in">max</span>(<span class="number">0</span>, n % <span class="number">10</span> - n // <span class="number">10</span> % <span class="number">10</span> - <span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<h3 id="Q4-Count-coins"><a href="#Q4-Count-coins" class="headerlink" title="Q4: Count coins"></a>Q4: Count coins</h3><p>实现<code>count_coins(change)</code>函数，<code>change</code>是一个正整数（零钱数），返回用<code>1</code>、<code>5</code>、<code>10</code>、<code>25</code>四种硬币组合成零钱的方法个数。</p>
<p>不允许使用循环语句。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_coins</span>(<span class="params">change</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the number of ways to make change using coins of value of 1, 5, 10, 25.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_coins(15)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_coins(10)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_coins(20)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_coins(100) # How many ways to make change for a dollar?</span></span><br><span class="line"><span class="string">    242</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban iteration</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;count_coins&#x27;, [&#x27;While&#x27;, &#x27;For&#x27;])                                          </span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">n, k</span>):</span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> k == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> func(n - k, k) + func(n, get_last_coin(k))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> func(change, <span class="number">25</span>)</span><br></pre></td></tr></table></figure>

<p>使用如下命令可以进行测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Homework 3</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Running tests</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Test summary</span><br><span class="line">    4 test cases passed! No cases failed.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<h2 id="Just-for-Fun-Questions"><a href="#Just-for-Fun-Questions" class="headerlink" title="Just for Fun Questions"></a>Just for Fun Questions</h2><h3 id="Q5-Anonymous-factorial"><a href="#Q5-Anonymous-factorial" class="headerlink" title="Q5: Anonymous factorial"></a>Q5: Anonymous factorial</h3><p>实现一个递归函数<code>make_anonymous_factorial()</code>，返回一个匿名函数，该匿名函数接收一个参数<code>n</code>，计算<code>n</code>的阶乘。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_anonymous_factorial</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the value of an expression that computes factorial.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_anonymous_factorial()(5)</span></span><br><span class="line"><span class="string">    120</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban any assignments or recursion</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;make_anonymous_factorial&#x27;, [&#x27;Assign&#x27;, &#x27;AugAssign&#x27;, &#x27;FunctionDef&#x27;, &#x27;Recursion&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">lambda</span> f: <span class="keyword">lambda</span> n: f(f, n))(<span class="keyword">lambda</span> f, n: <span class="number">1</span> <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">else</span> mul(f(f, sub(n, <span class="number">1</span>)), n))</span><br></pre></td></tr></table></figure>

<p>使用如下命令可以进行测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q make_anonymous_factorial --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Homework 3</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Running tests</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Test summary</span><br><span class="line">    1 test cases passed! No cases failed.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<h3 id="Q6-Towers-of-Hanoi"><a href="#Q6-Towers-of-Hanoi" class="headerlink" title="Q6: Towers of Hanoi"></a>Q6: Towers of Hanoi</h3><p>实现<code>move_stack(n, start, end)</code>，<code>n</code>表示盘子个数，<code>start</code>表示初始柱子，<code>end</code>表示目标柱子，打印搬运盘子的过程，每次移动一个盘子，打印一条语句。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_move</span>(<span class="params">origin, destination</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print instructions to move a disk.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Move the top disk from rod&quot;</span>, origin, <span class="string">&quot;to rod&quot;</span>, destination)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">move_stack</span>(<span class="params">n, start, end</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the moves required to move n disks on the start pole to the end</span></span><br><span class="line"><span class="string">    pole without violating the rules of Towers of Hanoi.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    n -- number of disks</span></span><br><span class="line"><span class="string">    start -- a pole position, either 1, 2, or 3</span></span><br><span class="line"><span class="string">    end -- a pole position, either 1, 2, or 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    There are exactly three poles, and start and end must be different. Assume</span></span><br><span class="line"><span class="string">    that the start pole has at least n disks of increasing size, and the end</span></span><br><span class="line"><span class="string">    pole is either empty or has a top disk larger than the top n start disks.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(1, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(2, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; move_stack(3, 1, 3)</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 3 to rod 2</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 1</span></span><br><span class="line"><span class="string">    Move the top disk from rod 2 to rod 3</span></span><br><span class="line"><span class="string">    Move the top disk from rod 1 to rod 3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">1</span> &lt;= start &lt;= <span class="number">3</span> <span class="keyword">and</span> <span class="number">1</span> &lt;= end &lt;= <span class="number">3</span> <span class="keyword">and</span> start != end, <span class="string">&quot;Bad start/end&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    oppo = <span class="number">6</span> -start - end</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        print_move(start, end)</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    move_stack(n - <span class="number">1</span>, start, oppo)</span><br><span class="line">    move_stack(<span class="number">1</span>, start, end)</span><br><span class="line">    move_stack(n - <span class="number">1</span>, oppo, end)</span><br></pre></td></tr></table></figure>

<p>使用如下命令可以进行测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q move_stack --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Homework 3</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Running tests</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Test summary</span><br><span class="line">    1 test cases passed! No cases failed.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A</category>
        <category>Homework</category>
      </categories>
  </entry>
  <entry>
    <title>CS61A Lab02</title>
    <url>/2024/06/10/CS61A-Lab02/</url>
    <content><![CDATA[<h1 id="Lab-2-Higher-Order-Functions-Lambda-Expressions"><a href="#Lab-2-Higher-Order-Functions-Lambda-Expressions" class="headerlink" title="Lab 2: Higher-Order Functions, Lambda Expressions"></a>Lab 2: Higher-Order Functions, Lambda Expressions</h1><h2 id="What-Would-Python-Display"><a href="#What-Would-Python-Display" class="headerlink" title="What Would Python Display?"></a>What Would Python Display?</h2><h3 id="Q1-WWPD-Lambda-the-Free"><a href="#Q1-WWPD-Lambda-the-Free" class="headerlink" title="Q1: WWPD: Lambda the Free"></a>Q1: WWPD: Lambda the Free</h3><p>输入以下命令进行测试：</p>
<p>如果结果是函数，就输入<code>Function</code>，如果是错误就输入<code>Error</code>，如果没有输出就输入<code>Nothing</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q lambda -u --local</span><br></pre></td></tr></table></figure>

<p>过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Lab 2</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Lambda the Free &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 7)</span><br><span class="line"></span><br><span class="line">Q: Which of the following statements describes a difference between a def statement and a lambda expression?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) A def statement can only have one line in its body.</span><br><span class="line">1) A lambda expression cannot have more than two parameters.</span><br><span class="line">2) A lambda expression does not automatically bind the function object that it returns to any name.</span><br><span class="line">3) A lambda expression cannot return another function.</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Lambda the Free &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 6)</span><br><span class="line"></span><br><span class="line">Q: How many parameters does the following lambda expression have?</span><br><span class="line">lambda a, b: c + d</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) Not enough information</span><br><span class="line">1) two</span><br><span class="line">2) three</span><br><span class="line">3) one</span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Lambda the Free &gt; Suite 1 &gt; Case 3</span><br><span class="line">(cases remaining: 5)</span><br><span class="line"></span><br><span class="line">Q: When is the return expression of a lambda expression executed?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) When the lambda expression is evaluated.</span><br><span class="line">1) When you pass the lambda expression into another function.</span><br><span class="line">2) When the function returned by the lambda expression is called.</span><br><span class="line">3) When you assign the lambda expression to a name.</span><br><span class="line">? 0</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) When the lambda expression is evaluated.</span><br><span class="line">1) When you pass the lambda expression into another function.</span><br><span class="line">2) When the function returned by the lambda expression is called.</span><br><span class="line">3) When you assign the lambda expression to a name.</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Lambda the Free &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"></span><br><span class="line">What would Python display? If you get stuck, try it out in the Python</span><br><span class="line">interpreter!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># If Python displays &lt;function...&gt;, type Function, if it errors type Error, if it displays nothing type Nothing</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; lambda x: x  <span class="comment"># A lambda expression with one parameter x</span></span></span><br><span class="line">? Function</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; a = lambda x: x  <span class="comment"># Assigning a lambda function to the name a</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; a(5)</span></span><br><span class="line">? 5</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; (lambda: 3)()  <span class="comment"># Using a lambda expression as an operator in a call exp.</span></span></span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; b = lambda x: lambda: x  <span class="comment"># Lambdas can return other lambdas!</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; c = b(88)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; c</span></span><br><span class="line">? Function</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; c()</span></span><br><span class="line">? 88</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; d = lambda f: f(4)  <span class="comment"># They can have functions as arguments as well</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; def square(x):</span></span><br><span class="line">...     return x * x</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; d(square)</span></span><br><span class="line">? 16</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Lambda the Free &gt; Suite 2 &gt; Case 2</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"></span><br><span class="line">What would Python display? If you get stuck, try it out in the Python</span><br><span class="line">interpreter!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; x = None <span class="comment"># remember to review the rules of WWPD given above!</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; x</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; lambda x: x</span></span><br><span class="line">? Function</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Lambda the Free &gt; Suite 2 &gt; Case 3</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">What would Python display? If you get stuck, try it out in the Python</span><br><span class="line">interpreter!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># Pay attention to the scope of variables</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; z = 3</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; e = lambda x: lambda y: lambda: x + y + z</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; e(0)(1)()</span></span><br><span class="line">? 4</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; f = lambda z: x + z</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; f(3)</span></span><br><span class="line">? Error</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Lambda the Free &gt; Suite 2 &gt; Case 4</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">What would Python display? If you get stuck, try it out in the Python</span><br><span class="line">interpreter!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># Try drawing an environment diagram if you get stuck!</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; higher_order_lambda = lambda f: lambda x: f(x)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; g = lambda x: x * x</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; higher_order_lambda(2)(g) <span class="comment"># Which argument belongs to which function call?</span></span></span><br><span class="line">? Error</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; higher_order_lambda(g)(2)</span></span><br><span class="line">? 4</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; call_thrice = lambda f: lambda x: f(f(f(x)))</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; call_thrice(lambda y: y + 1)(0)</span></span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; print_lambda = lambda z: <span class="built_in">print</span>(z)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; print_lambda</span></span><br><span class="line">? Function</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; one_thousand = print_lambda(1000)</span></span><br><span class="line">? 1000</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; one_thousand</span></span><br><span class="line">? None</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? Nothing</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Lambda the Free unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<h3 id="Q2-WWPD-Higher-Order-Functions"><a href="#Q2-WWPD-Higher-Order-Functions" class="headerlink" title="Q2: WWPD: Higher Order Functions"></a>Q2: WWPD: Higher Order Functions</h3><p>输入以下命令进行测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q hof-wwpd -u --local</span><br></pre></td></tr></table></figure>

<p>如果结果是函数，就输入<code>Function</code>，如果是错误就输入<code>Error</code>，如果没有输出就输入<code>Nothing</code>。</p>
<p>过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Lab 2</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Higher Order Functions &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">What would Python display? If you get stuck, try it out in the Python</span><br><span class="line">interpreter!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; def even(f):</span></span><br><span class="line">...     def odd(x):</span><br><span class="line">...         if x &lt; 0:</span><br><span class="line">...             return f(-x)</span><br><span class="line">...         return f(x)</span><br><span class="line">...     return odd</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; steven = lambda x: x</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; stewart = even(steven)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; stewart</span></span><br><span class="line">? Function</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; stewart(61)</span></span><br><span class="line">? 61</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; stewart(-4)</span></span><br><span class="line">? 4</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Higher Order Functions &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">What would Python display? If you get stuck, try it out in the Python</span><br><span class="line">interpreter!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; def cake():</span></span><br><span class="line">...    print(&#x27;beets&#x27;)</span><br><span class="line">...    def pie():</span><br><span class="line">...        print(&#x27;sweets&#x27;)</span><br><span class="line">...        return &#x27;cake&#x27;</span><br><span class="line">...    return pie</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; chocolate = cake()</span></span><br><span class="line">? beets</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; chocolate</span></span><br><span class="line">? Function</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; chocolate()</span></span><br><span class="line">(line 1)? sweets</span><br><span class="line">(line 2)? &#x27;cake&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; more_chocolate, more_cake = chocolate(), cake</span></span><br><span class="line">? sweets</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; more_chocolate</span></span><br><span class="line">? &#x27;cake&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; def snake(x, y):</span></span><br><span class="line">...    if cake == more_cake:</span><br><span class="line">...        return chocolate</span><br><span class="line">...    else:</span><br><span class="line">...        return x + y</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; snake(10, 20)</span></span><br><span class="line">? 30</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? Function</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; snake(10, 20)()</span></span><br><span class="line">(line 1)? sweets</span><br><span class="line">(line 2)? &#x27;cake&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; cake = <span class="string">&#x27;cake&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; snake(10, 20)</span></span><br><span class="line">? 30</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Higher Order Functions unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<h2 id="Coding-Practice"><a href="#Coding-Practice" class="headerlink" title="Coding Practice"></a>Coding Practice</h2><h3 id="Q3-Lambdas-and-Currying"><a href="#Q3-Lambdas-and-Currying" class="headerlink" title="Q3: Lambdas and Currying"></a>Q3: Lambdas and Currying</h3><p>实现<code>lambda_curry2(func)</code>函数，返回一个可以接收一个参数<code>x</code>的函数<code>f</code>，<code>f</code>也是一个可以接收一个参数<code>y</code>的函数<code>g</code>，最后返回<code>func(x, y)</code>。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_curry2</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns a Curried version of a two-argument function FUNC.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from operator import add, mul, mod</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; curried_add = lambda_curry2(add)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = curried_add(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(5)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; curried_mul = lambda_curry2(mul)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; mul_5 = curried_mul(5)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; mul_5(42)</span></span><br><span class="line"><span class="string">    210</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lambda_curry2(mod)(123)(10)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: <span class="keyword">lambda</span> y: func(x, y)</span><br></pre></td></tr></table></figure>

<h3 id="Q4-Count-van-Count"><a href="#Q4-Count-van-Count" class="headerlink" title="Q4: Count van Count"></a>Q4: Count van Count</h3><p>阅读<code>count_factors(n)</code>和<code>count_primes(n)</code>函数，对其进行泛化，实现一个<code>count_cond(condition)</code>函数，返回一个可以接收参数<code>n</code>的函数，调用时，能够完成上述两个函数的功能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_factors</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the number of positive factors that n has.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_factors(6)</span></span><br><span class="line"><span class="string">    4   # 1, 2, 3, 6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_factors(4)</span></span><br><span class="line"><span class="string">    3   # 1, 2, 4</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= n:</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_primes</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the number of prime numbers up to and including n.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(6)</span></span><br><span class="line"><span class="string">    3   # 2, 3, 5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(13)</span></span><br><span class="line"><span class="string">    6   # 2, 3, 5, 7, 11, 13</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= n:</span><br><span class="line">        <span class="keyword">if</span> is_prime(i):</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> count_factors(n) == <span class="number">2</span> <span class="comment"># only factors are 1 and n</span></span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_cond</span>(<span class="params">condition</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a function with one parameter N that counts all the numbers from</span></span><br><span class="line"><span class="string">    1 to N that satisfy the two-argument predicate function Condition, where</span></span><br><span class="line"><span class="string">    the first argument for Condition is N and the second argument is the</span></span><br><span class="line"><span class="string">    number from 1 to N.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_factors = count_cond(lambda n, i: n % i == 0)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_factors(2)   # 1, 2</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_factors(4)   # 1, 2, 4</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_factors(12)  # 1, 2, 3, 4, 6, 12</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime = lambda n, i: count_factors(i) == 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes = count_cond(is_prime)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(2)    # 2</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(3)    # 2, 3</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(4)    # 2, 3</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(5)    # 2, 3, 5</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; count_primes(20)   # 2, 3, 5, 7, 11, 13, 17, 19</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">n</span>):</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= n:</span><br><span class="line">            <span class="keyword">if</span> condition(n ,i):</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="keyword">return</span> func</span><br></pre></td></tr></table></figure>

<p>使用如下命令进行测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Lab 2</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Running tests</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Test summary</span><br><span class="line">    11 test cases passed! No cases failed.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<h2 id="Environment-Diagram-Practice"><a href="#Environment-Diagram-Practice" class="headerlink" title="Environment Diagram Practice"></a>Environment Diagram Practice</h2><p>这部分就是看代码画环境图，在用<code>PythonTutor</code>检查结果。</p>
<h3 id="Q5-Make-Adder"><a href="#Q5-Make-Adder" class="headerlink" title="Q5: Make Adder"></a>Q5: Make Adder</h3><p>根据以下代码画出环境图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">9</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_adder</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> k: k + n</span><br><span class="line">add_ten = make_adder(n+<span class="number">1</span>)</span><br><span class="line">result = add_ten(n)</span><br></pre></td></tr></table></figure>

<p>并回答问题：</p>
<blockquote>
<p>There are 3 frames total (including the Global frame). In addition, consider the following questions:</p>
<ol>
<li>In the Global frame, the name <code>add_ten</code> points to a function object. What is the intrinsic name of that function object, and what frame is its parent?</li>
<li>What name is frame <code>f2</code> labeled with (<code>add_ten</code> or λ)? Which frame is the parent of <code>f2</code>?</li>
<li>What value is the variable <code>result</code> bound to in the Global frame?</li>
</ol>
</blockquote>
<p>答案：</p>
<blockquote>
<ol>
<li>The intrinsic name of the function object that <code>add_ten</code> points to is λ (specifically, the lambda whose parameter is <code>k</code>). The parent frame of this lambda is <code>f1</code>.</li>
<li><code>f2</code> is labeled with the name λ. The parent frame of <code>f2</code> is <code>f1</code>, since that is where λ is defined.</li>
<li>The variable <code>result</code> is bound to 19.</li>
</ol>
</blockquote>
<p>我画的环境图：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/7bd8bd0c9a87e17693b46af88340f6f.png" alt="7bd8bd0c9a87e17693b46af88340f6f"></p>
<p>在<a href="https://pythontutor.com/cp/composingprograms.html#code=n%20%3D%209%0Adef%20make_adder%28n%29%3A%0A%20%20%20%20return%20lambda%20k%3A%20k%20%2B%20n%0Aadd_ten%20%3D%20make_adder%28n%2B1%29%0Aresult%20%3D%20add_ten%28n%29&cumulative=true&curInstr=10&mode=display&origin=composingprograms.js&py=3&rawInputLstJSON=%5B%5D">Pythontutor</a>中：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/3e7c1ab186e3cfe6accd3b18a846b4e.png" alt="3e7c1ab186e3cfe6accd3b18a846b4e"></p>
<h3 id="Q6-Lambda-the-Environment-Diagram"><a href="#Q6-Lambda-the-Environment-Diagram" class="headerlink" title="Q6: Lambda the Environment Diagram"></a>Q6: Lambda the Environment Diagram</h3><p>根据以下代码画出环境图：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="keyword">lambda</span> x: x * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">b</span>(<span class="params">b, x</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> b(x + a(x))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b(a, x)</span><br></pre></td></tr></table></figure>

<p>我画的环境图：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/99e21eee0c5e880a4f67b46aad4195e.png" alt="99e21eee0c5e880a4f67b46aad4195e"></p>
<p>在<a href="https://pythontutor.com/cp/composingprograms.html#code=a%20%3D%20lambda%20x%3A%20x%20*%202%20%2B%201%0Adef%20b%28b,%20x%29%3A%0A%20%20%20%20return%20b%28x%20%2B%20a%28x%29%29%0Ax%20%3D%203%0Ab%28a,%20x%29&cumulative=true&curInstr=13&mode=display&origin=composingprograms.js&py=3&rawInputLstJSON=%5B%5D">Python tutor</a>中：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/d32e7488dcb5a2c550b383012155461.png" alt="d32e7488dcb5a2c550b383012155461"></p>
<h2 id="Optional-Questions"><a href="#Optional-Questions" class="headerlink" title="Optional Questions"></a>Optional Questions</h2><h3 id="Q7-Composite-Identity-Function"><a href="#Q7-Composite-Identity-Function" class="headerlink" title="Q7: Composite Identity Function"></a>Q7: Composite Identity Function</h3><p>实现一个<code>composite_identity(f, g)</code>函数，返回一个接收一个参数<code>x</code>的函数<code>func</code>。当<code>f(g(x) == g(f(x))</code>时，<code>func</code>返回<code>True</code>，否则返回<code>False</code>。</p>
<p>题目已经定义好了<code>compose1(f, g)</code>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compose1</span>(<span class="params">f, g</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the composition function which given x, computes f(g(x)).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_one = lambda x: x + 1        # adds one to x</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; square = lambda x: x**2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a1 = compose1(square, add_one)   # (x + 1)^2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a1(4)</span></span><br><span class="line"><span class="string">    25</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; mul_three = lambda x: x * 3      # multiplies 3 to x</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a2 = compose1(mul_three, a1)    # ((x + 1)^2) * 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a2(4)</span></span><br><span class="line"><span class="string">    75</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a2(5)</span></span><br><span class="line"><span class="string">    108</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: f(g(x))</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">composite_identity</span>(<span class="params">f, g</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Return a function with one parameter x that returns True if f(g(x)) is</span></span><br><span class="line"><span class="string">    equal to g(f(x)). You can assume the result of g(x) is a valid input for f</span></span><br><span class="line"><span class="string">    and vice versa.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_one = lambda x: x + 1        # adds one to x</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; square = lambda x: x**2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b1 = composite_identity(square, add_one)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b1(0)                            # (0 + 1)^2 == 0^2 + 1</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b1(4)                            # (4 + 1)^2 != 4^2 + 1</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> compose1(f, g)(x) == compose1(g, f)(x)</span><br><span class="line">    <span class="keyword">return</span> func</span><br></pre></td></tr></table></figure>

<p>使用以下命令可以进行测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q composite_identity --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Lab 2</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Running tests</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Test summary</span><br><span class="line">    1 test cases passed! No cases failed.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<h3 id="Q8-I-Heard-You-Liked-Functions…"><a href="#Q8-I-Heard-You-Liked-Functions…" class="headerlink" title="Q8: I Heard You Liked Functions…"></a>Q8: I Heard You Liked Functions…</h3><p>实现一个函数<code>cycle(f1, f2, f3)</code>，返回一个接收参数<code>n</code>的函数<code>my_cycle</code>，<code>my_cycle(x)</code>函数接收一个参数<code>x</code>，循环调用<code>f1</code>、<code>f2</code>、<code>f3</code>作用于<code>x</code>上。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cycle</span>(<span class="params">f1, f2, f3</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a function that is itself a higher-order function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def add1(x):</span></span><br><span class="line"><span class="string">    ...     return x + 1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def times2(x):</span></span><br><span class="line"><span class="string">    ...     return x * 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; def add3(x):</span></span><br><span class="line"><span class="string">    ...     return x + 3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; my_cycle = cycle(add1, times2, add3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; identity = my_cycle(0)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; identity(5)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_one_then_double = my_cycle(2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_one_then_double(1)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_all_functions = my_cycle(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_all_functions(2)</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_more_than_a_cycle = my_cycle(4)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_more_than_a_cycle(2)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_two_cycles = my_cycle(6)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; do_two_cycles(1)</span></span><br><span class="line"><span class="string">    19</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">my_cycle</span>(<span class="params">n</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">x</span>):</span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> x</span><br><span class="line">            <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> f1(x)</span><br><span class="line">            <span class="keyword">elif</span> n == <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> f2(f1(x))</span><br><span class="line">            <span class="keyword">elif</span> n == <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span> f3(f2(f1(x)))</span><br><span class="line">            <span class="keyword">elif</span> n % <span class="number">3</span> == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> f1(my_cycle(n - <span class="number">1</span>)(x))</span><br><span class="line">            <span class="keyword">elif</span> n % <span class="number">3</span> == <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> f2(f1(my_cycle(n - <span class="number">2</span>)(x)))</span><br><span class="line">            <span class="keyword">elif</span> n % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> f3(f2(f1(my_cycle(n - <span class="number">3</span>)(x))))</span><br><span class="line">        <span class="keyword">return</span> func</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> my_cycle</span><br></pre></td></tr></table></figure>

<p>使用以下命令可以进行测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q cycle --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Lab 2</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Running tests</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Test summary</span><br><span class="line">    1 test cases passed! No cases failed.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A</category>
        <category>Lab</category>
      </categories>
  </entry>
  <entry>
    <title>CS61A Homework02</title>
    <url>/2024/06/09/CS61A-Homework02/</url>
    <content><![CDATA[<h2 id="Homework-2-Higher-Order-Functions"><a href="#Homework-2-Higher-Order-Functions" class="headerlink" title="Homework 2: Higher Order Functions"></a>Homework 2: Higher Order Functions</h2><h3 id="Important-Functions"><a href="#Important-Functions" class="headerlink" title="Important Functions"></a>Important Functions</h3><p>一些文档测试可能基于以下函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, mul, sub</span><br><span class="line"></span><br><span class="line">square = <span class="keyword">lambda</span> x: x * x</span><br><span class="line"></span><br><span class="line">identity = <span class="keyword">lambda</span> x: x</span><br><span class="line"></span><br><span class="line">triple = <span class="keyword">lambda</span> x: <span class="number">3</span> * x</span><br><span class="line"></span><br><span class="line">increment = <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="Q1-Product"><a href="#Q1-Product" class="headerlink" title="Q1: Product"></a>Q1: Product</h3><p>仿照能够计算<code>term(1) + ... + term(n)</code>的<code>summation(n, term)</code>函数，编写一个能够计算<code>term(1) * ... * term(n)</code>的<code>product(n, term)</code>函数。</p>
<p>思路：注意<code>range</code>函数的区间是左闭右开的。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">product</span>(<span class="params">n, term</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the product of the first n terms in a sequence.</span></span><br><span class="line"><span class="string">    n -- a positive integer</span></span><br><span class="line"><span class="string">    term -- a function that takes one argument to produce the term</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(3, identity)  # 1 * 2 * 3</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(5, identity)  # 1 * 2 * 3 * 4 * 5</span></span><br><span class="line"><span class="string">    120</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(3, square)    # 1^2 * 2^2 * 3^2</span></span><br><span class="line"><span class="string">    36</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(5, square)    # 1^2 * 2^2 * 3^2 * 4^2 * 5^2</span></span><br><span class="line"><span class="string">    14400</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(3, increment) # (1+1) * (2+1) * (3+1)</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product(3, triple)    # 1*3 * 2*3 * 3*3</span></span><br><span class="line"><span class="string">    162</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    pdt = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        pdt *= term(i)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> pdt</span><br></pre></td></tr></table></figure>

<h3 id="Q2-Accumulate"><a href="#Q2-Accumulate" class="headerlink" title="Q2: Accumulate"></a>Q2: Accumulate</h3><p>在<code>product</code>和<code>summation</code>函数的基础上，进行泛化，<code>combiner</code>参数指定运算符，<code>base</code>参数指定初始值。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">accumulate</span>(<span class="params">combiner, base, n, term</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the result of combining the first n terms in a sequence and base.</span></span><br><span class="line"><span class="string">    The terms to be combined are term(1), term(2), ..., term(n).  combiner is a</span></span><br><span class="line"><span class="string">    two-argument commutative function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5</span></span><br><span class="line"><span class="string">    26</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(add, 11, 0, identity) # 11</span></span><br><span class="line"><span class="string">    11</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2</span></span><br><span class="line"><span class="string">    25</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(mul, 2, 3, square)    # 2 * 1^2 * 2^2 * 3^2</span></span><br><span class="line"><span class="string">    72</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(lambda x, y: x + y + 1, 2, 3, square)</span></span><br><span class="line"><span class="string">    19</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(lambda x, y: 2 * (x + y), 2, 3, square)</span></span><br><span class="line"><span class="string">    58</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accumulate(lambda x, y: (x + y) % 17, 19, 20, square)</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        base = combiner(base, term(i))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> base</span><br></pre></td></tr></table></figure>

<p>实现<code>accumulate</code>函数之后，用该函数实现<code>product</code>和<code>summation</code>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">summation_using_accumulate</span>(<span class="params">n, term</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the sum of term(1) + ... + term(n). The implementation</span></span><br><span class="line"><span class="string">    uses accumulate.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation_using_accumulate(5, square)</span></span><br><span class="line"><span class="string">    55</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation_using_accumulate(5, triple)</span></span><br><span class="line"><span class="string">    45</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban iteration and recursion</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;summation_using_accumulate&#x27;,</span></span><br><span class="line"><span class="string">    ...       [&#x27;Recursion&#x27;, &#x27;For&#x27;, &#x27;While&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> accumulate(add, <span class="number">0</span>, n, term)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">product_using_accumulate</span>(<span class="params">n, term</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;An implementation of product using accumulate.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product_using_accumulate(4, square)</span></span><br><span class="line"><span class="string">    576</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; product_using_accumulate(6, triple)</span></span><br><span class="line"><span class="string">    524880</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban iteration and recursion</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;product_using_accumulate&#x27;,</span></span><br><span class="line"><span class="string">    ...       [&#x27;Recursion&#x27;, &#x27;For&#x27;, &#x27;While&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> accumulate(mul, <span class="number">1</span>, n, term)</span><br></pre></td></tr></table></figure>

<h3 id="Q3-Make-Repeater"><a href="#Q3-Make-Repeater" class="headerlink" title="Q3: Make Repeater"></a>Q3: Make Repeater</h3><p>实现<code>make_repeater(func, n)(x)</code>函数，返回<code>func(func(...func(x)...))</code>，其中有n个<code>func</code>.</p>
<p>思路：使用上述实现的<code>accumulate</code>和<code>compose1</code>函数可以很容易得到目标函数，也可以循环嵌套得到。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_repeater</span>(<span class="params">func, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the function that computes the nth application of func.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = make_repeater(increment, 3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(5)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_repeater(triple, 5)(1) # 3 * 3 * 3 * 3 * 3 * 1</span></span><br><span class="line"><span class="string">    243</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_repeater(square, 2)(5) # square(square(5))</span></span><br><span class="line"><span class="string">    625</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_repeater(square, 4)(5) # square(square(square(square(5))))</span></span><br><span class="line"><span class="string">    152587890625</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; make_repeater(square, 0)(5) # Yes, it makes sense to apply the function zero times!</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># return accumulate(compose1, lambda x : x, n, lambda x : func)</span></span><br><span class="line"></span><br><span class="line">    base = <span class="keyword">lambda</span> x : x</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        base = compose1(base, func)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> base</span><br></pre></td></tr></table></figure>

<p>使用如下命令进行测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Homework 2</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Running tests</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Test summary</span><br><span class="line">    5 test cases passed! No cases failed.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<h3 id="Q4-Church-numerals"><a href="#Q4-Church-numerals" class="headerlink" title="Q4: Church numerals"></a>Q4: Church numerals</h3><p>使用高阶函数（<code>Higher Order Function</code>）构造一个简单的丘奇代数系统。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">zero</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">successor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(n(f)(x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">one</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Church numeral 1: same as successor(zero)&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: f(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">two</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Church numeral 2: same as successor(successor(zero))&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: f(f(x))</span><br><span class="line"></span><br><span class="line">three = successor(two)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">church_to_int</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Convert the Church numeral n to a Python integer.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(zero)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(one)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(two)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(three)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    f = <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n(f)(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_church</span>(<span class="params">m, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the Church numeral for m + n, for Church numerals m and n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(add_church(two, three))</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">f</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span> x: m(f)(n(f)(x))</span><br><span class="line">    <span class="keyword">return</span> func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_church</span>(<span class="params">m, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the Church numeral for m * n, for Church numerals m and n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; four = successor(three)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(mul_church(two, three))</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(mul_church(three, four))</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    base = zero</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, church_to_int(n)):</span><br><span class="line">        base = add_church(base, m)</span><br><span class="line">    <span class="keyword">return</span> base</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pow_church</span>(<span class="params">m, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the Church numeral m ** n, for Church numerals m and n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(pow_church(two, three))</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(pow_church(three, two))</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    base = one</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, church_to_int(n)):</span><br><span class="line">        base = mul_church(base, m)</span><br><span class="line">    <span class="keyword">return</span> base</span><br></pre></td></tr></table></figure>

<p>使用如下命令进行测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q church_to_int</span><br><span class="line">python3 ok -q add_church</span><br><span class="line">python3 ok -q mul_church</span><br><span class="line">python3 ok -q pow_church</span><br></pre></td></tr></table></figure>

<p>结果如下（4个结果都是一样的）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rex@rex-virtual-machine:~/CS61A/HW/HW02/hw02$ python3 ok -q mul_church --local</span><br><span class="line">=====================================================================</span><br><span class="line">Assignment: Homework 2</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Running tests</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Test summary</span><br><span class="line">    1 test cases passed! No cases failed.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CS61A</category>
        <category>Homework</category>
      </categories>
  </entry>
  <entry>
    <title>CS61A Lab01</title>
    <url>/2024/06/09/CS61A-Lab01/</url>
    <content><![CDATA[<h2 id="Lab-1-Variables-Functions-Control"><a href="#Lab-1-Variables-Functions-Control" class="headerlink" title="Lab 1: Variables &amp; Functions, Control"></a>Lab 1: Variables &amp; Functions, Control</h2><h3 id="What-Would-Python-Display-WWPD-Part-1"><a href="#What-Would-Python-Display-WWPD-Part-1" class="headerlink" title="What Would Python Display(WWPD)? (Part 1)"></a>What Would Python Display(WWPD)? (Part 1)</h3><h4 id="Q1-WWPD-Control"><a href="#Q1-WWPD-Control" class="headerlink" title="Q1: WWPD: Control"></a>Q1: WWPD: Control</h4><p>使用如下命令进行测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q control -u --local</span><br></pre></td></tr></table></figure>

<p>需要注意：</p>
<ul>
<li>若用整型或浮点型做控制语句的判断条件，<code>0</code>会被当作<code>False</code>，<code>非0</code>会被当作<code>True</code></li>
</ul>
<p>测试过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Lab 1</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Control &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 5)</span><br><span class="line"></span><br><span class="line">What would Python display? If you get stuck, try it out in the Python</span><br><span class="line">interpreter!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; def xk(c, d):</span></span><br><span class="line">...     if c == 4:</span><br><span class="line">...         return 6</span><br><span class="line">...     elif d &gt;= 4:</span><br><span class="line">...         return 6 + 7 + c</span><br><span class="line">...     else:</span><br><span class="line">...         return 25</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; xk(10, 10)</span></span><br><span class="line">? 23</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; xk(10, 6)</span></span><br><span class="line">? 19</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? 23</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; xk(4, 6)</span></span><br><span class="line">? 6</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; xk(0, 0)</span></span><br><span class="line">? 25</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Control &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"></span><br><span class="line">What would Python display? If you get stuck, try it out in the Python</span><br><span class="line">interpreter!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; def how_big(x):</span></span><br><span class="line">...     if x &gt; 10:</span><br><span class="line">...         print(&#x27;huge&#x27;)</span><br><span class="line">...     elif x &gt; 5:</span><br><span class="line">...         return &#x27;big&#x27;</span><br><span class="line">...     elif x &gt; 0:</span><br><span class="line">...         print(&#x27;small&#x27;)</span><br><span class="line">...     else:</span><br><span class="line">...         print(&quot;nothin&quot;)</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; how_big(7)</span></span><br><span class="line">? big</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? &#x27;big&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; how_big(12)</span></span><br><span class="line">? &#x27;huge&#x27;</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? huge</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; how_big(1)</span></span><br><span class="line">? small</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; how_big(-1)</span></span><br><span class="line">? nothin</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Control &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"></span><br><span class="line">What would Python display? If you get stuck, try it out in the Python</span><br><span class="line">interpreter!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; n = 3</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="keyword">while</span> n &gt;= 0:  <span class="comment"># If this loops forever, just type Infinite Loop</span></span></span><br><span class="line">...     n -= 1</span><br><span class="line">...     print(n)</span><br><span class="line">(line 1)? 2</span><br><span class="line">(line 2)? 1</span><br><span class="line">(line 3)? 0</span><br><span class="line">(line 4)? -1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Control &gt; Suite 2 &gt; Case 2</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">What would Python display? If you get stuck, try it out in the Python</span><br><span class="line">interpreter!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; positive = 28</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="keyword">while</span> positive: <span class="comment"># If this loops forever, just type Infinite Loop</span></span></span><br><span class="line">...    print(&quot;positive?&quot;)</span><br><span class="line">...    positive -= 3</span><br><span class="line">? positive</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? positive?</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? Infinite Loop</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Control &gt; Suite 2 &gt; Case 3</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">What would Python display? If you get stuck, try it out in the Python</span><br><span class="line">interpreter!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; positive = -9</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; negative = -12</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="keyword">while</span> negative: <span class="comment"># If this loops forever, just type Infinite Loop</span></span></span><br><span class="line">...    if positive:</span><br><span class="line">...        print(negative)</span><br><span class="line">...    positive += 3</span><br><span class="line">...    negative += 3</span><br><span class="line">(line 1)? Infinite Loop</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">(line 1)? -12</span><br><span class="line">(line 2)? -9</span><br><span class="line">(line 3)? -6</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Control unlocked.</span><br></pre></td></tr></table></figure>

<h4 id="Q2-WWPD-Veritasiness"><a href="#Q2-WWPD-Veritasiness" class="headerlink" title="Q2: WWPD: Veritasiness"></a>Q2: WWPD: Veritasiness</h4><p>使用如下命令进行测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q short-circuit -u --local</span><br></pre></td></tr></table></figure>

<p>需要注意：</p>
<ul>
<li><code>and</code>和<code>or</code>运算符有<strong>短路性</strong></li>
</ul>
<p>测试过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Lab 1</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Veritasiness &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"></span><br><span class="line">What would Python display? If you get stuck, try it out in the Python</span><br><span class="line">interpreter!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; True and 13</span></span><br><span class="line">? 13</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; False or 0</span></span><br><span class="line">? 0</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; not 10</span></span><br><span class="line">? False</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; not None</span></span><br><span class="line">? True</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Veritasiness &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">What would Python display? If you get stuck, try it out in the Python</span><br><span class="line">interpreter!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; True and 1 / 0 and False  <span class="comment"># If this errors, just type Error.</span></span></span><br><span class="line">? Error</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; True or 1 / 0 or False  <span class="comment"># If this errors, just type Error.</span></span></span><br><span class="line">? True</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; True and 0  <span class="comment"># If this errors, just type Error.</span></span></span><br><span class="line">? 0</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; False or 1  <span class="comment"># If this errors, just type Error.</span></span></span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 1 and 3 and 6 and 10 and 15  <span class="comment"># If this errors, just type Error.</span></span></span><br><span class="line">? 15</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; -1 and 1 &gt; 0 <span class="comment"># If this errors, just type Error.</span></span></span><br><span class="line">? True</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 0 or False or 2 or 1 / 0  <span class="comment"># If this errors, just type Error.</span></span></span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Veritasiness &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">What would Python display? If you get stuck, try it out in the Python</span><br><span class="line">interpreter!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; not 0</span></span><br><span class="line">? True</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; (1 + 1) and 1  <span class="comment"># If this errors, just type Error. If this is blank, just type Nothing.</span></span></span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; 1/0 or True  <span class="comment"># If this errors, just type Error. If this is blank, just type Nothing.</span></span></span><br><span class="line">? Error</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; (True or False) and False  <span class="comment"># If this errors, just type Error. If this is blank, just type Nothing.</span></span></span><br><span class="line">? False</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Veritasiness unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<h4 id="Q3-Debugging-Quiz"><a href="#Q3-Debugging-Quiz" class="headerlink" title="Q3: Debugging Quiz!"></a>Q3: Debugging Quiz!</h4><p>使用如下命令进行测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q debugging-quiz -u --local</span><br></pre></td></tr></table></figure>

<p>需要注意：</p>
<ul>
<li><code>Traceback</code>中，越后打印的函数就是越晚调用的</li>
<li>在输出的内容前加上<code>&quot;DEBUG: &quot;</code>，<code>ok</code>测评器会忽略改行输出</li>
<li>在程序运行出错时，中止程序，抛出异常，好过打印错误信息</li>
</ul>
<p>测试过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Lab 1</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">debugging-quiz &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 12)</span><br><span class="line"></span><br><span class="line">Q: In the following traceback, what is the most recent function call?</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    File &quot;temp.py&quot;, line 10, in &lt;module&gt;</span><br><span class="line">      f(&quot;hi&quot;)</span><br><span class="line">    File &quot;temp.py&quot;, line 2, in f</span><br><span class="line">      return g(x + x, x)</span><br><span class="line">    File &quot;temp.py&quot;, line 5, in g</span><br><span class="line">      return h(x + y * 5)</span><br><span class="line">    File &quot;temp.py&quot;, line 8, in h</span><br><span class="line">      return x + 0</span><br><span class="line">  TypeError: must be str, not int</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) g(x + x, x)</span><br><span class="line">1) h(x + y * 5)</span><br><span class="line">2) f(&quot;hi&quot;)</span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">debugging-quiz &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 11)</span><br><span class="line"></span><br><span class="line">Q: In the following traceback, what is the cause of this error?</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    File &quot;temp.py&quot;, line 10, in &lt;module&gt;</span><br><span class="line">      f(&quot;hi&quot;)</span><br><span class="line">    File &quot;temp.py&quot;, line 2, in f</span><br><span class="line">      return g(x + x, x)</span><br><span class="line">    File &quot;temp.py&quot;, line 5, in g</span><br><span class="line">      return h(x + y * 5)</span><br><span class="line">    File &quot;temp.py&quot;, line 8, in h</span><br><span class="line">      return x + 0</span><br><span class="line">  TypeError: must be str, not int</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) the code looped infinitely</span><br><span class="line">1) there was a missing return statement</span><br><span class="line">2) the code attempted to add a string to an integer</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">debugging-quiz &gt; Suite 1 &gt; Case 3</span><br><span class="line">(cases remaining: 10)</span><br><span class="line"></span><br><span class="line">Q: How do you write a doctest asserting that square(2) == 4?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) def square(x):</span><br><span class="line">       &#x27;&#x27;&#x27;</span><br><span class="line">       square(2)</span><br><span class="line">       4</span><br><span class="line">       &#x27;&#x27;&#x27;</span><br><span class="line">       return x * x</span><br><span class="line">1) def square(x):</span><br><span class="line">       &#x27;&#x27;&#x27;</span><br><span class="line">       input: 2</span><br><span class="line">       output: 4</span><br><span class="line">       &#x27;&#x27;&#x27;</span><br><span class="line">       return x * x</span><br><span class="line">2) def square(x):</span><br><span class="line">       &#x27;&#x27;&#x27;</span><br><span class="line">       &gt;&gt;&gt; square(2)</span><br><span class="line">       4</span><br><span class="line">       &#x27;&#x27;&#x27;</span><br><span class="line">       return x * x</span><br><span class="line">3) def square(x):</span><br><span class="line">       &#x27;&#x27;&#x27;</span><br><span class="line">       doctest: (2, 4)</span><br><span class="line">       &#x27;&#x27;&#x27;</span><br><span class="line">       return x * x</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">debugging-quiz &gt; Suite 1 &gt; Case 4</span><br><span class="line">(cases remaining: 9)</span><br><span class="line"></span><br><span class="line">Q: When should you use print statements?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) To investigate the values of variables at certain points in your code</span><br><span class="line">1) For permanant debugging so you can have long term confidence in your code</span><br><span class="line">2) To ensure that certain conditions are true at certain points in your code</span><br><span class="line">? 0</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">debugging-quiz &gt; Suite 1 &gt; Case 5</span><br><span class="line">(cases remaining: 8)</span><br><span class="line"></span><br><span class="line">Q: How do you prevent the ok autograder from interpreting print statements as output?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) You don&#x27;t need to do anything, ok only looks at returned values, not printed values</span><br><span class="line">1) Print with # at the front of the outputted line</span><br><span class="line">2) Print with &#x27;DEBUG:&#x27; at the front of the outputted line</span><br><span class="line">? 0</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) You don&#x27;t need to do anything, ok only looks at returned values, not printed values</span><br><span class="line">1) Print with # at the front of the outputted line</span><br><span class="line">2) Print with &#x27;DEBUG:&#x27; at the front of the outputted line</span><br><span class="line">? 1</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) You don&#x27;t need to do anything, ok only looks at returned values, not printed values</span><br><span class="line">1) Print with # at the front of the outputted line</span><br><span class="line">2) Print with &#x27;DEBUG:&#x27; at the front of the outputted line</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">debugging-quiz &gt; Suite 1 &gt; Case 6</span><br><span class="line">(cases remaining: 7)</span><br><span class="line"></span><br><span class="line">Q: What is the best way to open an interactive terminal to investigate a failing test for question sum_digits in assignment lab01?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) python3 ok -q sum_digits --trace</span><br><span class="line">1) python3 -i lab01.py</span><br><span class="line">2) python3 ok -q sum_digits -i</span><br><span class="line">3) python3 ok -q sum_digits</span><br><span class="line">? 1</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) python3 ok -q sum_digits --trace</span><br><span class="line">1) python3 -i lab01.py</span><br><span class="line">2) python3 ok -q sum_digits -i</span><br><span class="line">3) python3 ok -q sum_digits</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">debugging-quiz &gt; Suite 1 &gt; Case 7</span><br><span class="line">(cases remaining: 6)</span><br><span class="line"></span><br><span class="line">Q: What is the best way to look at an environment diagram to investigate a failing test for question sum_digits in assignment lab01?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) python3 ok -q sum_digits</span><br><span class="line">1) python3 ok -q sum_digits --trace</span><br><span class="line">2) python3 ok -q sum_digits -i</span><br><span class="line">3) python3 -i lab01.py</span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">debugging-quiz &gt; Suite 1 &gt; Case 8</span><br><span class="line">(cases remaining: 5)</span><br><span class="line"></span><br><span class="line">Q: Which of the following is NOT true?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) It is generally bad practice to release code with debugging print statements left in</span><br><span class="line">1) Debugging is not a substitute for testing</span><br><span class="line">2) It is generally good practice to release code with assertion statements left in</span><br><span class="line">3) Code that returns a wrong answer instead of crashing is generally better as it at least works fine</span><br><span class="line">4) Testing is very important to ensure robust code</span><br><span class="line">? 0</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) It is generally bad practice to release code with debugging print statements left in</span><br><span class="line">1) Debugging is not a substitute for testing</span><br><span class="line">2) It is generally good practice to release code with assertion statements left in</span><br><span class="line">3) Code that returns a wrong answer instead of crashing is generally better as it at least works fine</span><br><span class="line">4) Testing is very important to ensure robust code</span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">debugging-quiz &gt; Suite 1 &gt; Case 9</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"></span><br><span class="line">Q: You get a SyntaxError. What is most likely to have happened?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) You typed a variable name incorrectly</span><br><span class="line">1) You forgot a return statement</span><br><span class="line">2) Your indentation mixed tabs and spaces</span><br><span class="line">3) You had an unmatched parenthesis</span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">debugging-quiz &gt; Suite 1 &gt; Case 10</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"></span><br><span class="line">Q: You get a IndentationError. What is most likely to have happened?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) You had an unmatched parenthesis</span><br><span class="line">1) You typed a variable name incorrectly</span><br><span class="line">2) Your indentation mixed tabs and spaces</span><br><span class="line">3) You forgot a return statement</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">debugging-quiz &gt; Suite 1 &gt; Case 11</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">Q: You get a TypeError: ... &#x27;NoneType&#x27; object is not ... . What is most likely to have happened?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) You typed a variable name incorrectly</span><br><span class="line">1) Your indentation mixed tabs and spaces</span><br><span class="line">2) You had an unmatched parenthesis</span><br><span class="line">3) You forgot a return statement</span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">debugging-quiz &gt; Suite 1 &gt; Case 12</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">Q: You get a NameError. What is most likely to have happened?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) You had an unmatched parenthesis</span><br><span class="line">1) You typed a variable name incorrectly</span><br><span class="line">2) You forgot a return statement</span><br><span class="line">3) Your indentation mixed tabs and spaces</span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for debugging-quiz unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<h3 id="Coding-Practice"><a href="#Coding-Practice" class="headerlink" title="Coding Practice"></a>Coding Practice</h3><h4 id="Q4-Falling-Factorial"><a href="#Q4-Falling-Factorial" class="headerlink" title="Q4: Falling Factorial"></a>Q4: Falling Factorial</h4><blockquote>
<p>Let’s write a function <code>falling</code>, which is a “falling” factorial that takes two arguments, <code>n</code> and <code>k</code>, and returns the product of <code>k</code> consecutive numbers, starting from <code>n</code> and working downwards. When <code>k</code> is 0, the function should return 1.</p>
</blockquote>
<p>思路：简单的循环语法题，记得给<code>ans</code>赋初值</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">falling</span>(<span class="params">n, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Compute the falling factorial of n to depth k.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(6, 3)  # 6 * 5 * 4</span></span><br><span class="line"><span class="string">    120</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 3)  # 4 * 3 * 2</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 1)  # 4</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; falling(4, 0)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    ans = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &gt; <span class="number">0</span>:</span><br><span class="line">        ans *= n</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">        k -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

<h4 id="Q5-Sum-Digits"><a href="#Q5-Sum-Digits" class="headerlink" title="Q5: Sum Digits"></a>Q5: Sum Digits</h4><blockquote>
<p>Write a function that takes in a nonnegative integer and sums its digits. (Using floor division and modulo might be helpful here!)</p>
</blockquote>
<p>思路：简单的循环语法题，把每位的数加在一起，得到答案</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_digits</span>(<span class="params">y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sum all the digits of y.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(10) # 1 + 0 = 1</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(4224) # 4 + 2 + 2 + 4 = 12</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_digits(1234567890)</span></span><br><span class="line"><span class="string">    45</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = sum_digits(123) # make sure that you are using return rather than print</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> y &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">sum</span> += y % <span class="number">10</span></span><br><span class="line">        y //= <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure>

<h3 id="Extra-Practice"><a href="#Extra-Practice" class="headerlink" title="Extra Practice"></a>Extra Practice</h3><blockquote>
<p>These questions are optional and will not affect your score on this assignment. However, they are <strong>great practice</strong> for future assignments, projects, and exams. Attempting these questions is valuable in helping cement your knowledge of course concepts, and it’s fun!</p>
</blockquote>
<h4 id="Q6-WWPD-What-If"><a href="#Q6-WWPD-What-If" class="headerlink" title="Q6: WWPD: What If?"></a>Q6: WWPD: What If?</h4><p>使用如下命令进行测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q if-statements -u --local</span><br></pre></td></tr></table></figure>

<p>需要注意：</p>
<p><code>print()</code>打印字符串不会有<code>&quot;</code>或<code>&#39;</code>，但字符串做返回值会有<code>&quot;</code>或<code>&#39;</code>。</p>
<p>测试过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Lab 1</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">What If? &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">What would Python display? If you get stuck, try it out in the Python</span><br><span class="line">interpreter!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; def ab(c, d):</span></span><br><span class="line">...     if c &gt; 5:</span><br><span class="line">...         print(c)</span><br><span class="line">...     elif c &gt; 7:</span><br><span class="line">...         print(d)</span><br><span class="line">...     print(&#x27;foo&#x27;)</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; ab(10, 20)</span></span><br><span class="line">(line 1)? 10</span><br><span class="line">(line 2)? foo</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">What If? &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">What would Python display? If you get stuck, try it out in the Python</span><br><span class="line">interpreter!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; def bake(cake, make):</span></span><br><span class="line">...    if cake == 0:</span><br><span class="line">...        cake = cake + 1</span><br><span class="line">...        print(cake)</span><br><span class="line">...    if cake == 1:</span><br><span class="line">...        print(make)</span><br><span class="line">...    else:</span><br><span class="line">...        return cake</span><br><span class="line">...    return make</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; bake(0, 29)</span></span><br><span class="line">(line 1)? 1</span><br><span class="line">(line 2)? 29</span><br><span class="line">(line 3)? 29</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; bake(1, <span class="string">&quot;mashed potatoes&quot;</span>)</span></span><br><span class="line">(line 1)? mashed potatoes</span><br><span class="line">(line 2)? &quot;mashed potatoes&quot;</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for What If? unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<h4 id="Q7-Double-Eights"><a href="#Q7-Double-Eights" class="headerlink" title="Q7: Double Eights"></a>Q7: Double Eights</h4><blockquote>
<p>Write a function that takes in a number and determines if the digits contain two adjacent 8s.</p>
</blockquote>
<p>思路：检查<code>n</code>的低2位是否是<code>88</code>，然后除<code>10</code>，直到<code>n</code>变成个位数。</p>
<p>实现代码如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">def double_eights(n):</span><br><span class="line">    &quot;&quot;&quot;Return true if n has two eights in a row.</span><br><span class="line">    &gt;&gt;&gt; double_eights(8)</span><br><span class="line">    False</span><br><span class="line">    &gt;&gt;&gt; double_eights(88)</span><br><span class="line">    True</span><br><span class="line">    &gt;&gt;&gt; double_eights(2882)</span><br><span class="line">    True</span><br><span class="line">    &gt;&gt;&gt; double_eights(880088)</span><br><span class="line">    True</span><br><span class="line">    &gt;&gt;&gt; double_eights(12345)</span><br><span class="line">    False</span><br><span class="line">    &gt;&gt;&gt; double_eights(80808080)</span><br><span class="line">    False</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">    while n &gt;= 10:</span><br><span class="line">        if n % 100 == 88:</span><br><span class="line">            return True</span><br><span class="line">        n //= 10</span><br><span class="line">    return False</span><br></pre></td></tr></table></figure>

<p>使用如下命令测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q double_eights --local</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Lab 1</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Running tests</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Test summary</span><br><span class="line">    1 test cases passed! No cases failed.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<h3 id="最终测试（不包括Extra-Practice）"><a href="#最终测试（不包括Extra-Practice）" class="headerlink" title="最终测试（不包括Extra Practice）"></a>最终测试（不包括<code>Extra Practice</code>）</h3><p>使用如下命令测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python ok --local</span><br></pre></td></tr></table></figure>

<p>测试结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Lab <span class="number">1</span></span><br><span class="line">OK, version v1<span class="number">.18</span><span class="number">.1</span></span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Running tests</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Test summary</span><br><span class="line">    <span class="number">22</span> test cases passed! No cases failed.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok <span class="keyword">with</span> --local.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CS61A</category>
        <category>Lab</category>
      </categories>
  </entry>
  <entry>
    <title>CS61A 课程笔记 Week05</title>
    <url>/2024/06/12/CS61A-CourseNote-Week05/</url>
    <content><![CDATA[<h3 id="Lecture-12-Dictionaries-Matrices-and-Trees："><a href="#Lecture-12-Dictionaries-Matrices-and-Trees：" class="headerlink" title="Lecture #12: Dictionaries, Matrices, and Trees："></a>Lecture #12: Dictionaries, Matrices, and Trees：</h3><h4 id="抽象层次的复习（Review-Layers-of-abstraction）"><a href="#抽象层次的复习（Review-Layers-of-abstraction）" class="headerlink" title="抽象层次的复习（Review: Layers of abstraction）"></a>抽象层次的复习（<code>Review: Layers of abstraction</code>）</h4><p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image10.png"></p>
<h4 id="Python类型的复习（Review-Python-types）"><a href="#Python类型的复习（Review-Python-types）" class="headerlink" title="Python类型的复习（Review: Python types）"></a><code>Python</code>类型的复习（<code>Review: Python types</code>）</h4><p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image11.png"></p>
<h4 id="字典（Dictionary）"><a href="#字典（Dictionary）" class="headerlink" title="字典（Dictionary）"></a>字典（<code>Dictionary</code>）</h4><p><strong>字典</strong>是一种可修改的<strong>键-值对</strong>映射（<code>key-value pair</code>）。</p>
<p>可以使用<code>Key in Dict</code>检查某个<code>Key</code>是否是字典的键，若是，返回<code>True</code>；若不是，返回<code>False</code>。</p>
<p><code>eg</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dictionaries</span></span><br><span class="line"></span><br><span class="line">states = &#123;</span><br><span class="line">	<span class="string">&quot;CA&quot;</span>: <span class="string">&quot;California&quot;</span>,</span><br><span class="line">	<span class="string">&quot;DE&quot;</span>: <span class="string">&quot;Delaware&quot;</span>,</span><br><span class="line">	<span class="string">&quot;NY&quot;</span>: <span class="string">&quot;New York&quot;</span>,</span><br><span class="line">	<span class="string">&quot;TX&quot;</span>: <span class="string">&quot;Texas&quot;</span>,</span><br><span class="line">	<span class="string">&quot;WY&quot;</span>: <span class="string">&quot;Wyoming&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(states))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;CA&quot;</span> <span class="keyword">in</span> states)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ZZ&quot;</span> <span class="keyword">in</span> states)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<h4 id="选择字典元素（Dictionary-selection）"><a href="#选择字典元素（Dictionary-selection）" class="headerlink" title="选择字典元素（Dictionary selection）"></a>选择字典元素（<code>Dictionary selection</code>）</h4><p>字典的<code>Key</code>是不可修改的类型，如<strong>字符串</strong>、<strong>元组</strong>，<strong>列表</strong>、<strong>字典</strong>不可以作为<code>Key</code>。</p>
<p>使用<code>Dict[Key]</code>可以得到字典的值，若<code>Key</code>不存在，会返回<code>KeyError</code>。</p>
<p>字典内置的<code>get(key, str)</code>，会使用<code>key</code>作为键在字典中查找，若存在，返回对应的值；若不存在，返回<code>str</code>，这样不会检索字典中不存在的键不会引发错误。</p>
<p><code>eg</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dictionary selection</span></span><br><span class="line"></span><br><span class="line">words = &#123;</span><br><span class="line">	<span class="string">&quot;mÃ¡s&quot;</span>: <span class="string">&quot;more&quot;</span>,</span><br><span class="line">	<span class="string">&quot;otro&quot;</span>: <span class="string">&quot;other&quot;</span>,</span><br><span class="line">	<span class="string">&quot;agua&quot;</span>: <span class="string">&quot;water&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(words[<span class="string">&quot;otro&quot;</span>])</span><br><span class="line">first_word = <span class="string">&quot;agua&quot;</span></span><br><span class="line"><span class="built_in">print</span>(words[first_word])</span><br><span class="line"><span class="comment"># words[&quot;pavo&quot;] - error!</span></span><br><span class="line"><span class="built_in">print</span>(words.get(<span class="string">&quot;pavo&quot;</span>, <span class="string">&quot;ðŸ¤”&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">other</span><br><span class="line">water</span><br><span class="line">ðŸ¤”</span><br></pre></td></tr></table></figure>

<h4 id="修改字典（Dictionary-mutation）"><a href="#修改字典（Dictionary-mutation）" class="headerlink" title="修改字典（Dictionary mutation）"></a>修改字典（<code>Dictionary mutation</code>）</h4><p>字典的值可以通过赋值语句修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dictionary - mutating</span></span><br><span class="line">users = &#123;&#125;</span><br><span class="line">users[<span class="string">&quot;profpamela&quot;</span>] = <span class="string">&quot;b3stp@ssEvErDontHackMe&quot;</span></span><br><span class="line">users[<span class="string">&quot;profpamela&quot;</span>] += <span class="string">&quot;itsLongerSoItsMoreSecure!!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(users[<span class="string">&quot;profpamela&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">b3stp@ssEvErDontHackMeitsLongerSoItsMoreSecure!!</span><br></pre></td></tr></table></figure>

<p>字典可以作为另一字典的值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dict of dicts</span></span><br><span class="line">spiders = &#123;</span><br><span class="line">  <span class="string">&quot;smeringopus&quot;</span>: &#123;</span><br><span class="line">	  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Pale Daddy Long-leg&quot;</span>,</span><br><span class="line">	  <span class="string">&quot;length&quot;</span>: <span class="number">7</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;holocnemus pluchei&quot;</span>: &#123;</span><br><span class="line">	  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Marbled cellar spider&quot;</span>,</span><br><span class="line">	  <span class="string">&quot;length&quot;</span>: (<span class="number">5</span>, <span class="number">7</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字典的迭代器"><a href="#字典的迭代器" class="headerlink" title="字典的迭代器"></a>字典的迭代器</h4><p>字典的迭代器是字典的键，迭代顺序是插入顺序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dictionary iteration</span></span><br><span class="line">insects = &#123;<span class="string">&quot;spiders&quot;</span>: <span class="number">8</span>, <span class="string">&quot;centipedes&quot;</span>: <span class="number">100</span>, <span class="string">&quot;bees&quot;</span>: <span class="number">6</span>&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> insects:</span><br><span class="line">    <span class="built_in">print</span>(insects[name])</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">100</span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<h4 id="矩阵（Matrices）"><a href="#矩阵（Matrices）" class="headerlink" title="矩阵（Matrices）"></a>矩阵（<code>Matrices</code>）</h4><p>矩阵是一张二维的表，有行和列：</p>
<p>数据抽象如下：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image12.png"></p>
<p>本课程介绍了多种实现方法，外部调用都是一样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Matrix- Implementation A</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix</span>(<span class="params">rows, cols</span>):</span><br><span class="line">    <span class="keyword">return</span> [ [<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(cols)] <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(rows) ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">value</span>(<span class="params">matrix, row, col</span>):</span><br><span class="line">    <span class="keyword">return</span> matrix[row][col]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_value</span>(<span class="params">matrix, row, col, val</span>):</span><br><span class="line">    matrix[row][col] = val</span><br><span class="line"></span><br><span class="line"><span class="comment"># Matrix- Implementation B</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix</span>(<span class="params">rows, cols</span>):</span><br><span class="line">    <span class="keyword">return</span> [ [<span class="number">0</span> <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(rows)] <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(cols) ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">value</span>(<span class="params">matrix, row, col</span>):</span><br><span class="line">    <span class="keyword">return</span> matrix[col][row]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_value</span>(<span class="params">matrix, row, col, val</span>):</span><br><span class="line">    matrix[col][row] = val</span><br><span class="line"></span><br><span class="line"><span class="comment"># Matrix- Implementation C</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix</span>(<span class="params">rows, cols</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tuple</span>( [<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(cols)] <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(rows) )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">value</span>(<span class="params">matrix, row, col</span>):</span><br><span class="line">    <span class="keyword">return</span> matrix[row][col]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_value</span>(<span class="params">matrix, row, col, val</span>):</span><br><span class="line">    matrix[row][col] = val</span><br><span class="line"></span><br><span class="line"><span class="comment"># Matrix- Implementation D2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix</span>(<span class="params">rows, cols</span>):</span><br><span class="line">    <span class="keyword">return</span> [ <span class="built_in">tuple</span>(<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(cols))</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(rows) ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">value</span>(<span class="params">matrix, row, col</span>):</span><br><span class="line">    <span class="keyword">return</span> matrix[row][col]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_value</span>(<span class="params">matrix, row, col, val</span>):</span><br><span class="line">    matrix[row] = matrix[row][:col] + (val,) + matrix[row][col+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">m = matrix(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">set_value(m, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">set_value(m, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">set_value(m, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>PS：在课堂投票中，大部分人都选择用列表包含列表，并以行优先的方式实现：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image13.png"></p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image14.png"></p>
<h4 id="树（Tree）"><a href="#树（Tree）" class="headerlink" title="树（Tree）"></a>树（<code>Tree</code>）</h4><p>数据抽象如下：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image15.png"></p>
<p>本课程介绍了多种实现方法，外部调用都是一样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tree - Implementation A</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tree</span>(<span class="params">label, children=[]</span>):</span><br><span class="line">    <span class="keyword">return</span> [label] + children</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">label</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">children</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_leaf</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(children(tree)) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tree- Implementation B</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tree</span>(<span class="params">label, children=[]</span>):</span><br><span class="line">    <span class="keyword">return</span> (label, children)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">label</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">children</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tree - Implementation C</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tree</span>(<span class="params">label, children=[]</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;l&quot;</span>: label, <span class="string">&quot;c&quot;</span>: children&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">label</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> tree[<span class="string">&quot;l&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">children</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> tree[<span class="string">&quot;c&quot;</span>]</span><br><span class="line"></span><br><span class="line">t = tree(<span class="number">20</span>, [tree(<span class="number">12</span>,</span><br><span class="line">               [tree(<span class="number">9</span>,</span><br><span class="line">                  [tree(<span class="number">7</span>), tree(<span class="number">2</span>)]),</span><br><span class="line">                tree(<span class="number">3</span>)]),</span><br><span class="line">              tree(<span class="number">8</span>,</span><br><span class="line">                [tree(<span class="number">4</span>), tree(<span class="number">4</span>)])])</span><br></pre></td></tr></table></figure>

<p>在课堂投票中，大部分人选择用列表包含列表实现（其实不是很好的方法，不够直观）：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image16.png" alt="image16"></p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image17.png"></p>
<h4 id="树的过程（Tree-processing）"><a href="#树的过程（Tree-processing）" class="headerlink" title="树的过程（Tree processing）"></a>树的过程（<code>Tree processing</code>）</h4><p>实现一个<code>count_leaves(t)</code>函数，统计树<code>t</code>的叶子的数量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tree processing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_leaves</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the number of leaf nodes in T.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        children_leaves = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> children(t):</span><br><span class="line">            children_leaves += count_leaves(c)</span><br><span class="line">        <span class="keyword">return</span> children_leaves</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_leaves</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the number of leaf nodes in T.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>([count_leaves(c) <span class="keyword">for</span> c <span class="keyword">in</span> children(t)])</span><br></pre></td></tr></table></figure>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><strong>翻译视频</strong>：<a href="https://www.bilibili.com/video/BV1v64y1Q78o/?spm_id_from=444.41.top_right_bar_window_default_collection.content.click&vd_source=249a8ad55bb26717dd55ec3dd295f644">【计算机程序的构造和解释】精译【UC Berkeley 公开课-CS61A (Spring 2021)】-中英双语字幕</a></li>
<li><code>github</code>: <a href="https://github.com/Maxwell2020152049/CS61A">Maxwell2020152049&#x2F;CS61A</a></li>
</ul>
]]></content>
      <categories>
        <category>CS61A</category>
        <category>Course Notes</category>
      </categories>
  </entry>
  <entry>
    <title>CS61A Project1 Hog</title>
    <url>/2024/06/09/CS61A-Project01/</url>
    <content><![CDATA[<h2 id="Project-1-The-Game-of-Hog"><a href="#Project-1-The-Game-of-Hog" class="headerlink" title="Project 1: The Game of Hog"></a>Project 1: The Game of Hog</h2><h3 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h3><p>有两个玩家，轮流进行回合，玩家选择骰子的数量（最多10个），得到每个骰子的点数，将点数之和加入总分中，总分先达到<code>100</code>即获胜。</p>
<p><code>Sow Sad</code>：如果有一个骰子点数为<code>1</code>，本回合得分为<code>1</code></p>
<p><code>Piggy Points</code>：如果选择<code>0</code>个骰子，本回合获得<code>k + 3</code>分，<code>k</code>为对手分数的平方的位数中值最小的一位。</p>
<p><code>More Boar</code>：回合结束后，如果玩家的最高位小于对手的最高位，玩家的次高位小于对手的次高位，继续进行一回合。</p>
<h3 id="Final-Product"><a href="#Final-Product" class="headerlink" title="Final Product"></a>Final Product</h3><p>最终效果可以参考：<a href="https://hog.cs61a.org/">Final Product</a></p>
<h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p>项目目录如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── calc.py </span><br><span class="line">├── default_graphics.py</span><br><span class="line">├── dice.py</span><br><span class="line">├── gui_files</span><br><span class="line">├── hog_gui.py</span><br><span class="line">├── hog.py</span><br><span class="line">├── ok</span><br><span class="line">├── proj01.ok</span><br><span class="line">├── __pycache__</span><br><span class="line">├── tests</span><br><span class="line">└── ucb.py</span><br></pre></td></tr></table></figure>

<p>其中比较重要的有：</p>
<ul>
<li><code>hog.py</code>：项目的初始代码</li>
<li><code>dice.py</code>：关于骰子的函数</li>
<li><code>hog_gui.py</code>：项目的用户图形化界面（<code>graphical user interface</code>）</li>
<li><code>ucb.py</code>：本课程的实用函数</li>
<li><code>gui_files</code>：Web GUI 使用的各种内容的目录</li>
</ul>
<p>执行如下代码可以运行项目：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 hog_gui.py</span><br></pre></td></tr></table></figure>

<h3 id="Phase-1-Simulator"><a href="#Phase-1-Simulator" class="headerlink" title="Phase 1: Simulator"></a>Phase 1: Simulator</h3><h4 id="Problem-0-0-pt"><a href="#Problem-0-0-pt" class="headerlink" title="Problem 0 (0 pt)"></a>Problem 0 (0 pt)</h4><p><code>dice.py</code>中定义了两种骰子函数：</p>
<ul>
<li><code>make_fair_dice(sides)</code>：<code>sides</code>表示骰子的面数，该函数返回一个函数<code>dice</code>，<code>dice</code>会随机返回<code>[a, b]</code>中的一个值。</li>
<li><code>make_test_dice(*outcomes)</code>：<code>outcomes</code>是一个正整数序列，该函数返回一个函数<code>dice</code>，<code>dice</code>会顺序、周期性地返回<code>outcomes</code>中的值，该骰子函数主要用作测试。</li>
</ul>
<p>运行如下代码进行解锁测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 00 -u --local</span><br></pre></td></tr></table></figure>

<p>结果如下（第二题读错题了，要的是“摇”一个6个面的骰子的方法）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 1: Hog</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 0 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; test_dice = make_test_dice(4, 1, 2)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; test_dice()</span></span><br><span class="line">? 4</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; test_dice() <span class="comment"># Second call</span></span></span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; test_dice() <span class="comment"># Third call</span></span></span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; test_dice() <span class="comment"># Fourth call</span></span></span><br><span class="line">? 4</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 0 &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">Q: Which of the following is the correct way to &quot;roll&quot; a fair, six-sided die?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) six_sided()</span><br><span class="line">1) make_fair_dice(6)</span><br><span class="line">2) make_test_dice(6)</span><br><span class="line">3) six_sided</span><br><span class="line">? 1</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) six_sided()</span><br><span class="line">1) make_fair_dice(6)</span><br><span class="line">2) make_test_dice(6)</span><br><span class="line">3) six_sided</span><br><span class="line">? 0</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Question 0 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<h4 id="Problem-1-2-pt"><a href="#Problem-1-2-pt" class="headerlink" title="Problem 1 (2 pt)"></a>Problem 1 (2 pt)</h4><p>实现<code>roll_dice(num_rolls, dice=six_sided)</code>函数，<code>num_rolls</code>为骰子数量，<code>dice</code>为骰子函数，返回该回合的得分，需要考虑<code>Sow Sad</code>规则。</p>
<p><strong><code>注意</code></strong> ：哪怕中途有骰子出现了<code>1</code>，也要摇完<code>num_rolls</code>次骰子，否则测评会出错。</p>
<p>运行如下代码进行解锁测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 01 -u --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 1: Hog</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 1 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 59)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; roll_dice(2, make_test_dice(4, 6, 1))</span></span><br><span class="line">? 10</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 1 &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 58)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; roll_dice(3, make_test_dice(4, 6, 1))</span></span><br><span class="line">? 11</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 1 &gt; Suite 1 &gt; Case 3</span><br><span class="line">(cases remaining: 57)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; roll_dice(4, make_test_dice(2, 2, 3))</span></span><br><span class="line">? 9</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 1 &gt; Suite 1 &gt; Case 4</span><br><span class="line">(cases remaining: 56)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; a = roll_dice(4, make_test_dice(1, 2, 3))</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; a <span class="comment"># check that the value is being returned, not printed</span></span></span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 1 &gt; Suite 1 &gt; Case 5</span><br><span class="line">(cases remaining: 55)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; counted_dice = make_test_dice(4, 1, 2, 6)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; roll_dice(3, counted_dice)</span></span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># Make sure you call dice exactly num_rolls times!</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># If you call it fewer or more than that, it won&#x27;t be at the right spot in the cycle for the next roll</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># Note that a return statement within a loop ends the loop</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; roll_dice(1, counted_dice)</span></span><br><span class="line">? 6</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 1 &gt; Suite 1 &gt; Case 6</span><br><span class="line">(cases remaining: 54)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; roll_dice(9, make_test_dice(6))</span></span><br><span class="line">? 54</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; roll_dice(7, make_test_dice(2, 2, 2, 2, 2, 2, 1))</span></span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Question 1 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">roll_dice</span>(<span class="params">num_rolls, dice=six_sided</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Simulate rolling the DICE exactly NUM_ROLLS &gt; 0 times. Return the sum of</span></span><br><span class="line"><span class="string">    the outcomes unless any of the outcomes is 1. In that case, return 1.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    num_rolls:  The number of dice rolls that will be made.</span></span><br><span class="line"><span class="string">    dice:       A function that simulates a single dice roll outcome.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># These assert statements ensure that num_rolls is a positive integer.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(num_rolls) == <span class="built_in">int</span>, <span class="string">&#x27;num_rolls must be an integer.&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> num_rolls &gt; <span class="number">0</span>, <span class="string">&#x27;Must roll at least once.&#x27;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 1</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    pt_one = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num_rolls):</span><br><span class="line">        pt = dice()</span><br><span class="line">        <span class="keyword">if</span> pt == <span class="number">1</span>:</span><br><span class="line">            pt_one = <span class="literal">True</span></span><br><span class="line">        <span class="built_in">sum</span> += pt</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> <span class="keyword">if</span> pt_one <span class="keyword">else</span> <span class="built_in">sum</span>)</span><br><span class="line">	<span class="comment"># END PROBLEM 1</span></span><br></pre></td></tr></table></figure>

<p>可以使用如下命令进行测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 01 --local</span><br></pre></td></tr></table></figure>

<h4 id="Problem-2-1-pt"><a href="#Problem-2-1-pt" class="headerlink" title="Problem 2 (1 pt)"></a>Problem 2 (1 pt)</h4><p>实现<code>piggy_points(score)</code>函数，<code>score</code>是对手的分数，<code>Piggy Points</code>规则见上，返回本回合的得分。</p>
<p>运行如下代码进行解锁测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 02 -u --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 1: Hog</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 2 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 36)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import tests.construct_check as <span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; piggy_points(4)</span></span><br><span class="line">? 4</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 2 &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 35)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import tests.construct_check as <span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; piggy_points(10)</span></span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 2 &gt; Suite 1 &gt; Case 3</span><br><span class="line">(cases remaining: 34)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import tests.construct_check as <span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; piggy_points(94)</span></span><br><span class="line">? 6</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 2 &gt; Suite 1 &gt; Case 4</span><br><span class="line">(cases remaining: 33)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import tests.construct_check as <span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; piggy_points(0)</span></span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 2 &gt; Suite 1 &gt; Case 5</span><br><span class="line">(cases remaining: 32)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import tests.construct_check as <span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; a = piggy_points(24)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; a <span class="comment"># check that the value is being returned, not printed</span></span></span><br><span class="line">? 8</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Question 2 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">piggy_points</span>(<span class="params">score</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the points scored from rolling 0 dice.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    score:  The opponent&#x27;s current score.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 2</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">smallest_digit</span>(<span class="params">num</span>):</span><br><span class="line">        <span class="keyword">if</span> num &lt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">min</span>(num % <span class="number">10</span>, smallest_digit(num // <span class="number">10</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> smallest_digit(score * score) + <span class="number">3</span></span><br><span class="line">	<span class="comment"># END PROBLEM 2</span></span><br></pre></td></tr></table></figure>

<p>可以使用如下命令进行测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 02 --local</span><br></pre></td></tr></table></figure>

<h4 id="Problem-3-2-pt"><a href="#Problem-3-2-pt" class="headerlink" title="Problem 3 (2 pt)"></a>Problem 3 (2 pt)</h4><p>实现<code>take_turn(num_rolls, opponent_score, dice=six_sided, goal=GOAL_SCORE)</code>函数，返回玩家在本回合的得分，参数如下：</p>
<ul>
<li><code>num_rolls</code>：骰子的数量</li>
<li><code>opponent_score</code>：对手的分数</li>
<li><code>dice</code>：骰子函数</li>
<li><code>goal</code>：最高分</li>
</ul>
<p>运行如下代码进行解锁测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 03 -u --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 1: Hog</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 3 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 10)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; take_turn(2, 0, make_test_dice(4, 5, 1))</span></span><br><span class="line">? 9</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 3 &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 9)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; take_turn(3, 0, make_test_dice(4, 6, 1))</span></span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 3 &gt; Suite 1 &gt; Case 3</span><br><span class="line">(cases remaining: 8)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; take_turn(0, 2)</span></span><br><span class="line">? 7</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 3 &gt; Suite 1 &gt; Case 4</span><br><span class="line">(cases remaining: 7)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; take_turn(0, 0)</span></span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Question 3 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>思路：当骰子数量为<code>0</code>时，使用<code>Piggy Points</code>规则；否则，正常摇骰子。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">take_turn</span>(<span class="params">num_rolls, opponent_score, dice=six_sided, goal=GOAL_SCORE</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Simulate a turn rolling NUM_ROLLS dice, which may be 0 in the case</span></span><br><span class="line"><span class="string">    of a player using Piggy Points.</span></span><br><span class="line"><span class="string">    Return the points scored for the turn by the current player.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    num_rolls:       The number of dice rolls that will be made.</span></span><br><span class="line"><span class="string">    opponent_score:  The total score of the opponent.</span></span><br><span class="line"><span class="string">    dice:            A function that simulates a single dice roll outcome.</span></span><br><span class="line"><span class="string">    goal:            The goal score of the game.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Leave these assert statements here; they help check for errors.</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(num_rolls) == <span class="built_in">int</span>, <span class="string">&#x27;num_rolls must be an integer.&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> num_rolls &gt;= <span class="number">0</span>, <span class="string">&#x27;Cannot roll a negative number of dice in take_turn.&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> num_rolls &lt;= <span class="number">10</span>, <span class="string">&#x27;Cannot roll more than 10 dice.&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> opponent_score &lt; goal, <span class="string">&#x27;The game should be over.&#x27;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 3</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> num_rolls == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> piggy_points(opponent_score)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> roll_dice(num_rolls, dice)</span><br><span class="line">    <span class="comment"># END PROBLEM 3</span></span><br></pre></td></tr></table></figure>

<p>可以使用如下命令进行测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 03 --local</span><br></pre></td></tr></table></figure>

<h4 id="Problem-4-2-pt"><a href="#Problem-4-2-pt" class="headerlink" title="Problem 4 (2 pt)"></a>Problem 4 (2 pt)</h4><p>实现<code>more_boar(player_score, opponent_score)</code>函数，<code>player_score</code>是当前玩家的分数，<code>opponent_score</code>是对手的分数，根据<code>More Boar</code>规则，判断下一个回合属于哪个玩家，若属于当前玩家，则返回<code>True</code>，否则返回<code>False</code>。</p>
<p>运行如下代码进行解锁测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 04 -u --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 1: Hog</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 3 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 10)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; take_turn(2, 0, make_test_dice(4, 5, 1))</span></span><br><span class="line">? 9</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 3 &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 9)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; take_turn(3, 0, make_test_dice(4, 6, 1))</span></span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 3 &gt; Suite 1 &gt; Case 3</span><br><span class="line">(cases remaining: 8)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; take_turn(0, 2)</span></span><br><span class="line">? 7</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 3 &gt; Suite 1 &gt; Case 4</span><br><span class="line">(cases remaining: 7)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; take_turn(0, 0)</span></span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Question 4 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">more_boar</span>(<span class="params">player_score, opponent_score</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether the player gets an extra turn.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    player_score:   The total score of the current player.</span></span><br><span class="line"><span class="string">    opponent_score: The total score of the other player.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; more_boar(21, 43)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; more_boar(22, 43)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; more_boar(43, 21)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; more_boar(12, 12)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; more_boar(7, 8)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 4</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">two_digits</span>(<span class="params">x</span>):</span><br><span class="line">        a = x % <span class="number">10</span></span><br><span class="line">        b = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> b, a</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">            b = a</span><br><span class="line">            a = x % <span class="number">10</span></span><br><span class="line">            x //= <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a, b</span><br><span class="line">    </span><br><span class="line">    tmp_p1, tmp_p2 = two_digits(player_score)</span><br><span class="line">    tmp_o1, tmp_o2 = two_digits(opponent_score)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp_p1 &lt; tmp_o1 <span class="keyword">and</span> tmp_p2 &lt; tmp_o2</span><br><span class="line">    <span class="comment"># END PROBLEM 4</span></span><br></pre></td></tr></table></figure>

<p>可以使用如下命令进行测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 04 --local</span><br></pre></td></tr></table></figure>

<h4 id="Problem-5-3-pt"><a href="#Problem-5-3-pt" class="headerlink" title="Problem 5 (3 pt)"></a>Problem 5 (3 pt)</h4><p>实现<code>play</code>函数，模拟游戏的运行，返回两个玩家的最终分数：</p>
<ul>
<li><p><code>strategy0</code>：玩家0的策略，根据当前双方的分数，返回骰子数量</p>
</li>
<li><p><code>strategy1</code>：玩家1的策略，根据当前双方的分数，返回骰子数量</p>
</li>
<li><p><code>score0</code>：玩家0的分数</p>
</li>
<li><p><code>score1</code>：玩家1的分数</p>
</li>
<li><p><code>dice</code>：骰子函数</p>
</li>
<li><p><code>goal</code>：目标分数</p>
</li>
</ul>
<p>运行如下代码进行解锁测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 05 -u --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 1: Hog</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 5 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 111)</span><br><span class="line"></span><br><span class="line">Q: The variables score0 and score1 are the scores for Player 0</span><br><span class="line">and Player 1, respectively. Under what conditions should the</span><br><span class="line">game continue?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) While score1 is less than goal</span><br><span class="line">1) While at least one of score0 or score1 is less than goal</span><br><span class="line">2) While score0 and score1 are both less than goal</span><br><span class="line">3) While score0 is less than goal</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 5 &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 110)</span><br><span class="line"></span><br><span class="line">Q: What is a strategy in the context of this game?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) A player&#x27;s desired turn outcome</span><br><span class="line">1) A function that returns the number of dice a player will roll</span><br><span class="line">2) The number of dice a player will roll</span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 5 &gt; Suite 1 &gt; Case 3</span><br><span class="line">(cases remaining: 109)</span><br><span class="line"></span><br><span class="line">Q: If strategy1 is Player 1&#x27;s strategy function, score0 is</span><br><span class="line">Player 0&#x27;s current score, and score1 is Player 1&#x27;s current</span><br><span class="line">score, then which of the following demonstrates correct</span><br><span class="line">usage of strategy1?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) strategy1(score1)</span><br><span class="line">1) strategy1(score0, score1)</span><br><span class="line">2) strategy1(score0)</span><br><span class="line">3) strategy1(score1, score0)</span><br><span class="line">? 1</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) strategy1(score1)</span><br><span class="line">1) strategy1(score0, score1)</span><br><span class="line">2) strategy1(score0)</span><br><span class="line">3) strategy1(score1, score0)</span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 5 &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 108)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import hog</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; always_three = hog.make_test_dice(3)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; always = hog.always_roll</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># Play function stops at goal</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s0, s1 = hog.play(always(5), always(3), score0=91, score1=10, dice=always_three)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s0</span></span><br><span class="line">? 15</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? 106</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s1</span></span><br><span class="line">? 10</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 5 &gt; Suite 2 &gt; Case 2</span><br><span class="line">(cases remaining: 107)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import hog</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; always_three = hog.make_test_dice(3)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; always = hog.always_roll</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># Goal score is not hardwired</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s0, s1 = hog.play(always(5), always(5), goal=10, dice=always_three)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s0</span></span><br><span class="line">? 15</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s1</span></span><br><span class="line">? 0</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 5 &gt; Suite 2 &gt; Case 3</span><br><span class="line">(cases remaining: 106)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 5 &gt; Suite 2 &gt; Case 4</span><br><span class="line">(cases remaining: 105)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 5 &gt; Suite 3 &gt; Case 1</span><br><span class="line">(cases remaining: 104)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import hog</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; always_three = hog.make_test_dice(3)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; always_seven = hog.make_test_dice(7)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># Use strategies</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># We recommend working this out turn-by-turn on a piece of paper (use Python for difficult calculations).</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; strat0 = lambda score, opponent: opponent % 10</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; strat1 = lambda score, opponent: max((score // <span class="number">10</span>) - <span class="number">4</span>, <span class="number">0</span>)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s0, s1 = hog.play(strat0, strat1, score0=<span class="number">71</span>, score1=<span class="number">80</span>, dice=always_seven)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s0</span></span><br><span class="line">? 74</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s1</span></span><br><span class="line">? 108</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Question 5 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">strategy0, strategy1, score0=<span class="number">0</span>, score1=<span class="number">0</span>, dice=six_sided,</span></span><br><span class="line"><span class="params">         goal=GOAL_SCORE, say=silence</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Simulate a game and return the final scores of both players, with Player</span></span><br><span class="line"><span class="string">    0&#x27;s score first, and Player 1&#x27;s score second.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    A strategy is a function that takes two total scores as arguments (the</span></span><br><span class="line"><span class="string">    current player&#x27;s score, and the opponent&#x27;s score), and returns a number of</span></span><br><span class="line"><span class="string">    dice that the current player will roll this turn.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    strategy0:  The strategy function for Player 0, who plays first.</span></span><br><span class="line"><span class="string">    strategy1:  The strategy function for Player 1, who plays second.</span></span><br><span class="line"><span class="string">    score0:     Starting score for Player 0</span></span><br><span class="line"><span class="string">    score1:     Starting score for Player 1</span></span><br><span class="line"><span class="string">    dice:       A function of zero arguments that simulates a dice roll.</span></span><br><span class="line"><span class="string">    goal:       The game ends and someone wins when this score is reached.</span></span><br><span class="line"><span class="string">    say:        The commentary function to call at the end of the first turn.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    who = <span class="number">0</span>  <span class="comment"># Who is about to take a turn, 0 (first) or 1 (second)</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 5</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="comment"># END PROBLEM 5</span></span><br><span class="line">    <span class="comment"># (note that the indentation for the problem 6 prompt (***YOUR CODE HERE***) might be misleading)</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 6</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">while</span> score0 &lt; goal <span class="keyword">and</span> score1 &lt; goal:</span><br><span class="line">        <span class="keyword">if</span> who == <span class="number">0</span>:</span><br><span class="line">            num_rolls = strategy0(score0, score1)</span><br><span class="line">            score0 += take_turn(num_rolls, score1, dice, goal)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> more_boar(score0, score1):</span><br><span class="line">                who = next_player(who)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num_rolls = strategy1(score1, score0)</span><br><span class="line">            score1 += take_turn(num_rolls, score0, dice, goal)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> more_boar(score1, score0):</span><br><span class="line">                who = next_player(who)</span><br><span class="line">    <span class="comment"># END PROBLEM 6</span></span><br><span class="line">    <span class="keyword">return</span> score0, score1</span><br></pre></td></tr></table></figure>

<p>可以使用如下命令进行测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 05 --local</span><br></pre></td></tr></table></figure>

<h3 id="Phase-2-Commentary"><a href="#Phase-2-Commentary" class="headerlink" title="Phase 2: Commentary"></a>Phase 2: Commentary</h3><h4 id="Commentary-examples"><a href="#Commentary-examples" class="headerlink" title="Commentary examples"></a>Commentary examples</h4><p><code>say_scores</code>函数：打印两位玩家的分数，返回自身函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">say_scores</span>(<span class="params">score0, score1</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A commentary function that announces the score for each player.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Player 0 now has&quot;</span>, score0, <span class="string">&quot;and Player 1 now has&quot;</span>, score1)</span><br><span class="line">    <span class="keyword">return</span> say_scores</span><br></pre></td></tr></table></figure>

<p><code>announce_lead_changes</code>：打印分数领先的玩家和分数差，返回一个评论函数<code>say</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">announce_lead_changes</span>(<span class="params">last_leader=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a commentary function that announces lead changes.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f0 = announce_lead_changes()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f1 = f0(5, 0)</span></span><br><span class="line"><span class="string">    Player 0 takes the lead by 5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f2 = f1(5, 12)</span></span><br><span class="line"><span class="string">    Player 1 takes the lead by 7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f3 = f2(8, 12)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f4 = f3(8, 13)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f5 = f4(15, 13)</span></span><br><span class="line"><span class="string">    Player 0 takes the lead by 2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">score0, score1</span>):</span><br><span class="line">        <span class="keyword">if</span> score0 &gt; score1:</span><br><span class="line">            leader = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> score1 &gt; score0:</span><br><span class="line">            leader = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            leader = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> leader != <span class="literal">None</span> <span class="keyword">and</span> leader != last_leader:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Player&#x27;</span>, leader, <span class="string">&#x27;takes the lead by&#x27;</span>, <span class="built_in">abs</span>(score0 - score1))</span><br><span class="line">        <span class="keyword">return</span> announce_lead_changes(leader)</span><br><span class="line">    <span class="keyword">return</span> say</span><br></pre></td></tr></table></figure>

<p><code>both(f, g)</code>函数：返回一个能够打印<code>f</code>和<code>g</code>函数的评论的函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">both</span>(<span class="params">f, g</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a commentary function that says what f says, then what g says.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    NOTE: the following game is not possible under the rules, it&#x27;s just</span></span><br><span class="line"><span class="string">    an example for the sake of the doctest</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; h0 = both(say_scores, announce_lead_changes())</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; h1 = h0(10, 0)</span></span><br><span class="line"><span class="string">    Player 0 now has 10 and Player 1 now has 0</span></span><br><span class="line"><span class="string">    Player 0 takes the lead by 10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; h2 = h1(10, 8)</span></span><br><span class="line"><span class="string">    Player 0 now has 10 and Player 1 now has 8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; h3 = h2(10, 17)</span></span><br><span class="line"><span class="string">    Player 0 now has 10 and Player 1 now has 17</span></span><br><span class="line"><span class="string">    Player 1 takes the lead by 7</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">score0, score1</span>):</span><br><span class="line">        <span class="keyword">return</span> both(f(score0, score1), g(score0, score1))</span><br><span class="line">    <span class="keyword">return</span> say</span><br></pre></td></tr></table></figure>

<h4 id="Problem-6-2-pt"><a href="#Problem-6-2-pt" class="headerlink" title="Problem 6 (2 pt)"></a>Problem 6 (2 pt)</h4><p>在<code>play</code>函数中，每回合结束时调用<code>say</code>函数，下一回合掉用本回合<code>say</code>的返回值</p>
<p>运行如下代码进行解锁测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 06 -u --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 1: Hog</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 6 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 8)</span><br><span class="line"></span><br><span class="line">Q: What does a commentary function return?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) An integer representing the score.</span><br><span class="line">1) None.</span><br><span class="line">2) Another commentary function.</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 6 &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 7)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import play, always_roll</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from dice import make_test_dice</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; def <span class="built_in">echo</span>(s0, s1):</span></span><br><span class="line">...     print(s0, s1)</span><br><span class="line">...     return echo</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s0, s1 = play(always_roll(1), always_roll(1), dice=make_test_dice(3), goal=5, say=<span class="built_in">echo</span>)</span></span><br><span class="line">(line 1)? 4 3</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">(line 1)? 3 0</span><br><span class="line">(line 2)? 3 3</span><br><span class="line">(line 3)? 6 3</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 6 &gt; Suite 2 &gt; Case 2</span><br><span class="line">(cases remaining: 6)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import play, always_roll</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from dice import make_test_dice</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; def count(n):</span></span><br><span class="line">...     def say(s0, s1):</span><br><span class="line">...         print(n, s0)</span><br><span class="line">...         return count(n + 1)</span><br><span class="line">...     return say</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s0, s1 = play(always_roll(1), always_roll(1), dice=make_test_dice(5), goal=10, say=count(1))</span></span><br><span class="line">(line 1)? 1 5</span><br><span class="line">(line 2)? 2 5</span><br><span class="line">(line 3)? 3 10</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 6 &gt; Suite 2 &gt; Case 3</span><br><span class="line">(cases remaining: 5)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import play, always_roll</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from dice import make_test_dice</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; def <span class="built_in">echo</span>(s0, s1):</span></span><br><span class="line">...     print(s0, s1)</span><br><span class="line">...     return echo</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; strat0 = lambda score, opponent: 1 - opponent // 10</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; strat1 = always_roll(3)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s0, s1 = play(strat0, strat1, dice=make_test_dice(4, 2, 6), goal=15, say=<span class="built_in">echo</span>)</span></span><br><span class="line">(line 1)? 4 0</span><br><span class="line">(line 2)? 4 12</span><br><span class="line">(line 3)? 6 12</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">(line 1)? 4 0</span><br><span class="line">(line 2)? 4 12</span><br><span class="line">(line 3)? 8 12</span><br><span class="line">(line 4)? 8 24</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 6 &gt; Suite 2 &gt; Case 4</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import play, always_roll</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from dice import make_test_dice</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># Ensure that say is properly updated within the body of play</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; def total(s0, s1):</span></span><br><span class="line">...     print(s0 + s1)</span><br><span class="line">...     return echo</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; def <span class="built_in">echo</span>(s0, s1):</span></span><br><span class="line">...     print(s0, s1)</span><br><span class="line">...     return total</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s0, s1 = play(always_roll(1), always_roll(1), dice=make_test_dice(2, 5), goal=10, say=<span class="built_in">echo</span>)</span></span><br><span class="line">(line 1)? 2 0</span><br><span class="line">(line 2)? 7</span><br><span class="line">(line 3)? 4 5</span><br><span class="line">(line 4)? 14</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 6 &gt; Suite 2 &gt; Case 5</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import play, always_roll</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from dice import make_test_dice</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># Ensure that say is properly updated within the body of play even with extra turns</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; def total(s0, s1):</span></span><br><span class="line">...     print(s0 + s1)</span><br><span class="line">...     return echo</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; def <span class="built_in">echo</span>(s0, s1):</span></span><br><span class="line">...     print(s0, s1)</span><br><span class="line">...     return total</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s0, s1 = play(always_roll(1), always_roll(1), dice=make_test_dice(8, 2), goal=20, say=<span class="built_in">echo</span>)</span></span><br><span class="line">(line 1)? 8 0</span><br><span class="line">(line 2)? 10</span><br><span class="line">(line 3)? 16 2</span><br><span class="line">(line 4)? 20</span><br><span class="line">(line 5)? 16 12</span><br><span class="line">(line 6)? 30</span><br><span class="line">(line 7)? 18 20</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 6 &gt; Suite 3 &gt; Case 1</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import play, always_roll, both, announce_lead_changes, say_scores</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from dice import make_test_dice</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; def echo_0(s0, s1):</span></span><br><span class="line">...     print(&#x27;*&#x27;, s0)</span><br><span class="line">...     return echo_0</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; def echo_1(s0, s1):</span></span><br><span class="line">...     print(&#x27;**&#x27;, s1)</span><br><span class="line">...     return echo_1</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s0, s1 = play(always_roll(1), always_roll(1), dice=make_test_dice(2), goal=3, say=both(echo_0, echo_1))</span></span><br><span class="line">(line 1)? * 2</span><br><span class="line">(line 2)? ** 0</span><br><span class="line">(line 3)? * 2</span><br><span class="line">(line 4)? ** 2</span><br><span class="line">(line 5)? * 4</span><br><span class="line">(line 6)? ** 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 6 &gt; Suite 3 &gt; Case 2</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Question 6 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>实现代码如下，在<code>play</code>函数中加入一行<code>say = say(score0, score1)</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">strategy0, strategy1, score0=<span class="number">0</span>, score1=<span class="number">0</span>, dice=six_sided,</span></span><br><span class="line"><span class="params">         goal=GOAL_SCORE, say=silence</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Simulate a game and return the final scores of both players, with Player</span></span><br><span class="line"><span class="string">    0&#x27;s score first, and Player 1&#x27;s score second.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    A strategy is a function that takes two total scores as arguments (the</span></span><br><span class="line"><span class="string">    current player&#x27;s score, and the opponent&#x27;s score), and returns a number of</span></span><br><span class="line"><span class="string">    dice that the current player will roll this turn.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    strategy0:  The strategy function for Player 0, who plays first.</span></span><br><span class="line"><span class="string">    strategy1:  The strategy function for Player 1, who plays second.</span></span><br><span class="line"><span class="string">    score0:     Starting score for Player 0</span></span><br><span class="line"><span class="string">    score1:     Starting score for Player 1</span></span><br><span class="line"><span class="string">    dice:       A function of zero arguments that simulates a dice roll.</span></span><br><span class="line"><span class="string">    goal:       The game ends and someone wins when this score is reached.</span></span><br><span class="line"><span class="string">    say:        The commentary function to call at the end of the first turn.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    who = <span class="number">0</span>  <span class="comment"># Who is about to take a turn, 0 (first) or 1 (second)</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 5</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="comment"># END PROBLEM 5</span></span><br><span class="line">    <span class="comment"># (note that the indentation for the problem 6 prompt (***YOUR CODE HERE***) might be misleading)</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 6</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">while</span> score0 &lt; goal <span class="keyword">and</span> score1 &lt; goal:</span><br><span class="line">        <span class="keyword">if</span> who == <span class="number">0</span>:</span><br><span class="line">            num_rolls = strategy0(score0, score1)</span><br><span class="line">            score0 += take_turn(num_rolls, score1, dice, goal)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> more_boar(score0, score1):</span><br><span class="line">                who = next_player(who)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num_rolls = strategy1(score1, score0)</span><br><span class="line">            score1 += take_turn(num_rolls, score0, dice, goal)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> more_boar(score1, score0):</span><br><span class="line">                who = next_player(who)</span><br><span class="line">        say = say(score0, score1)	<span class="comment"># here!</span></span><br><span class="line">    <span class="comment"># END PROBLEM 6</span></span><br><span class="line">    <span class="keyword">return</span> score0, score1</span><br></pre></td></tr></table></figure>

<p>可以使用如下命令进行测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 06 --local</span><br></pre></td></tr></table></figure>

<h4 id="Problem-7-3-pt"><a href="#Problem-7-3-pt" class="headerlink" title="Problem 7 (3 pt)"></a>Problem 7 (3 pt)</h4><p>实现<code>announce_highest(who, last_score=0, running_high=0)</code>函数:</p>
<ul>
<li><code>who</code>：<code>1</code>表示玩家1，<code>0</code>表示玩家0</li>
<li><code>last_score</code>：上一个分数</li>
<li><code>running_high</code>：分数的最高增长</li>
</ul>
<p>运行如下代码进行解锁测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 07 -u --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 1: Hog</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 7 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 5)</span><br><span class="line"></span><br><span class="line">Q: What does announce_highest return?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) A string containing the largest point increase for the</span><br><span class="line">   current player.</span><br><span class="line">1) The current largest point increase between both</span><br><span class="line">   players.</span><br><span class="line">2) A commentary function that prints information about the</span><br><span class="line">   biggest point increase for the current player.</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 7 &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"></span><br><span class="line">Q: When does the commentary function returned by announce_highest</span><br><span class="line">print something out?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) After each turn.</span><br><span class="line">1) When the current player, given by the parameter `who`,</span><br><span class="line">   earns the biggest point increase yet between both</span><br><span class="line">   players in the game.</span><br><span class="line">2) When the current player, given by the parameter `who`,</span><br><span class="line">   earns their biggest point increase yet in the game.</span><br><span class="line">? 1</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) After each turn.</span><br><span class="line">1) When the current player, given by the parameter `who`,</span><br><span class="line">   earns the biggest point increase yet between both</span><br><span class="line">   players in the game.</span><br><span class="line">2) When the current player, given by the parameter `who`,</span><br><span class="line">   earns their biggest point increase yet in the game.</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 7 &gt; Suite 1 &gt; Case 3</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"></span><br><span class="line">Q: What does the parameter last_score represent?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) The relevant player&#x27;s score before this turn.</span><br><span class="line">1) The opponent&#x27;s score before this turn.</span><br><span class="line">2) The last highest gain for the current player.</span><br><span class="line">? 0</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 7 &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 7 &gt; Suite 2 &gt; Case 2</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Question 7 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>思路：返回一个函数<code>func</code>，打印评论时更新<code>last_score</code>和<code>running_high</code>，返回<code>announce_highest</code>函数的调用，新的函数的环境帧会有新的值，<code>nonlocal</code>关键字可以引入父环境中的引用。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">announce_highest</span>(<span class="params">who, last_score=<span class="number">0</span>, running_high=<span class="number">0</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a commentary function that announces when WHO&#x27;s score</span></span><br><span class="line"><span class="string">    increases by more than ever before in the game.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    NOTE: the following game is not possible under the rules, it&#x27;s just</span></span><br><span class="line"><span class="string">    an example for the sake of the doctest</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f0 = announce_highest(1) # Only announce Player 1 score gains</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f1 = f0(12, 0)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f2 = f1(12, 9)</span></span><br><span class="line"><span class="string">    Player 1 has reached a new maximum point gain. 9 point(s)!</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f3 = f2(20, 9)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f4 = f3(20, 30)</span></span><br><span class="line"><span class="string">    Player 1 has reached a new maximum point gain. 21 point(s)!</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f5 = f4(20, 47) # Player 1 gets 17 points; not enough for a new high</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f6 = f5(21, 47)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; f7 = f6(21, 77)</span></span><br><span class="line"><span class="string">    Player 1 has reached a new maximum point gain. 30 point(s)!</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> who == <span class="number">0</span> <span class="keyword">or</span> who == <span class="number">1</span>, <span class="string">&#x27;The who argument should indicate a player.&#x27;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 7</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">score0, score1</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> last_score</span><br><span class="line">        <span class="keyword">nonlocal</span> running_high</span><br><span class="line">        ls = last_score</span><br><span class="line">        rh = running_high</span><br><span class="line">        <span class="keyword">if</span> who == <span class="number">0</span>:</span><br><span class="line">            tmp = score0 - ls</span><br><span class="line">            <span class="keyword">if</span> tmp &gt; rh:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Player 0 has reached a new maximum point gain.&quot;</span>, tmp,<span class="string">&quot;point(s)!&quot;</span>)</span><br><span class="line">                rh = tmp</span><br><span class="line">            ls = score0</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp = score1 - ls</span><br><span class="line">            <span class="keyword">if</span> tmp &gt; rh:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Player 1 has reached a new maximum point gain.&quot;</span>, tmp,<span class="string">&quot;point(s)!&quot;</span>)</span><br><span class="line">                rh = tmp</span><br><span class="line">            ls = score1</span><br><span class="line">        <span class="keyword">return</span> announce_highest(who, ls, rh)</span><br><span class="line">    <span class="keyword">return</span> func</span><br><span class="line">    <span class="comment"># END PROBLEM 7</span></span><br></pre></td></tr></table></figure>

<p>可以使用如下命令进行测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 07 --local</span><br></pre></td></tr></table></figure>

<h3 id="Phase-3-Strategies"><a href="#Phase-3-Strategies" class="headerlink" title="Phase 3: Strategies"></a>Phase 3: Strategies</h3><h4 id="Problem-8-2-pt"><a href="#Problem-8-2-pt" class="headerlink" title="Problem 8 (2 pt)"></a>Problem 8 (2 pt)</h4><p>实现<code>make_averaged(original_function, trials_count=1000)</code>函数，返回一个函数，有和<code>original_function</code>一样的参数，调用后，计算调用<code>trials_count</code>次<code>original_function</code>函数的平均值。</p>
<p>运行如下代码进行解锁测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 08 -u --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 1: Hog</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 8 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 7)</span><br><span class="line"></span><br><span class="line">Q: What makes make_averaged a higher order function?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) It uses the *args keyword</span><br><span class="line">1) It calls a function that is not itself</span><br><span class="line">2) It contains a nested function</span><br><span class="line">3) It both takes in a function as an argument and returns a function</span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 8 &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 6)</span><br><span class="line"></span><br><span class="line">Q: How many arguments does the function passed into make_averaged take?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) An arbitrary amount, which is why we need to use *args to call it</span><br><span class="line">1) Two</span><br><span class="line">2) None</span><br><span class="line">? 0</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 8 &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 5)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; dice = make_test_dice(3, 1, 5, 6)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; averaged_dice = make_averaged(dice, 1000)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># Average of calling dice 1000 times</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; averaged_dice()</span></span><br><span class="line">? 3.75</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 8 &gt; Suite 2 &gt; Case 2</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; dice = make_test_dice(3, 1, 5, 6)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; averaged_roll_dice = make_averaged(roll_dice, 1000)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># Average of calling roll_dice 1000 times</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># Enter a float (e.g. 1.0) instead of an integer</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; averaged_roll_dice(2, dice)</span></span><br><span class="line">? 7.5</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? 6</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? 6.0</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 8 &gt; Suite 3 &gt; Case 1</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 8 &gt; Suite 3 &gt; Case 2</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 8 &gt; Suite 3 &gt; Case 3</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Question 8 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_averaged</span>(<span class="params">original_function, trials_count=<span class="number">1000</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a function that returns the average value of ORIGINAL_FUNCTION</span></span><br><span class="line"><span class="string">    when called.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    To implement this function, you will have to use *args syntax, a new Python</span></span><br><span class="line"><span class="string">    feature introduced in this project.  See the project description.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; dice = make_test_dice(4, 2, 5, 1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; averaged_dice = make_averaged(roll_dice, 1000)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; averaged_dice(1, dice)</span></span><br><span class="line"><span class="string">    3.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 8</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*argv</span>):</span><br><span class="line">        <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, trials_count):</span><br><span class="line">            <span class="built_in">sum</span> += original_function(*argv)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span> / trials_count</span><br><span class="line">    <span class="keyword">return</span> func</span><br><span class="line">    <span class="comment"># END PROBLEM 8</span></span><br></pre></td></tr></table></figure>

<p>可以使用如下命令进行测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 08 --local</span><br></pre></td></tr></table></figure>

<h4 id="Problem-9-2-pt"><a href="#Problem-9-2-pt" class="headerlink" title="Problem 9 (2 pt)"></a>Problem 9 (2 pt)</h4><p>实现<code>max_scoring_num_rolls</code>函数，返回<code>1~10</code>中得分期望最大的骰子数量。</p>
<p>运行如下代码进行解锁测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 09 -u --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 1: Hog</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 9 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 8)</span><br><span class="line"></span><br><span class="line">Q: If multiple num_rolls are tied for the highest scoring</span><br><span class="line">average, which should you return?</span><br><span class="line">Choose the number of the correct choice:</span><br><span class="line">0) The highest num_rolls</span><br><span class="line">1) A random num_rolls</span><br><span class="line">2) The lowest num_rolls</span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 9 &gt; Suite 2 &gt; Case 1</span><br><span class="line">(cases remaining: 7)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; dice = make_test_dice(3)   <span class="comment"># dice always returns 3</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; max_scoring_num_rolls(dice, trials_count=1000)</span></span><br><span class="line">? 1</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? 10</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 9 &gt; Suite 2 &gt; Case 2</span><br><span class="line">(cases remaining: 6)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 9 &gt; Suite 2 &gt; Case 3</span><br><span class="line">(cases remaining: 5)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 9 &gt; Suite 3 &gt; Case 1</span><br><span class="line">(cases remaining: 4)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; dice = make_test_dice(2)     <span class="comment"># dice always rolls 2</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; max_scoring_num_rolls(dice, trials_count=1000)</span></span><br><span class="line">? 10</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 9 &gt; Suite 3 &gt; Case 2</span><br><span class="line">(cases remaining: 3)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; dice = make_test_dice(1, 2)  <span class="comment"># dice alternates 1 and 2</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; max_scoring_num_rolls(dice, trials_count=1000)</span></span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 9 &gt; Suite 3 &gt; Case 3</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 9 &gt; Suite 3 &gt; Case 4</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">-- Already unlocked --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Question 9 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max_scoring_num_rolls</span>(<span class="params">dice=six_sided, trials_count=<span class="number">1000</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the number of dice (1 to 10) that gives the highest average turn score</span></span><br><span class="line"><span class="string">    by calling roll_dice with the provided DICE a total of TRIALS_COUNT times.</span></span><br><span class="line"><span class="string">    Assume that the dice always return positive outcomes.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; dice = make_test_dice(1, 6)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; max_scoring_num_rolls(dice)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 9</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    num_rolls = <span class="number">0</span></span><br><span class="line">    max_scores = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        averaged_dice = make_averaged(roll_dice, trials_count)</span><br><span class="line">        tmp = averaged_dice(i, dice)</span><br><span class="line">        <span class="keyword">if</span> max_scores &lt; tmp:</span><br><span class="line">            num_rolls = i</span><br><span class="line">            max_scores = tmp</span><br><span class="line">    <span class="keyword">return</span> num_rolls</span><br><span class="line">    <span class="comment"># END PROBLEM 9</span></span><br></pre></td></tr></table></figure>

<p>可以使用如下命令进行测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 09 --local</span><br></pre></td></tr></table></figure>

<p>可以使用如下命令测试策略的胜率（<code>win rate</code>）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 hog.py -r</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Max scoring num rolls for six-sided dice: 5</span><br><span class="line">always_roll(6) win rate: 0.4955</span><br><span class="line">always_roll(8) win rate: 0.532</span><br><span class="line">piggypoints_strategy win rate: 0.484</span><br><span class="line">more_boar_strategy win rate: 0.51</span><br><span class="line">final_strategy win rate: 0.5165</span><br></pre></td></tr></table></figure>

<h4 id="Problem-10-1-pt"><a href="#Problem-10-1-pt" class="headerlink" title="Problem 10 (1 pt)"></a>Problem 10 (1 pt)</h4><p>实现<code>piggypoints_strategy(score, opponent_score, cutoff=8, num_rolls=6)</code>函数，如果使用<code>Piggy Points</code>规则至少能得到<code>cutoff</code>分数，就摇<code>0</code>个骰子。</p>
<p>运行如下代码进行解锁测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 10 -u --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 1: Hog</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 10 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 106)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; piggypoints_strategy(0, 3, cutoff=8, num_rolls=5)</span></span><br><span class="line">? 0</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 10 &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 105)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; piggypoints_strategy(9, 0, cutoff=6, num_rolls=5)</span></span><br><span class="line">? 5</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 10 &gt; Suite 1 &gt; Case 3</span><br><span class="line">(cases remaining: 104)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; piggypoints_strategy(50, 2, cutoff=7, num_rolls=5)</span></span><br><span class="line">? 0</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 10 &gt; Suite 1 &gt; Case 4</span><br><span class="line">(cases remaining: 103)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; piggypoints_strategy(32, 0, cutoff=8, num_rolls=4)</span></span><br><span class="line">? 4</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 10 &gt; Suite 1 &gt; Case 5</span><br><span class="line">(cases remaining: 102)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; piggypoints_strategy(20, 1, cutoff=1, num_rolls=4)</span></span><br><span class="line">? 0</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">OK! All cases for Question 10 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">piggypoints_strategy</span>(<span class="params">score, opponent_score, cutoff=<span class="number">8</span>, num_rolls=<span class="number">6</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;This strategy rolls 0 dice if that gives at least CUTOFF points, and</span></span><br><span class="line"><span class="string">    rolls NUM_ROLLS otherwise.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 10</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span> <span class="keyword">if</span> piggy_points(opponent_score) &gt;= cutoff <span class="keyword">else</span> num_rolls)</span><br><span class="line">    <span class="comment"># END PROBLEM 10</span></span><br></pre></td></tr></table></figure>

<p>可以使用如下命令进行测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 10 --local</span><br></pre></td></tr></table></figure>

<h4 id="Problem-11-2-pt"><a href="#Problem-11-2-pt" class="headerlink" title="Problem 11 (2 pt)"></a>Problem 11 (2 pt)</h4><p>实现<code>more_boar_strategy(score, opponent_score, cutoff=8, num_rolls=6)</code>函数，如果能使用<code>More Boar</code>规则，就摇<code>0</code>个骰子；否则，若摇<code>0</code>个骰子得分大于<code>cutoff</code>，就摇<code>0</code>个骰子，不然返回<code>num_rolls</code>。</p>
<p>运行如下代码进行解锁测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 11 -u --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 1: Hog</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 11 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 105)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; more_boar_strategy(3, 19, cutoff=8, num_rolls=6)</span></span><br><span class="line">? 0</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 11 &gt; Suite 1 &gt; Case 2</span><br><span class="line">(cases remaining: 104)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; more_boar_strategy(30, 54, cutoff=7, num_rolls=6)</span></span><br><span class="line">? 0</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? 6</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 11 &gt; Suite 1 &gt; Case 3</span><br><span class="line">(cases remaining: 103)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; more_boar_strategy(17, 36, cutoff=100, num_rolls=6)</span></span><br><span class="line">? 6</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? 0</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Question 11 &gt; Suite 1 &gt; Case 4</span><br><span class="line">(cases remaining: 102)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hog import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; more_boar_strategy(24, 3, cutoff=8, num_rolls=6)</span></span><br><span class="line">? 0</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Question 11 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>思路：注意到，检测<code>More Boar</code>规则要在加上<code>Piggy Points</code>规则的得分之后进行。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">more_boar_strategy</span>(<span class="params">score, opponent_score, cutoff=<span class="number">8</span>, num_rolls=<span class="number">6</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;This strategy rolls 0 dice when it triggers an extra turn. It also</span></span><br><span class="line"><span class="string">    rolls 0 dice if it gives at least CUTOFF points and does not give an extra turn.</span></span><br><span class="line"><span class="string">    Otherwise, it rolls NUM_ROLLS.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 11</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> more_boar(score + piggy_points(opponent_score), opponent_score) <span class="keyword">else</span> piggypoints_strategy(score, opponent_score, cutoff, num_rolls)</span><br><span class="line">    <span class="comment"># END PROBLEM 11</span></span><br></pre></td></tr></table></figure>

<p>可以使用如下命令进行测评：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 11 --local</span><br></pre></td></tr></table></figure>

<h4 id="Optional-Problem-12-0-pt"><a href="#Optional-Problem-12-0-pt" class="headerlink" title="Optional: Problem 12 (0 pt)"></a>Optional: Problem 12 (0 pt)</h4><p>自己实现一个策略，追求更高胜率，有时间再来填坑。</p>
<p>实现代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以使用如下命令进行测评：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 ok -q 12 --local</span><br></pre></td></tr></table></figure>

<h3 id="最终测评"><a href="#最终测评" class="headerlink" title="最终测评"></a>最终测评</h3><p>可以使用如下命令进行测评：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 ok --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project <span class="number">1</span>: Hog</span><br><span class="line">OK, version v1<span class="number">.18</span><span class="number">.1</span></span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Running tests</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Test summary</span><br><span class="line">    <span class="number">565</span> test cases passed! No cases failed.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok <span class="keyword">with</span> --local.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CS61A</category>
        <category>Project</category>
      </categories>
  </entry>
  <entry>
    <title>CS61A Project2 Cat</title>
    <url>/2024/06/12/CS61A-Project2-Cat/</url>
    <content><![CDATA[<h1 id="Project-2-CS-61A-Autocorrected-Typing-Software"><a href="#Project-2-CS-61A-Autocorrected-Typing-Software" class="headerlink" title="Project 2: CS 61A Autocorrected Typing Software"></a>Project 2: CS 61A Autocorrected Typing Software</h1><p>项目的最终效果类似：<a href="https://cats.cs61a.org/">Final Product</a></p>
<h2 id="Phase-1-Typing"><a href="#Phase-1-Typing" class="headerlink" title="Phase 1: Typing"></a>Phase 1: Typing</h2><h3 id="Problem-1-1-pt"><a href="#Problem-1-1-pt" class="headerlink" title="Problem 1 (1 pt)"></a>Problem 1 (1 pt)</h3><p>实现<code>choose(paragraphs, select, k)</code>函数：</p>
<ul>
<li><code>paragraphs</code>：一个字符串列表</li>
<li><code>select</code>：选择函数，参数为字符串，若符合要求，返回<code>True</code>，否则返回<code>False</code></li>
<li><code>k</code>：函数返回第<code>k</code>个符合要求的字符串</li>
</ul>
<p>使用如下命令进行解锁测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 01 -u --local</span><br></pre></td></tr></table></figure>

<p>过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 2: Cats</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 1 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 102)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from cats import choose</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; ps = [<span class="string">&#x27;short&#x27;</span>, <span class="string">&#x27;really long&#x27;</span>, <span class="string">&#x27;tiny&#x27;</span>]</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; s = lambda p: len(p) &lt;= 5</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; choose(ps, s, 0)</span></span><br><span class="line">? &#x27;short&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; choose(ps, s, 1)</span></span><br><span class="line">? &#x27;tiny&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; choose(ps, s, 2)</span></span><br><span class="line">? &#x27;&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 1 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">choose</span>(<span class="params">paragraphs, select, k</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the Kth paragraph from PARAGRAPHS for which SELECT called on the</span></span><br><span class="line"><span class="string">    paragraph returns True. If there are fewer than K such paragraphs, return</span></span><br><span class="line"><span class="string">    the empty string.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        paragraphs: a list of strings</span></span><br><span class="line"><span class="string">        select: a function that returns True for paragraphs that can be selected</span></span><br><span class="line"><span class="string">        k: an integer</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ps = [&#x27;hi&#x27;, &#x27;how are you&#x27;, &#x27;fine&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; s = lambda p: len(p) &lt;= 4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; choose(ps, s, 0)</span></span><br><span class="line"><span class="string">    &#x27;hi&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; choose(ps, s, 1)</span></span><br><span class="line"><span class="string">    &#x27;fine&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; choose(ps, s, 2)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 1</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> paragraphs:</span><br><span class="line">        <span class="keyword">if</span> select(<span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># END PROBLEM 1</span></span><br></pre></td></tr></table></figure>

<h3 id="Problem-2-2-pt"><a href="#Problem-2-2-pt" class="headerlink" title="Problem 2 (2 pt)"></a>Problem 2 (2 pt)</h3><p>实现<code>about(topic)</code>函数：</p>
<ul>
<li><code>topic</code>：一个字符串列表，字符串都是小写单词</li>
</ul>
<p>返回一个<code>select(str)</code>函数，若<code>str</code>包含<code>topic</code>中的某个单词，返回<code>True</code>，否则返回<code>False</code>。</p>
<p>注意：判断是否包含某个单词的时候，不区分大小写。</p>
<p>使用如下命令进行解锁测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 02 -u --local</span><br></pre></td></tr></table></figure>

<p>过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 2: Cats</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 2 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 102)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from cats import about</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from cats import choose</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; dogs = about([<span class="string">&#x27;dogs&#x27;</span>, <span class="string">&#x27;hounds&#x27;</span>])</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; dogs(<span class="string">&#x27;A paragraph about cats.&#x27;</span>)</span></span><br><span class="line">? False</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; dogs(<span class="string">&#x27;A paragraph about dogs.&#x27;</span>)</span></span><br><span class="line">? True</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; dogs(<span class="string">&#x27;Release the Hounds!&#x27;</span>)</span></span><br><span class="line">? True</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; dogs(<span class="string">&#x27;&quot;DOGS&quot; stands for Department Of Geophysical Science.&#x27;</span>)</span></span><br><span class="line">? True</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; dogs(<span class="string">&#x27;Do gs and ho unds don\&#x27;</span>t count<span class="string">&#x27;)</span></span></span><br><span class="line">? False</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash"><span class="string">&gt;&gt; dogs(&quot;AdogsParagraph&quot;)</span></span></span><br><span class="line">? False</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 2 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>实现思路：先使用<code>remove_punctuation</code>函数去掉<code>str</code>的标点符号，再使用<code>lower</code>函数把所有字母变成小写，再使用<code>split</code>将字符串分割成单词列表（分隔符为空格）。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">about</span>(<span class="params">topic</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a select function that returns whether</span></span><br><span class="line"><span class="string">    a paragraph contains one of the words in TOPIC.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        topic: a list of words related to a subject</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; about_dogs = about([&#x27;dog&#x27;, &#x27;dogs&#x27;, &#x27;pup&#x27;, &#x27;puppy&#x27;])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; choose([&#x27;Cute Dog!&#x27;, &#x27;That is a cat.&#x27;, &#x27;Nice pup!&#x27;], about_dogs, 0)</span></span><br><span class="line"><span class="string">    &#x27;Cute Dog!&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; choose([&#x27;Cute Dog!&#x27;, &#x27;That is a cat.&#x27;, &#x27;Nice pup.&#x27;], about_dogs, 1)</span></span><br><span class="line"><span class="string">    &#x27;Nice pup.&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">all</span>([lower(x) == x <span class="keyword">for</span> x <span class="keyword">in</span> topic]), <span class="string">&#x27;topics should be lowercase.&#x27;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 2</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">        str_rm_punc = remove_punctuation(<span class="built_in">str</span>)</span><br><span class="line">        str_lower = lower(str_rm_punc)</span><br><span class="line">        str_split = split(str_lower)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> str_split:</span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">in</span> topic:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> select</span><br><span class="line">    <span class="comment"># END PROBLEM 2</span></span><br></pre></td></tr></table></figure>

<h3 id="Problem-3-1-pt"><a href="#Problem-3-1-pt" class="headerlink" title="Problem 3 (1 pt)"></a>Problem 3 (1 pt)</h3><p>实现一个<code>accuracy(typed, reference)</code>：</p>
<ul>
<li><code>typed</code>：正在输入的字符串</li>
<li><code>reference</code>：打字软件给出的字符串</li>
</ul>
<p>返回打字的正确率，即两个字符串中相同位置的单词相同的比例。</p>
<p>注意：要求返回值是浮点数，比例的分母是<code>typed</code>中单词的个数。</p>
<p>使用如下命令进行解锁测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 03 -u --local</span><br></pre></td></tr></table></figure>

<p>过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 2: Cats</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 3 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 103)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from cats import accuracy</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; accuracy(<span class="string">&quot;12345&quot;</span>, <span class="string">&quot;12345&quot;</span>) <span class="comment"># This should return 100.0 (not the integer 100!)</span></span></span><br><span class="line">? 100.0</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; accuracy(<span class="string">&quot;a b c&quot;</span>, <span class="string">&quot;a b c&quot;</span>)</span></span><br><span class="line">? 100.0</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; accuracy(<span class="string">&quot;a  b  c  d&quot;</span>, <span class="string">&quot;b  a  c  d&quot;</span>)</span></span><br><span class="line">? 50.0</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; accuracy(<span class="string">&quot;a b&quot;</span>, <span class="string">&quot;c d e&quot;</span>)</span></span><br><span class="line">? 0.0</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; accuracy(<span class="string">&quot;Cat&quot;</span>, <span class="string">&quot;cat&quot;</span>) <span class="comment"># the function is case-sensitive</span></span></span><br><span class="line">? 0.0</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; accuracy(<span class="string">&quot;a b c d&quot;</span>, <span class="string">&quot; a d &quot;</span>)</span></span><br><span class="line">? 25.0</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; accuracy(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot; &quot;</span>)</span></span><br><span class="line">? 0.0</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; accuracy(<span class="string">&quot; a b \tc&quot;</span> , <span class="string">&quot;a b c&quot;</span>) <span class="comment"># Tabs don&#x27;t count as words</span></span></span><br><span class="line">? 100.0</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; accuracy(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;&quot;</span>)</span></span><br><span class="line">? 0.0</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; accuracy(<span class="string">&quot;&quot;</span>, <span class="string">&quot;abc&quot;</span>)</span></span><br><span class="line">? 0.0</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; accuracy(<span class="string">&quot;cats.&quot;</span>, <span class="string">&quot;cats&quot;</span>) <span class="comment"># punctuation counts</span></span></span><br><span class="line">? 0.0</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; accuracy(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>) <span class="comment"># Returns 100.0</span></span></span><br><span class="line">? 100.0</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 3 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">accuracy</span>(<span class="params">typed, reference</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the accuracy (percentage of words typed correctly) of TYPED</span></span><br><span class="line"><span class="string">    when compared to the prefix of REFERENCE that was typed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        typed: a string that may contain typos</span></span><br><span class="line"><span class="string">        reference: a string without errors</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;Cute Dog!&#x27;, &#x27;Cute Dog.&#x27;)</span></span><br><span class="line"><span class="string">    50.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;A Cute Dog!&#x27;, &#x27;Cute Dog.&#x27;)</span></span><br><span class="line"><span class="string">    0.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;cute Dog.&#x27;, &#x27;Cute Dog.&#x27;)</span></span><br><span class="line"><span class="string">    50.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;Cute Dog. I say!&#x27;, &#x27;Cute Dog.&#x27;)</span></span><br><span class="line"><span class="string">    50.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;Cute&#x27;, &#x27;Cute Dog.&#x27;)</span></span><br><span class="line"><span class="string">    100.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;&#x27;, &#x27;Cute Dog.&#x27;)</span></span><br><span class="line"><span class="string">    0.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; accuracy(&#x27;&#x27;, &#x27;&#x27;)</span></span><br><span class="line"><span class="string">    100.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    typed_words = split(typed)</span><br><span class="line">    reference_words = split(reference)</span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 3</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    len_typed = <span class="built_in">len</span>(typed_words)</span><br><span class="line">    len_ref = <span class="built_in">len</span>(reference_words)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len_typed == <span class="number">0</span> <span class="keyword">and</span> len_ref == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100.0</span></span><br><span class="line">    <span class="keyword">elif</span> len_typed == <span class="number">0</span> <span class="keyword">or</span> len_ref == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    ans = <span class="built_in">sum</span>([<span class="number">1</span> <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(typed_words, reference_words) <span class="keyword">if</span> x == y])</span><br><span class="line">    ans /= len_typed</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans * <span class="number">100.0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># END PROBLEM 3</span></span><br></pre></td></tr></table></figure>

<h3 id="Problem-4-1-pt"><a href="#Problem-4-1-pt" class="headerlink" title="Problem 4 (1 pt)"></a>Problem 4 (1 pt)</h3><p>实现一个<code>wpm(typed, elapsed)</code>函数：</p>
<ul>
<li><code>typed</code>：已经输入的字符串</li>
<li><code>elapsed</code>：已经经过的时间，单位是秒（<code>s</code>）</li>
</ul>
<p><code>wpm</code>即<code>words per minute</code>，不过单词的计数是5个字母算一个单词。</p>
<p>注意：返回结果是浮点数。</p>
<p>使用如下命令进行解锁测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 04 -u --local</span><br></pre></td></tr></table></figure>

<p>过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 2: Cats</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 4 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 104)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from cats import wpm</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; wpm(<span class="string">&quot;12345&quot;</span>, 3) <span class="comment"># Note: wpm returns a float (with a decimal point)</span></span></span><br><span class="line">? 20</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? 20.0</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; wpm(<span class="string">&quot;a b c&quot;</span>, 20)</span></span><br><span class="line">? 3.0</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; wpm(<span class="string">&quot;&quot;</span>, 10)</span></span><br><span class="line">? 0.0</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 4 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">wpm</span>(<span class="params">typed, elapsed</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the words-per-minute (WPM) of the TYPED string.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        typed: an entered string</span></span><br><span class="line"><span class="string">        elapsed: an amount of time in seconds</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; wpm(&#x27;hello friend hello buddy hello&#x27;, 15)</span></span><br><span class="line"><span class="string">    24.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; wpm(&#x27;0123456789&#x27;,60)</span></span><br><span class="line"><span class="string">    2.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> elapsed &gt; <span class="number">0</span>, <span class="string">&#x27;Elapsed time must be positive&#x27;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 4</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">len</span>(typed) / <span class="number">5.0</span>) / (elapsed / <span class="number">60.0</span>)</span><br><span class="line">    <span class="comment"># END PROBLEM 4</span></span><br></pre></td></tr></table></figure>

<p>使用以下命令可以进行打字测试（测试的字符串的主题与<code>cats</code>和<code>kittens</code>有关）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 cats.py -t cats kittens</span><br></pre></td></tr></table></figure>

<p>使用以下命令可以运行项目的<code>GUI</code>界面：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 gui.py</span><br></pre></td></tr></table></figure>

<h2 id="Phase-2-Autocorrect"><a href="#Phase-2-Autocorrect" class="headerlink" title="Phase 2: Autocorrect"></a>Phase 2: Autocorrect</h2><p>实现一个自动纠错功能（<code>Autocorrect</code>），在网页<code>GUI</code>中，按空格可以把错误的单词换成词典中最接近的正确的单词。</p>
<h3 id="Problem-5-2-pt"><a href="#Problem-5-2-pt" class="headerlink" title="Problem 5 (2 pt)"></a>Problem 5 (2 pt)</h3><p>实现<code>autocorrect(typed_word, valid_words, diff_function, limit)</code>函数：</p>
<ul>
<li><code>typed_word</code>：正在输入的单词</li>
<li><code>valid_words</code>：合法的单词的列表</li>
<li><code>diff_function</code>：差别函数</li>
<li><code>limit</code>：最大限制</li>
</ul>
<p>使用<code>diff_function</code>函数，返回<code>typed_word</code>和<code>valid_words</code>中的单词的差别值，返回差别最小的那个；如果最小的差别值都比<code>limit</code>大，就返回<code>typed_word</code>本身。</p>
<p>注意：如果<code>typed_word</code>已经在<code>valid_words</code>中，那么就返回<code>typed_word</code>；如果有不止一个差别最小的单词，返回最早进行检测的。</p>
<p>使用如下命令进行解锁测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 05 -u --local</span><br></pre></td></tr></table></figure>

<p>过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 2: Cats</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 5 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 104)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from cats import autocorrect, lines_from_file</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; abs_diff = lambda w1, w2, <span class="built_in">limit</span>: abs(len(w2) - len(w1))</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; autocorrect(<span class="string">&quot;cul&quot;</span>, [<span class="string">&quot;culture&quot;</span>, <span class="string">&quot;cult&quot;</span>, <span class="string">&quot;cultivate&quot;</span>], abs_diff, 10)</span></span><br><span class="line">? &#x27;cult&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; autocorrect(<span class="string">&quot;cul&quot;</span>, [<span class="string">&quot;culture&quot;</span>, <span class="string">&quot;cult&quot;</span>, <span class="string">&quot;cultivate&quot;</span>], abs_diff, 0)</span></span><br><span class="line">? cul</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? &#x27;cul&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; autocorrect(<span class="string">&quot;wor&quot;</span>, [<span class="string">&quot;worry&quot;</span>, <span class="string">&quot;car&quot;</span>, <span class="string">&quot;part&quot;</span>], abs_diff, 10)</span></span><br><span class="line">? &#x27;car&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; first_diff = lambda w1, w2, <span class="built_in">limit</span>: 1 <span class="keyword">if</span> w1[0] != w2[0] <span class="keyword">else</span> 0</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; autocorrect(<span class="string">&quot;wrod&quot;</span>, [<span class="string">&quot;word&quot;</span>, <span class="string">&quot;rod&quot;</span>], first_diff, 1)</span></span><br><span class="line">? &#x27;wrod&#x27;</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? &#x27;rod&#x27;</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? &#x27;word&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; autocorrect(<span class="string">&quot;inside&quot;</span>, [<span class="string">&quot;idea&quot;</span>, <span class="string">&quot;inside&quot;</span>], first_diff, 0.5)</span></span><br><span class="line">? &#x27;idea&#x27;</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? &#x27;inside&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; autocorrect(<span class="string">&quot;inside&quot;</span>, [<span class="string">&quot;idea&quot;</span>, <span class="string">&quot;insider&quot;</span>], first_diff, 0.5)</span></span><br><span class="line">? &#x27;insider&#x27;</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? &#x27;idea&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; autocorrect(<span class="string">&quot;outside&quot;</span>, [<span class="string">&quot;idea&quot;</span>, <span class="string">&quot;insider&quot;</span>], first_diff, 0.5)</span></span><br><span class="line">? &#x27;outside&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 5 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">autocorrect</span>(<span class="params">typed_word, valid_words, diff_function, limit</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the element of VALID_WORDS that has the smallest difference</span></span><br><span class="line"><span class="string">    from TYPED_WORD. Instead returns TYPED_WORD if that difference is greater</span></span><br><span class="line"><span class="string">    than LIMIT.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        typed_word: a string representing a word that may contain typos</span></span><br><span class="line"><span class="string">        valid_words: a list of strings representing valid words</span></span><br><span class="line"><span class="string">        diff_function: a function quantifying the difference between two words</span></span><br><span class="line"><span class="string">        limit: a number</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; ten_diff = lambda w1, w2, limit: 10 # Always returns 10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; autocorrect(&quot;hwllo&quot;, [&quot;butter&quot;, &quot;hello&quot;, &quot;potato&quot;], ten_diff, 20)</span></span><br><span class="line"><span class="string">    &#x27;butter&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; first_diff = lambda w1, w2, limit: (1 if w1[0] != w2[0] else 0) # Checks for matching first char</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; autocorrect(&quot;tosting&quot;, [&quot;testing&quot;, &quot;asking&quot;, &quot;fasting&quot;], first_diff, 10)</span></span><br><span class="line"><span class="string">    &#x27;testing&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 5</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> typed_word <span class="keyword">in</span> valid_words:</span><br><span class="line">        <span class="keyword">return</span> typed_word</span><br><span class="line">    </span><br><span class="line">    diff = limit</span><br><span class="line">    return_word = typed_word</span><br><span class="line">    <span class="keyword">for</span> word_valid <span class="keyword">in</span> valid_words:</span><br><span class="line">        tmp = diff_function(typed_word, word_valid, limit)</span><br><span class="line">        <span class="keyword">if</span> tmp &lt; diff:</span><br><span class="line">            diff = tmp</span><br><span class="line">            return_word = word_valid</span><br><span class="line">        <span class="keyword">elif</span> tmp == diff <span class="keyword">and</span> return_word == typed_word:</span><br><span class="line">            return_word = word_valid</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> return_word</span><br><span class="line">    <span class="comment"># END PROBLEM 5</span></span><br></pre></td></tr></table></figure>

<h3 id="Problem-6-2-pts"><a href="#Problem-6-2-pts" class="headerlink" title="Problem 6 (2 pts)"></a>Problem 6 (2 pts)</h3><p>实现<code>sphinx_switches(start, goal, limit)</code>函数：</p>
<ul>
<li><code>start</code>：起始单词</li>
<li><code>goal</code>：目标单词</li>
<li><code>limit</code>：最多允许修改的字母数</li>
</ul>
<p>返回从<code>start</code>变成<code>goal</code>最少需要修改的字母数（逐位匹配）。</p>
<p>注意：不允许使用循环语句，要求使用递归实现，若发现需要修改的字面数大于<code>limit</code>，立即返回。</p>
<p>使用如下命令进行解锁测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 06 -u --local</span><br></pre></td></tr></table></figure>

<p>过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 2: Cats</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 6 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 105)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from cats import sphinx_switches, autocorrect</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import tests.construct_check as <span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; big_limit = 10</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; sphinx_switches(<span class="string">&quot;car&quot;</span>, <span class="string">&quot;cad&quot;</span>, big_limit)</span></span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; sphinx_switches(<span class="string">&quot;this&quot;</span>, <span class="string">&quot;that&quot;</span>, big_limit)</span></span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; sphinx_switches(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, big_limit)</span></span><br><span class="line">? 3</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; sphinx_switches(<span class="string">&quot;from&quot;</span>, <span class="string">&quot;form&quot;</span>, big_limit)</span></span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; sphinx_switches(<span class="string">&quot;awe&quot;</span>, <span class="string">&quot;awesome&quot;</span>, big_limit)</span></span><br><span class="line">? 4</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; sphinx_switches(<span class="string">&quot;someawe&quot;</span>, <span class="string">&quot;awesome&quot;</span>, big_limit)</span></span><br><span class="line">? 6</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; sphinx_switches(<span class="string">&quot;awful&quot;</span>, <span class="string">&quot;awesome&quot;</span>, big_limit)</span></span><br><span class="line">? 4</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? 5</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; sphinx_switches(<span class="string">&quot;awful&quot;</span>, <span class="string">&quot;awesome&quot;</span>, 3) &gt; 3</span></span><br><span class="line">? False</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? True</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; sphinx_switches(<span class="string">&quot;awful&quot;</span>, <span class="string">&quot;awesome&quot;</span>, 4) &gt; 4</span></span><br><span class="line">? True</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; sphinx_switches(<span class="string">&quot;awful&quot;</span>, <span class="string">&quot;awesome&quot;</span>, 5) &gt; 5</span></span><br><span class="line">? False</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 6 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sphinx_switches</span>(<span class="params">start, goal, limit</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A diff function for autocorrect that determines how many letters</span></span><br><span class="line"><span class="string">    in START need to be substituted to create GOAL, then adds the difference in</span></span><br><span class="line"><span class="string">    their lengths and returns the result.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        start: a starting word</span></span><br><span class="line"><span class="string">        goal: a string representing a desired goal word</span></span><br><span class="line"><span class="string">        limit: a number representing an upper bound on the number of chars that must change</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; big_limit = 10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sphinx_switches(&quot;nice&quot;, &quot;rice&quot;, big_limit)    # Substitute: n -&gt; r</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sphinx_switches(&quot;range&quot;, &quot;rungs&quot;, big_limit)  # Substitute: a -&gt; u, e -&gt; s</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sphinx_switches(&quot;pill&quot;, &quot;pillage&quot;, big_limit) # Don&#x27;t substitute anything, length difference of 3.</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sphinx_switches(&quot;roses&quot;, &quot;arose&quot;, big_limit)  # Substitute: r -&gt; a, o -&gt; r, s -&gt; o, e -&gt; s, s -&gt; e</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sphinx_switches(&quot;rose&quot;, &quot;hello&quot;, big_limit)   # Substitute: r-&gt;h, o-&gt;e, s-&gt;l, e-&gt;l, length difference of 1.</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 6</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">switch</span>(<span class="params">start, goal, limit, change_cnt</span>):</span><br><span class="line">        <span class="keyword">if</span> change_cnt &gt; limit <span class="keyword">or</span> <span class="built_in">len</span>(start) == <span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(goal) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> change_cnt</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> switch(start[<span class="number">1</span>:], goal[<span class="number">1</span>:], limit, </span><br><span class="line">            (<span class="number">1</span> <span class="keyword">if</span> start[<span class="number">0</span>] != goal[<span class="number">0</span>] <span class="keyword">else</span> <span class="number">0</span>) + change_cnt)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> switch(start, goal, limit, <span class="built_in">abs</span>(<span class="built_in">len</span>(start) - <span class="built_in">len</span>(goal)))</span><br><span class="line">    <span class="comment"># END PROBLEM 6</span></span><br></pre></td></tr></table></figure>

<p>另一种解法，写完<code>Problem 7</code>才想到的，本题可以看作只支持替换操作（添加和删除操作只有不能替换时才考虑）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> limit &lt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">not</span> start <span class="keyword">or</span> <span class="keyword">not</span> goal:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(<span class="built_in">len</span>(start) - <span class="built_in">len</span>(goal))</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    tmp = <span class="number">0</span> <span class="keyword">if</span> start[<span class="number">0</span>] == goal[<span class="number">0</span>] <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> sphinx_switches(start[<span class="number">1</span>:], goal[<span class="number">1</span>:], limit - tmp) + tmp</span><br></pre></td></tr></table></figure>

<h3 id="Problem-7-3-pt"><a href="#Problem-7-3-pt" class="headerlink" title="Problem 7 (3 pt)"></a>Problem 7 (3 pt)</h3><p>实现<code>pawssible_patches(start, goal, limit)</code>函数：</p>
<ul>
<li><code>start</code>：起始单词</li>
<li><code>goal</code>：目标单词</li>
<li><code>limit</code>：最多允许修改的字母数</li>
</ul>
<p>允许以下操作：</p>
<ul>
<li>删除<code>start</code>的一个字母</li>
<li>给<code>start</code>添加一个字母</li>
<li>替换<code>start</code>的一个字母</li>
</ul>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pawssible_patches</span>(<span class="params">start, goal, limit</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A diff function that computes the edit distance from START to GOAL.</span></span><br><span class="line"><span class="string">    This function takes in a string START, a string GOAL, and a number LIMIT.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        start: a starting word</span></span><br><span class="line"><span class="string">        goal: a goal word</span></span><br><span class="line"><span class="string">        limit: a number representing an upper bound on the number of edits</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; big_limit = 10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pawssible_patches(&quot;cats&quot;, &quot;scat&quot;, big_limit)       # cats -&gt; scats -&gt; scat</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pawssible_patches(&quot;purng&quot;, &quot;purring&quot;, big_limit)   # purng -&gt; purrng -&gt; purring</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pawssible_patches(&quot;ckiteus&quot;, &quot;kittens&quot;, big_limit) # ckiteus -&gt; kiteus -&gt; kitteus -&gt; kittens</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> limit &lt; <span class="number">0</span>:  <span class="comment"># Fill in the condition</span></span><br><span class="line">        <span class="comment"># BEGIN</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># END</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> start <span class="keyword">or</span> <span class="keyword">not</span> goal:  <span class="comment"># Feel free to remove or add additional cases</span></span><br><span class="line">        <span class="comment"># BEGIN</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">abs</span>(<span class="built_in">len</span>(start) - <span class="built_in">len</span>(goal))</span><br><span class="line">        <span class="comment"># END</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        add = pawssible_patches(start, goal[<span class="number">1</span>:], limit - <span class="number">1</span>) + <span class="number">1</span>  <span class="comment"># Fill in these lines</span></span><br><span class="line">        remove = pawssible_patches(start[<span class="number">1</span>:], goal, limit - <span class="number">1</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        tmp = <span class="number">0</span> <span class="keyword">if</span> start[<span class="number">0</span>] == goal[<span class="number">0</span>] <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        substitute = pawssible_patches(start[<span class="number">1</span>:], goal[<span class="number">1</span>:], limit - tmp) + tmp</span><br><span class="line">        <span class="comment"># BEGIN</span></span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(add, remove, substitute)</span><br><span class="line">        <span class="comment"># END</span></span><br></pre></td></tr></table></figure>

<h3 id="Optional-Extension-final-diff-0pt"><a href="#Optional-Extension-final-diff-0pt" class="headerlink" title="(Optional) Extension: final diff (0pt)"></a>(Optional) Extension: final diff (0pt)</h3><p>本题是自行设计一个<code>diff</code>函数，返回尽可能小的差别值。</p>
<p>先挖个坑，以后再填。</p>
<p>使用以下命令可以测试<code>diff</code>函数的效率和准确率：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 score.py</span><br></pre></td></tr></table></figure>

<p>测试<code>sphinx_switches</code>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Correction Speed: 74436.21742690227 wpm</span><br><span class="line">Correctly Corrected: 422 words</span><br><span class="line">Incorrectly Corrected: 406 words</span><br><span class="line">Uncorrected: 112 words</span><br></pre></td></tr></table></figure>

<p>测试<code>pawssible_patches</code>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Correction Speed: 198.3337695674132 wpm</span><br><span class="line">Correctly Corrected: 124 words</span><br><span class="line">Incorrectly Corrected: 15 words</span><br><span class="line">Uncorrected: 12 words</span><br></pre></td></tr></table></figure>

<h2 id="Phase-3-Multiplayer"><a href="#Phase-3-Multiplayer" class="headerlink" title="Phase 3: Multiplayer"></a>Phase 3: Multiplayer</h2><h3 id="Problem-8-2-pt"><a href="#Problem-8-2-pt" class="headerlink" title="Problem 8 (2 pt)"></a>Problem 8 (2 pt)</h3><p>实现<code>report_progress(typed, prompt, user_id, send)</code>函数：</p>
<ul>
<li><code>typed</code>：已输入的单词列表</li>
<li><code>prompt</code>：需要完成的单词列表</li>
<li><code>user_id</code>：用户<code>id</code></li>
<li><code>send</code>：发送函数，可以发送一个字典{‘id’: 1, ‘progress’: 0.6}给服务器，<code>id</code>键对应用户<code>id</code>，<code>progress</code>键对应当前进度。</li>
</ul>
<p>使用如下命令进行解锁测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 08 -u --local</span><br></pre></td></tr></table></figure>

<p>过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 2: Cats</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 8 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 102)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from cats import report_progress</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; print_progress = lambda d: <span class="built_in">print</span>(<span class="string">&#x27;ID:&#x27;</span>, d[<span class="string">&#x27;id&#x27;</span>], <span class="string">&#x27;Progress:&#x27;</span>, d[<span class="string">&#x27;progress&#x27;</span>])</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; typed = [<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;have&#x27;</span>, <span class="string">&#x27;begun&#x27;</span>]</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; prompt = [<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;have&#x27;</span>, <span class="string">&#x27;begun&#x27;</span>, <span class="string">&#x27;to&#x27;</span>, <span class="string">&#x27;type&#x27;</span>]</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; print_progress(&#123;<span class="string">&#x27;id&#x27;</span>: 1, <span class="string">&#x27;progress&#x27;</span>: 0.6&#125;)</span></span><br><span class="line">? &#123;&#x27;id&#x27;: 1, &#x27;progress&#x27;: 0.6&#125;</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? &#x27;id&#x27;: 1, &#x27;progress&#x27;: 0.6</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? ID: 1 Progress: 0.6</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; report_progress(typed, prompt, 1, print_progress) <span class="comment"># print_progress is called on the report</span></span></span><br><span class="line">(line 1)? ID: 1 Progress: 0.6</span><br><span class="line">(line 2)? 0.6</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; report_progress([<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;begun&#x27;</span>], prompt, 2, print_progress)</span></span><br><span class="line">(line 1)? ID: 2 Progress: 0.2</span><br><span class="line">(line 2)? 0.2</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; report_progress([<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;hve&#x27;</span>, <span class="string">&#x27;begun&#x27;</span>, <span class="string">&#x27;to&#x27;</span>, <span class="string">&#x27;type&#x27;</span>], prompt, 3, print_progress)</span></span><br><span class="line">(line 1)? ID: 3 Progress: 0.2</span><br><span class="line">(line 2)? 0.2</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 8 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">report_progress</span>(<span class="params">typed, prompt, user_id, send</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Send a report of your id and progress so far to the multiplayer server.</span></span><br><span class="line"><span class="string">    Returns the progress so far.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        typed: a list of the words typed so far</span></span><br><span class="line"><span class="string">        prompt: a list of the words in the typing prompt</span></span><br><span class="line"><span class="string">        user_id: a number representing the id of the current user</span></span><br><span class="line"><span class="string">        send: a function used to send progress to the multiplayer server</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_progress = lambda d: print(&#x27;ID:&#x27;, d[&#x27;id&#x27;], &#x27;Progress:&#x27;, d[&#x27;progress&#x27;])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # The above function displays progress in the format ID: __, Progress: __</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_progress(&#123;&#x27;id&#x27;: 1, &#x27;progress&#x27;: 0.6&#125;)</span></span><br><span class="line"><span class="string">    ID: 1 Progress: 0.6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; typed = [&#x27;how&#x27;, &#x27;are&#x27;, &#x27;you&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; prompt = [&#x27;how&#x27;, &#x27;are&#x27;, &#x27;you&#x27;, &#x27;doing&#x27;, &#x27;today&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; report_progress(typed, prompt, 2, print_progress)</span></span><br><span class="line"><span class="string">    ID: 2 Progress: 0.6</span></span><br><span class="line"><span class="string">    0.6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; report_progress([&#x27;how&#x27;, &#x27;aree&#x27;], prompt, 3, print_progress)</span></span><br><span class="line"><span class="string">    ID: 3 Progress: 0.2</span></span><br><span class="line"><span class="string">    0.2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 8</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    ratio = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(typed, prompt):</span><br><span class="line">        <span class="keyword">if</span> x == y:</span><br><span class="line">            ratio += <span class="number">1.0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    ratio /= <span class="built_in">len</span>(prompt)</span><br><span class="line">    send(&#123;<span class="string">&#x27;id&#x27;</span>: user_id, <span class="string">&#x27;progress&#x27;</span>: ratio&#125;)</span><br><span class="line">    <span class="keyword">return</span> ratio </span><br><span class="line">    <span class="comment"># END PROBLEM 8</span></span><br></pre></td></tr></table></figure>

<h3 id="Problem-9-1-pt"><a href="#Problem-9-1-pt" class="headerlink" title="Problem 9 (1 pt)"></a>Problem 9 (1 pt)</h3><p>实现<code>time_per_word(times_per_player, words)</code>函数：</p>
<ul>
<li><code>time_per_player</code>：每个用户的完成每个单词的时刻，数据类型是以列表为元素的列表</li>
<li><code>words</code>：单词列表</li>
</ul>
<p>返回抽象数据类型<code>game</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">game</span>(<span class="params">words, times</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A data abstraction containing all words typed and their times.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">all</span>([<span class="built_in">type</span>(w) == <span class="built_in">str</span> <span class="keyword">for</span> w <span class="keyword">in</span> words]), <span class="string">&#x27;words should be a list of strings&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">all</span>([<span class="built_in">type</span>(t) == <span class="built_in">list</span> <span class="keyword">for</span> t <span class="keyword">in</span> times]), <span class="string">&#x27;times should be a list of lists&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">all</span>([<span class="built_in">isinstance</span>(i, (<span class="built_in">int</span>, <span class="built_in">float</span>)) <span class="keyword">for</span> t <span class="keyword">in</span> times <span class="keyword">for</span> i <span class="keyword">in</span> t]), <span class="string">&#x27;times lists should contain numbers&#x27;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">all</span>([<span class="built_in">len</span>(t) == <span class="built_in">len</span>(words) <span class="keyword">for</span> t <span class="keyword">in</span> times]), <span class="string">&#x27;There should be one word per time.&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> [words, times]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">word_at</span>(<span class="params">game, word_index</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A selector function that gets the word with index word_index&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">0</span> &lt;= word_index &lt; <span class="built_in">len</span>(game[<span class="number">0</span>]), <span class="string">&quot;word_index out of range of words&quot;</span></span><br><span class="line">    <span class="keyword">return</span> game[<span class="number">0</span>][word_index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">all_words</span>(<span class="params">game</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A selector function for all the words in the game&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> game[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">all_times</span>(<span class="params">game</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A selector function for all typing times for all players&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> game[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">time</span>(<span class="params">game, player_num, word_index</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A selector function for the time it took player_num to type the word at word_index&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> word_index &lt; <span class="built_in">len</span>(game[<span class="number">0</span>]), <span class="string">&quot;word_index out of range of words&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> player_num &lt; <span class="built_in">len</span>(game[<span class="number">1</span>]), <span class="string">&quot;player_num out of range of players&quot;</span></span><br><span class="line">    <span class="keyword">return</span> game[<span class="number">1</span>][player_num][word_index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">game_string</span>(<span class="params">game</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A helper function that takes in a game object and returns a string representation of it&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;game(%s, %s)&quot;</span> % (game[<span class="number">0</span>], game[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<p>使用如下命令进行解锁测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 09 -u --local</span><br></pre></td></tr></table></figure>

<p>过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 2: Cats</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 9 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 103)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from cats import game, game_string, time_per_word, all_words, all_times, word_at, time</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; p = [[1, 4, 6, 7], [0, 4, 6, 9]]</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; words = [<span class="string">&#x27;This&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;fun&#x27;</span>]</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; game = time_per_word(p, words)</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; all_words(game)</span></span><br><span class="line">? [&#x27;This&#x27;, &#x27;is&#x27;, &#x27;fun&#x27;]</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; all_times(game)</span></span><br><span class="line">? [[1, 4, 6, 7], [0, 4, 6, 9]]</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? [[1, 4, 6], [0, 4, 6]]</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? [[3, 2, 1], [4, 2, 3]]</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; p = [[0, 2, 3], [2, 4, 7]]</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; game = time_per_word(p, [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>])</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; word_at(game, word_index=1)</span></span><br><span class="line">? &#x27;world&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; all_times(game)</span></span><br><span class="line">? [[2, 1], [2, 3]]</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; time(game, player_num=0, word_index=1)</span></span><br><span class="line">? 1</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 9 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">time_per_word</span>(<span class="params">times_per_player, words</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Given timing data, return a game data abstraction, which contains a list</span></span><br><span class="line"><span class="string">    of words and the amount of time each player took to type each word.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        times_per_player: A list of lists of timestamps including the time</span></span><br><span class="line"><span class="string">                          the player started typing, followed by the time</span></span><br><span class="line"><span class="string">                          the player finished typing each word.</span></span><br><span class="line"><span class="string">        words: a list of words, in the order they are typed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p = [[75, 81, 84, 90, 92], [19, 29, 35, 36, 38]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; game = time_per_word(p, [&#x27;collar&#x27;, &#x27;plush&#x27;, &#x27;blush&#x27;, &#x27;repute&#x27;])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; all_words(game)</span></span><br><span class="line"><span class="string">    [&#x27;collar&#x27;, &#x27;plush&#x27;, &#x27;blush&#x27;, &#x27;repute&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; all_times(game)</span></span><br><span class="line"><span class="string">    [[6, 3, 6, 2], [10, 6, 1, 2]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 9</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    times = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">0</span>, <span class="built_in">len</span>(times_per_player)):</span><br><span class="line">        times.append([])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(times_per_player[<span class="number">0</span>])):</span><br><span class="line">            times[i].append(times_per_player[i][j] - times_per_player[i][j - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> game(words, times)</span><br><span class="line">    <span class="comment"># END PROBLEM 9</span></span><br></pre></td></tr></table></figure>

<h3 id="Problem-10-2-pt"><a href="#Problem-10-2-pt" class="headerlink" title="Problem 10 (2 pt)"></a>Problem 10 (2 pt)</h3><p>实现<code>fastest_words(game)</code>函数：</p>
<ul>
<li><code>game</code>：抽象数据类型<code>game</code>的实例对象</li>
</ul>
<p>返回一个列表，列表的元素是每个玩家完成最快的单词列表。</p>
<p>使用如下命令进行解锁测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q 10 -u --local</span><br></pre></td></tr></table></figure>

<p>过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 2: Cats</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Problem 10 &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 103)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from cats import game, fastest_words</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; p0 = [2, 2, 3]</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; p1 = [6, 1, 2]</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; fastest_words(game([<span class="string">&#x27;What&#x27;</span>, <span class="string">&#x27;great&#x27;</span>, <span class="string">&#x27;luck&#x27;</span>], [p0, p1]))</span></span><br><span class="line">? [[&#x27;What&#x27;], [&#x27;great&#x27;, &#x27;luck&#x27;]]</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; p0 = [2, 2, 3]</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; p1 = [6, 1, 3]</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; fastest_words(game([<span class="string">&#x27;What&#x27;</span>, <span class="string">&#x27;great&#x27;</span>, <span class="string">&#x27;luck&#x27;</span>], [p0, p1]))  <span class="comment"># with a tie, choose the first player</span></span></span><br><span class="line">? [[&#x27;What&#x27;, &#x27;luck&#x27;], [&#x27;great&#x27;]]</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; p2 = [4, 3, 1]</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; fastest_words(game([<span class="string">&#x27;What&#x27;</span>, <span class="string">&#x27;great&#x27;</span>, <span class="string">&#x27;luck&#x27;</span>], [p0, p1, p2]))</span></span><br><span class="line">? [[&#x27;What&#x27;], [&#x27;great&#x27;], [&#x27;luck&#x27;]]</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Problem 10 unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fastest_words</span>(<span class="params">game</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a list of lists of which words each player typed fastest.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        game: a game data abstraction as returned by time_per_word.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p0 = [5, 1, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p1 = [4, 1, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fastest_words(game([&#x27;Just&#x27;, &#x27;have&#x27;, &#x27;fun&#x27;], [p0, p1]))</span></span><br><span class="line"><span class="string">    [[&#x27;have&#x27;, &#x27;fun&#x27;], [&#x27;Just&#x27;]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    player_indices = <span class="built_in">range</span>(<span class="built_in">len</span>(all_times(game)))  <span class="comment"># contains an *index* for each player</span></span><br><span class="line">    word_indices = <span class="built_in">range</span>(<span class="built_in">len</span>(all_words(game)))    <span class="comment"># contains an *index* for each word</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 10</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    word_fastest = [[] <span class="keyword">for</span> i <span class="keyword">in</span> player_indices]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> word_indices:</span><br><span class="line">        min_index = <span class="number">0</span> <span class="comment"># fastest player index</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> player_indices:</span><br><span class="line">            <span class="keyword">if</span> time(game, j, i) &lt; time(game, min_index, i):</span><br><span class="line">                min_index = j</span><br><span class="line">        word_fastest[min_index].append(word_at(game, i))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> word_fastest</span><br><span class="line"></span><br><span class="line">    <span class="comment"># END PROBLEM 10</span></span><br></pre></td></tr></table></figure>

<h2 id="最终测试"><a href="#最终测试" class="headerlink" title="最终测试"></a>最终测试</h2><p>使用以下命令可以进行测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Project 2: Cats</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Running tests</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Test summary</span><br><span class="line">    1032 <span class="built_in">test</span> cases passed! No cases failed.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --<span class="built_in">local</span>.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CS61A</category>
        <category>Project</category>
      </categories>
  </entry>
  <entry>
    <title>CS61A 课程笔记 Week02</title>
    <url>/2024/06/09/CS61A-courseNote-week02/</url>
    <content><![CDATA[<h3 id="Lecture-3-Recap-of-Function-Evaluation-Control"><a href="#Lecture-3-Recap-of-Function-Evaluation-Control" class="headerlink" title="Lecture #3: Recap of Function Evaluation; Control"></a>Lecture #3: Recap of Function Evaluation; Control</h3><p>一个名字(<code>name</code>)总是被绑定(<code>bound</code>)到一个值(<code>value</code>)上。</p>
<p>表达式和子表达式都会在同一个环境中求值，现在本地环境帧(<code>local environment frame</code>)中寻找，若找不到，再递归地在父环境(<code>parent environment frame</code>)中寻找。</p>
<p><code>eg1.</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create nested environment</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">12</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g1</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">g2</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="comment"># Stop here</span></span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">    g2(x + <span class="number">1</span>)</span><br><span class="line">g1(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<p>在<a href="https://pythontutor.com/cp/composingprograms.html#code=%23%20Create%20nested%20environment%0Ax%20%3D%201%0Ay%20%3D%2012%0Adef%20g1%28x%29%3A%0A%20%20%20%20def%20g2%28x%29%3A%0A%20%20%20%20%20%20%20%20%23%20Stop%20here%0A%20%20%20%20%20%20%20%20print%28x%29%0A%20%20%20%20g2%28x%20%2B%201%29%0Ag1%282%29&cumulative=true&curInstr=0&mode=display&origin=composingprograms.js&py=3&rawInputLstJSON=%5B%5D">pythontutor</a>中运行结果如下：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image1.png" alt="image1"></p>
<p><code>eg2.</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Illustrate chain of calls.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>): <span class="keyword">return</span> x*x </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_square</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> square(x)+square(y) </span><br><span class="line">z = sum_square(<span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>在<a href="https://pythontutor.com/cp/composingprograms.html#code=%23%20Illustrate%20chain%20of%20calls.%0Adef%20square%28x%29%3A%20return%20x*x%20%0Adef%20sum_square%28x,%20y%29%3A%0A%20%20%20%20return%20square%28x%29%2Bsquare%28y%29%20%0Az%20%3D%20sum_square%283,%204%29&cumulative=true&curInstr=0&mode=display&origin=composingprograms.js&py=3&rawInputLstJSON=%5B%5D">pythontutor</a>中运行结果如下：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/e3be4e9ce16265e5cd16801d14896c7.png" alt="e3be4e9ce16265e5cd16801d14896c7"></p>
<p><code>eg3.</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Functions taking and returning functions</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">id</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(<span class="built_in">id</span>)(<span class="built_in">id</span>(<span class="number">13</span>)))</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">13</span><br></pre></td></tr></table></figure>

<p>在<a href="https://pythontutor.com/cp/composingprograms.html#code=%23%20Create%20nested%20environment%0Ax%20%3D%201%0Ay%20%3D%2012%0Adef%20g1%28x%29%3A%0A%20%20%20%20def%20g2%28x%29%3A%0A%20%20%20%20%20%20%20%20%23%20Stop%20here%0A%20%20%20%20%20%20%20%20print%28x%29%0A%20%20%20%20g2%28x%20%2B%201%29%0Ag1%282%29&cumulative=true&curInstr=0&mode=display&origin=composingprograms.js&py=3&rawInputLstJSON=%5B%5D">pythontutor</a>中运行结果如下：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/6aeac24948da7c8f770e04bd9a8eb98.png" alt="6aeac24948da7c8f770e04bd9a8eb98"></p>
<p><code>eg4.</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Illustration of returing a nested function.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">incr</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> n + x</span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line">incr(<span class="number">5</span>)(<span class="number">6</span>)</span><br></pre></td></tr></table></figure>

<p>在<a href="https://pythontutor.com/cp/composingprograms.html#code=%23%20Create%20nested%20environment%0Ax%20%3D%201%0Ay%20%3D%2012%0Adef%20g1%28x%29%3A%0A%20%20%20%20def%20g2%28x%29%3A%0A%20%20%20%20%20%20%20%20%23%20Stop%20here%0A%20%20%20%20%20%20%20%20print%28x%29%0A%20%20%20%20g2%28x%20%2B%201%29%0Ag1%282%29&cumulative=true&curInstr=0&mode=display&origin=composingprograms.js&py=3&rawInputLstJSON=%5B%5D">pythontutor</a>中运行结果如下：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/b289188d9ee06ef6aa142ce40a9a74e.png" alt="b289188d9ee06ef6aa142ce40a9a74e"></p>
<h4 id="条件表达式（conditional-expressions）"><a href="#条件表达式（conditional-expressions）" class="headerlink" title="条件表达式（conditional expressions）"></a>条件表达式（<code>conditional expressions</code>）</h4><p><code>True Part</code> if <code>Condition</code> else <code>False Part</code></p>
<p>对于上面的python语句，先计算 <code>Condition</code> ，若结果为<code>True value</code>，就执行<code>True Part</code> ，否则，执行<code>False Part</code> 。</p>
<p><code>Example</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">2</span></span><br><span class="line">y = <span class="number">1</span> / x <span class="keyword">if</span> x != <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure>

<p><code>输出</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0.5</span><br></pre></td></tr></table></figure>

<p><code>Example</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line">y = <span class="number">1</span> / x <span class="keyword">if</span> x != <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure>

<p><code>输出</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>

<p><code>Example</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = <span class="number">13</span> <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">else</span> <span class="number">5</span> == <span class="number">13</span> <span class="keyword">if</span> [] <span class="keyword">else</span> <span class="number">5</span> == <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure>

<p><code>输出</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure>

<p>如果有多个<code>if-else</code>语句在同一行中，从左到右计算。</p>
<p>在<code>python</code>中，以下值都是<code>False value</code>：</p>
<ul>
<li>False</li>
<li>None</li>
<li>0</li>
<li>Empty strings, sets, lists, tuples, and directories</li>
</ul>
<p>其他的值都是<code>True value</code>。</p>
<h4 id="短路求值（short-circuit-evaluation）"><a href="#短路求值（short-circuit-evaluation）" class="headerlink" title="短路求值（short circuit evaluation）"></a>短路求值（<code>short circuit evaluation</code>）</h4><p><code>Left</code> and <code>Right</code>：</p>
<p>如果<code>Left</code>是<code>True value</code>，返回<code>Right</code>的结果，如果<code>Left</code>是<code>False value</code>，返回<code>Left</code>的结果。</p>
<p><code>Left</code> or <code>Right</code>：</p>
<p>如果<code>Left</code>是<code>True value</code>，返回<code>Left</code>的结果，如果<code>Left</code>是<code>False value</code>，返回<code>Right</code>的结果。</p>
<h4 id="条件语句（conditional-statements）"><a href="#条件语句（conditional-statements）" class="headerlink" title="条件语句（conditional statements）"></a>条件语句（<code>conditional statements</code>）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> Condition1:</span><br><span class="line">	Statements1</span><br><span class="line"><span class="keyword">elif</span> Condition2:</span><br><span class="line">	Statements2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	Statementsn</span><br></pre></td></tr></table></figure>

<p>如果<code>Condition1</code>为<strong>真</strong>，就执行<code>Statement1</code>；</p>
<p>如果<code>Condition2</code>为<strong>真</strong>，就执行<code>Statement2</code>；</p>
<p>······</p>
<p>如果所有条件都为<strong>假</strong>，就执行<code>Statementn</code>；</p>
<p>在<code>python</code>中，使用<strong>缩进</strong>来控制语句块。</p>
<h4 id="循环语句（loop-statements）"><a href="#循环语句（loop-statements）" class="headerlink" title="循环语句（loop statements）"></a>循环语句（<code>loop statements</code>）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> Condition:</span><br><span class="line">	Statements</span><br></pre></td></tr></table></figure>

<p>如果<code>Condition</code>为<strong>真</strong>，就执行<code>Statement</code>，如果<code>Condition</code>为<strong>假</strong>，结束循环；</p>
<h3 id="Lecture-4-Higher-Order-Functions"><a href="#Lecture-4-Higher-Order-Functions" class="headerlink" title="Lecture #4: Higher-Order Functions"></a>Lecture #4: Higher-Order Functions</h3><h4 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h4><p>上节课没讲完的程序，使用<code>python3 -m doctest &#123;filename&#125;</code>可以运行程序注释中的测试样例，以检测程序的正确性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  Prime numbers</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return True iff N is prime.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(1)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(2)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(8)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(21)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(23)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">smallest_factor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the smallest value k&gt;1 that evenly divides N.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># The following can be speeded up a great deal!</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_factors</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the prime factors of N.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_factors(180)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>我的实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  Prime numbers</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return True iff N is prime.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(1)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(2)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(8)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(21)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(23)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>):    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    i = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">smallest_factor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the smallest value k&gt;1 that evenly divides N.&quot;&quot;&quot;</span></span><br><span class="line">    i = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= n:</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_factors</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the prime factors of N.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_factors(180)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> n != <span class="number">1</span>:</span><br><span class="line">        i = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= n:</span><br><span class="line">            <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">                n //= i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            i += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>本课程给出的参考答案很巧妙，<code>is_prime</code>和<code>print_factors</code>的实现都使用了<code>smallest_factor</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  Prime numbers</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return True iff N is prime.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(1)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(2)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(8)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(21)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(23)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">1</span> <span class="keyword">and</span> smallest_factor(n) == n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">smallest_factor</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the smallest value k&gt;1 that evenly divides N.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># The following can be speeded up a great deal!</span></span><br><span class="line">    k = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        <span class="keyword">if</span> n % k == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> k</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_factors</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print the prime factors of N.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_factors(180)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    k = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">1</span>:</span><br><span class="line">        d = smallest_factor(n)</span><br><span class="line">        <span class="built_in">print</span>(d)</span><br><span class="line">        n = n // d     <span class="comment"># or n //= d</span></span><br></pre></td></tr></table></figure>

<h4 id="重构函数引发的思考"><a href="#重构函数引发的思考" class="headerlink" title="重构函数引发的思考"></a>重构函数引发的思考</h4><p>实现一个函数，判断参数<code>a</code>和<code>b</code>是否有相同位数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Designing Functions</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">same_length</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return true iff positive integers A and B have the same</span></span><br><span class="line"><span class="string">    number of digits when written in decimal.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; same_length(50, 70)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; same_length(50, 100)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; same_length(1000, 100000)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    a_count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a &gt;= <span class="number">10</span>:</span><br><span class="line">        a_count += <span class="number">1</span></span><br><span class="line">        a //= <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The next section looks the same as the first. Yuch!</span></span><br><span class="line">    b_count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> b &gt;= <span class="number">10</span>:</span><br><span class="line">        b_count += <span class="number">1</span></span><br><span class="line">        b //= <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> a_count == b_count</span><br></pre></td></tr></table></figure>

<p>将重复的代码段用函数实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># So, we refactor into two functions</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">same_length2</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return true iff positive integers A and B have the same</span></span><br><span class="line"><span class="string">    number of digits when written in decimal.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; same_length2(50, 70)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; same_length2(50, 100)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; same_length2(1000, 100000)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> digits2(a) == digits2(b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">digits2</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the number of decimal digits in the positive integer X.&quot;&quot;&quot;</span></span><br><span class="line">    x_count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> x &gt;= <span class="number">10</span>:</span><br><span class="line">        x_count += <span class="number">1</span></span><br><span class="line">        x //= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> x_count</span><br><span class="line"></span><br><span class="line"><span class="comment"># Now let&#x27;s generalize even further!</span></span><br></pre></td></tr></table></figure>

<p>进一步重构函数，使其适用性更强：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Now let&#x27;s generalize even further!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">same_length3</span>(<span class="params">a, b, base=<span class="number">10</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return true iff positive integers A and B have the same</span></span><br><span class="line"><span class="string">    number of digits when written in radix BASE.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; same_length3(50, 70)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; same_length3(20, 100)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; same_length3(50, 100)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; same_length3(1000, 100000)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; same_length3(50, 100, 16)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> digits3(a, base) == digits3(b, base)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">digits3</span>(<span class="params">x, base=<span class="number">10</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the number of radix BASE digits in the positive integer X.&quot;&quot;&quot;</span></span><br><span class="line">    x_count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> x &gt;= base:</span><br><span class="line">        x_count += <span class="number">1</span></span><br><span class="line">        x //= base</span><br><span class="line">    <span class="keyword">return</span> x_count</span><br></pre></td></tr></table></figure>

<h4 id="函数注释（comments-on-functions-in-general-terminology-）"><a href="#函数注释（comments-on-functions-in-general-terminology-）" class="headerlink" title="函数注释（comments on functions in general terminology ）"></a>函数注释（<code>comments on functions in general terminology</code> ）</h4><p><code>domain</code>：定义域，函数合法的参数的集合</p>
<p><code>range</code>：值域，函数合法的返回值的集合</p>
<p><code>codomain</code>：上域，函数合法的返回值的超集</p>
<p>在<code>python</code>中，可以使用<code>&quot;&quot;&quot; &quot;&quot;&quot;</code>在函数开头编写注释文档，作用如下：</p>
<ul>
<li>文档注释可以提供足够的信息给程序员，使其不需要阅读函数体，就能明白如何使用该函数；</li>
<li>文档注释明确什么输入是合法的，以及什么情况下程序员可以使用该函数，这叫做<code>前置条件</code>；</li>
<li>文档注释明确函数接收合法输入时的输出和副作用，这叫做<code>后置条件</code>；</li>
<li>总之，这就是函数的<strong>行为</strong>和<strong>语义</strong>。</li>
</ul>
<p>原文在本课的<code>ppt</code>的第4页：</p>
<blockquote>
<ul>
<li>Ideally, a <code>documentation comment</code> for a function provides enough information so that a programmer can use the function properly and understand what it does <code>without</code> having to read its body. </li>
<li>It should make clear what inputs are valid or under what conditions the function may be called. This is the <code>precondition</code>. </li>
<li>Likewise, it should make clear what the resulting output or effect of the function will be for correct inputs. This is the <code>postcondition</code>. </li>
<li>Together, these are the <code>behavior</code> or <code>semantics</code> (meaning) of the function.</li>
</ul>
</blockquote>
<h4 id="设计函数的两条原则（Two-Design-Principles）"><a href="#设计函数的两条原则（Two-Design-Principles）" class="headerlink" title="设计函数的两条原则（Two Design Principles）"></a>设计函数的两条原则（<code>Two Design Principles</code>）</h4><p>设计函数应当遵循以下原则：</p>
<ul>
<li>函数是良定义（<code>well-defined</code>）的，即函数应该简洁清晰；</li>
<li>不要重复，但程序出现很多重复的语句块时，就要进行重构（<code>refactor</code>）；</li>
<li>编写可用性更强的函数。</li>
</ul>
<p>原文在本课的<code>ppt</code>的第5页：</p>
<blockquote>
<ul>
<li>Functions should do one well-defined thing (a complicated documentation comment might suggest your function does too much).</li>
<li><code>DRY</code> (Don’t Repeat Yourself). <ul>
<li>Multiple segments of code that look really similar to each other cry out for <code>refactoring</code>. . . </li>
<li>That is, for replacing the segments with simple calls to a single general function that states their shared structure just once, with parameters used to specialize to the various cases.</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="Lecture-5-Exercising-Environments"><a href="#Lecture-5-Exercising-Environments" class="headerlink" title="Lecture #5: Exercising Environments"></a>Lecture #5: Exercising Environments</h3><p>这节课主要讲了很多关于环境(<code>environment</code>)的习题，具体请看本节课的<code>slide</code>。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><p><strong>翻译视频</strong>：<a href="https://www.bilibili.com/video/BV1v64y1Q78o/?spm_id_from=444.41.top_right_bar_window_default_collection.content.click&vd_source=249a8ad55bb26717dd55ec3dd295f644">【计算机程序的构造和解释】精译【UC Berkeley 公开课-CS61A (Spring 2021)】-中英双语字幕</a></p>
</li>
<li><p><code>github</code>: <a href="https://github.com/Maxwell2020152049/CS61A">Maxwell2020152049&#x2F;CS61A</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>CS61A</category>
        <category>Course Notes</category>
      </categories>
  </entry>
  <entry>
    <title>如何在Visual Studio中设置项目配置</title>
    <url>/2024/06/12/Cpp-IDE-%E5%A6%82%E4%BD%95%E5%9C%A8Visual-Studio%E4%B8%AD%E8%AE%BE%E7%BD%AE%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Visual Studio的项目设置默认的项目文件结构比较奇怪，对其进行简单的设置。</p>
<p>主要对输出目录和中间目录进行设置：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/41b49b294926de95e4e5d7101978224.png"></p>
<p>将项目<code>build</code>成功后，在<code>Power Shell</code>中，使用<code>tree -F</code>命令，查看目录结构：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS D:\repos\EasyX\Tiwate\Tiwate&gt; tree /F bin</span><br><span class="line">卷 Data 的文件夹 PATH 列表</span><br><span class="line">卷序列号为 02EFD5A0 B64F:69D4</span><br><span class="line">D:\REPOS\EASYX\TIWATE\TIWATE\BIN</span><br><span class="line">├─intermediate</span><br><span class="line">│  └─x64</span><br><span class="line">│      └─Debug</span><br><span class="line">│          │  game.obj</span><br><span class="line">│          │  main.obj</span><br><span class="line">│          │  Tiwate.exe.recipe</span><br><span class="line">│          │  Tiwate.ilk</span><br><span class="line">│          │  Tiwate.log</span><br><span class="line">│          │  vc143.idb</span><br><span class="line">│          │  vc143.pdb</span><br><span class="line">│          │</span><br><span class="line">│          └─Tiwate.tlog</span><br><span class="line">│                  CL.command.1.tlog</span><br><span class="line">│                  Cl.items.tlog</span><br><span class="line">│                  CL.read.1.tlog</span><br><span class="line">│                  CL.write.1.tlog</span><br><span class="line">│                  link.command.1.tlog</span><br><span class="line">│                  link.read.1.tlog</span><br><span class="line">│                  link.secondary.1.tlog</span><br><span class="line">│                  link.write.1.tlog</span><br><span class="line">│                  Tiwate.lastbuildstate</span><br><span class="line">│</span><br><span class="line">└─x64</span><br><span class="line">    └─Debug</span><br><span class="line">            Tiwate.exe</span><br><span class="line">            Tiwate.pdb</span><br></pre></td></tr></table></figure>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://www.youtube.com/watch?v=qeH9Xv_90KM">BEST Visual Studio Setup for C++ Projects!</a></li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
        <category>IDE</category>
      </categories>
  </entry>
  <entry>
    <title>【C++游戏开发】角色动画|人物移动</title>
    <url>/2024/06/12/Cpp-EasyX-%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0%E5%92%8C%E8%A7%92%E8%89%B2%E7%A7%BB%E5%8A%A8/</url>
    <content><![CDATA[<h2 id="程序运行时间的计算"><a href="#程序运行时间的计算" class="headerlink" title="程序运行时间的计算"></a>程序运行时间的计算</h2><p>有两种方法可以获得一段程序运行的时间，一种是使用标准库中的<code>chrono</code>，这个办法可以跨平台使用，而且精度和效率较高：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> start_time = std::chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="comment">// 程序执行一段时间后</span></span><br><span class="line"><span class="keyword">auto</span> end_time = std::chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="keyword">auto</span> duration = std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::millisecond&gt;(end_time - start_time).<span class="built_in">count</span>();</span><br></pre></td></tr></table></figure>

<p>这段示例代码获取的是以毫秒为单位的时间差。</p>
<p>还有一种方法就是使用<code>Window</code>的<code>getTickCount</code>函数，这种办法是平台相关的。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> start_time = <span class="built_in">GetTickCount</span>();</span><br><span class="line"><span class="comment">// 程序执行一段时间后</span></span><br><span class="line"><span class="keyword">auto</span> end_time = <span class="built_in">GetTickCount</span>();</span><br><span class="line"><span class="keyword">auto</span> duration = end_time - start_time;</span><br></pre></td></tr></table></figure>

<h2 id="初始化工作"><a href="#初始化工作" class="headerlink" title="初始化工作"></a>初始化工作</h2><p>首先对游戏进行初始化：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">game::init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">initgraph</span>(<span class="number">1280</span>, <span class="number">720</span>, EX_SHOWCONSOLE);</span><br><span class="line">	<span class="built_in">BeginBatchDraw</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">load_animation</span>();</span><br><span class="line">	<span class="built_in">loadimage</span>(&amp;background_img, <span class="string">L&quot;.\\img\\background.png&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h3><p><code>EasyX</code>提供了<code>loadimage</code>和<code>putimage</code>这组接口将图片加载到窗口中。</p>
<p>以下代码加载了人物的图片：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">game::load_animation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; game::PLAYER_ANIMATION_NUMBER; i++) &#123;</span><br><span class="line">		<span class="built_in">loadimage</span>(&amp;player_left[i], (<span class="string">L&quot;.\\img\\player_left_&quot;</span> + std::<span class="built_in">to_wstring</span>(i) + <span class="string">L&quot;.png&quot;</span>).<span class="built_in">c_str</span>());</span><br><span class="line">		<span class="built_in">loadimage</span>(&amp;player_right[i], (<span class="string">L&quot;.\\img\\player_right_&quot;</span> + std::<span class="built_in">to_wstring</span>(i) + <span class="string">L&quot;.png&quot;</span>).<span class="built_in">c_str</span>());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="处理按键消息"><a href="#处理按键消息" class="headerlink" title="处理按键消息"></a>处理按键消息</h2><p>游戏需要支持方向键和<code>WASD</code>移动，实现如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">game::process_messages</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ExMessage msg;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">peekmessage</span>(&amp;msg)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (msg.message == WM_KEYDOWN) &#123;</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;KEY DOWN&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (msg.vkcode == VK_UP || msg.vkcode == VK_W)  game::move_up = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (msg.vkcode == VK_DOWN || msg.vkcode == VK_S)  game::move_down = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (msg.vkcode == VK_LEFT || msg.vkcode == VK_A) &#123;</span><br><span class="line">				game::move_left = <span class="literal">true</span>;</span><br><span class="line">				game::player_toward = game::Towards::LEFT;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (msg.vkcode == VK_RIGHT || msg.vkcode == VK_D) &#123;</span><br><span class="line">				game::move_right = <span class="literal">true</span>;</span><br><span class="line">				game::player_toward = game::Towards::RIGHT;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (msg.message == WM_KEYUP) &#123;</span><br><span class="line">			std::cout &lt;&lt; <span class="string">&quot;KEY UP&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (msg.vkcode == VK_UP || msg.vkcode == VK_W)  game::move_up = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (msg.vkcode == VK_DOWN || msg.vkcode == VK_S)  game::move_down = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (msg.vkcode == VK_LEFT || msg.vkcode == VK_A)  game::move_left = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (msg.vkcode == VK_RIGHT || msg.vkcode == VK_D)  game::move_right = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (game::move_up)  game::player_position.y -= game::player_speed;</span><br><span class="line">	<span class="keyword">if</span> (game::move_down)  game::player_position.y += game::player_speed;</span><br><span class="line">	<span class="keyword">if</span> (game::move_left)  game::player_position.x -= game::player_speed;</span><br><span class="line">	<span class="keyword">if</span> (game::move_right)  game::player_position.x += game::player_speed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="绘制游戏画面"><a href="#绘制游戏画面" class="headerlink" title="绘制游戏画面"></a>绘制游戏画面</h2><p>游戏画面由人物和背景组成，人物的朝向决定和使用哪一组人物图片素材，每次经过5个游戏帧数切换一张图片，即5个游戏帧等价为1个图片帧：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">game::draw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cleardevice</span>();</span><br><span class="line">	<span class="comment">// 绘制背景图片</span></span><br><span class="line">	<span class="built_in">putimage</span>(<span class="number">0</span>, <span class="number">0</span>, &amp;game::background_img);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 绘制角色</span></span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> counter = <span class="number">0</span>;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> index_current_animation = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (++counter % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">		++index_current_animation;</span><br><span class="line">		index_current_animation %= game::PLAYER_ANIMATION_NUMBER;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (game::player_toward == game::Towards::LEFT)</span><br><span class="line">		game::<span class="built_in">putimage_alpha</span>(game::player_position.x, game::player_position.y, &amp;game::player_left[index_current_animation]);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (game::player_toward == game::Towards::RIGHT)</span><br><span class="line">		game::<span class="built_in">putimage_alpha</span>(game::player_position.x, game::player_position.y, &amp;game::player_right[index_current_animation]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">FlushBatchDraw</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.bilibili.com/video/BV1vM411f7nJ/">【从零开始的C++游戏开发】程序动画实现和角色移动 | EasyX制作提瓦特幸存者</a></li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
        <category>EasyX</category>
      </categories>
  </entry>
  <entry>
    <title>如何在Visual Studio中debug</title>
    <url>/2024/06/12/Cpp-IDE-%E5%A6%82%E4%BD%95%E5%9C%A8Visual-Studio%E4%B8%ADdebug/</url>
    <content><![CDATA[<h2 id="Debug流程"><a href="#Debug流程" class="headerlink" title="Debug流程"></a>Debug流程</h2><p>在<code>Visual Studio</code>中<code>debug</code>可以分为以下几步：</p>
<p>在希望程序停止的地方设置断点(<code>break points</code>)，使用<code>debugger</code>运行程序。</p>
<p>以下几个按键是使用频率最高的：</p>
<ul>
<li><code>continue(F5)</code>：继续执行程序，直到遇到下一个断点或者程序结束。</li>
<li><code>step into(F11)</code>：如果当前语句包含函数，会进入该函数。</li>
<li><code>step over(F10)</code>：执行当前语句后，跳到下一条语句。</li>
<li><code>step out(Shift + F11)</code>：跳出当前函数。</li>
</ul>
<p>以下几个窗口使用频率较高：</p>
<ul>
<li><code>Watch</code>：能够查看变量的值和地址。</li>
<li><code>Memory</code>：程序的内存视图。</li>
<li><code>Call Stack</code>：函数调用栈。</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.youtube.com/watch?v=0ebzPwixrJA">How to DEBUG C++ in VISUAL STUDIO</a></li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
        <category>IDE</category>
      </categories>
  </entry>
  <entry>
    <title>CS61A 课程笔记 Week04</title>
    <url>/2024/06/11/CS61A-CourseNote-Week04/</url>
    <content><![CDATA[<h2 id="Week4"><a href="#Week4" class="headerlink" title="Week4"></a>Week4</h2><h3 id="Lecture-9-Still-More-on-Functions"><a href="#Lecture-9-Still-More-on-Functions" class="headerlink" title="Lecture #9: Still More on Functions"></a>Lecture #9: Still More on Functions</h3><h4 id="练习：翻转数字（Exercise-Reversing-Digits）"><a href="#练习：翻转数字（Exercise-Reversing-Digits）" class="headerlink" title="练习：翻转数字（Exercise: Reversing Digits）"></a>练习：翻转数字（<code>Exercise: Reversing Digits</code>）</h4><p>实现一个<code>reverse digits(n)</code>函数，返回翻转的<code>n</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_digits</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Assuming N &gt;= 0 is an integer.  Return the number whose</span></span><br><span class="line"><span class="string">    base-10 representation is the reverse of that of N.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_digits(0)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_digits(1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_digits(123)</span></span><br><span class="line"><span class="string">    321</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_digits(10)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_digits(12321)</span></span><br><span class="line"><span class="string">    12321</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_digits(2222222)</span></span><br><span class="line"><span class="string">    2222222</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_digits(102)</span></span><br><span class="line"><span class="string">    201</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(n) <span class="keyword">is</span> <span class="built_in">int</span> <span class="keyword">and</span> n &gt;= <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> reverse_digits(n // <span class="number">10</span>) + (n % <span class="number">10</span>) * <span class="number">10</span> ** (num_digits(n) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num_digits</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the number of decimal digits in the positive integer X.&quot;&quot;&quot;</span></span><br><span class="line">    x_count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> x &gt;= <span class="number">10</span>:</span><br><span class="line">        x_count += <span class="number">1</span></span><br><span class="line">        x //= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> x_count</span><br></pre></td></tr></table></figure>

<h4 id="练习：交错数字（Exercise-Interleaving-Digits）"><a href="#练习：交错数字（Exercise-Interleaving-Digits）" class="headerlink" title="练习：交错数字（Exercise: Interleaving Digits）"></a>练习：交错数字（<code>Exercise: Interleaving Digits</code>）</h4><p>实现一个<code>interleave(a, b)</code>函数，返回<code>a</code>、<code>b</code>交错的值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Interleaving digits (spoiler alert!)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">interleave</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Assuming A and B are non-negative integers with the same </span></span><br><span class="line"><span class="string">    number of base-10 digits, return the number whose base-10 </span></span><br><span class="line"><span class="string">    representation is the interleaving of A&#x27;s and B&#x27;s digits,</span></span><br><span class="line"><span class="string">    starting with A.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; interleave(1, 2)</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; interleave(0, 1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; interleave(1, 0)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; interleave(123,456)</span></span><br><span class="line"><span class="string">    142536</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; interleave(111111, 222222)</span></span><br><span class="line"><span class="string">    121212121212</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> a &lt;= <span class="number">9</span>:</span><br><span class="line">        <span class="keyword">return</span> a * <span class="number">10</span> + b</span><br><span class="line">    <span class="keyword">return</span> interleave(a // <span class="number">10</span>, b // <span class="number">10</span>) * <span class="number">100</span> + interleave(a % <span class="number">10</span>, b %<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h4 id="环境图填空题（Environment-Detective）"><a href="#环境图填空题（Environment-Detective）" class="headerlink" title="环境图填空题（Environment Detective）"></a>环境图填空题（<code>Environment Detective</code>）</h4><p>根据右侧的环境框架，给左边的程序代码填空：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image6.png"></p>
<p>答案如下：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image7.png"></p>
<p><a href="https://pythontutor.com/cp/composingprograms.html#code=def%20flip%28flop%29%3A%0A%20%20%20%20if%20flop%20%3D%3D%203%3A%0A%20%20%20%20%20%20%20%20return%20None%0A%20%20%20%20flip%20%3D%20lambda%20flip%3A%203%0A%20%20%20%20return%20flip%0A%0Adef%20flop%28flip%29%3A%0A%20%20%20%20return%20flop%0A%0Aflip,%20flop%20%3D%20flop,%20flip%0A%0Aflip%28flop%281%29%282%29%29%283%29&cumulative=true&curInstr=19&mode=display&origin=composingprograms.js&py=3&rawInputLstJSON=%5B%5D">在PythonTutor中可以看到效果</a></p>
<h3 id="Lecture-10-Containers-and-Sequences"><a href="#Lecture-10-Containers-and-Sequences" class="headerlink" title="Lecture #10: Containers and Sequences"></a>Lecture #10: Containers and Sequences</h3><h4 id="Decorators"><a href="#Decorators" class="headerlink" title="Decorators"></a>Decorators</h4><p>在<code>python</code>中，可以使用如下语法设置追踪函数，设置之后，每次调用<code>square</code>函数都会调用<code>trace1</code>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tracing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">trace1</span>(<span class="params">f</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a function that takes a single argument, x, prints it,</span></span><br><span class="line"><span class="string">    computes and prints F(x), and returns the computed value.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">traced</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&gt;&quot;</span>, x)</span><br><span class="line">        r = f(x)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&lt;-&quot;</span>, r)</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line">    <span class="keyword">return</span> traced</span><br><span class="line"></span><br><span class="line"><span class="meta">@trace1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="meta">@trace1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">traced_reverse</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(n) <span class="keyword">is</span> <span class="built_in">int</span> <span class="keyword">and</span> n &gt;= <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> traced_reverse(n // <span class="number">10</span>) + (n % <span class="number">10</span>) * <span class="number">10</span> ** (num_digits(n) - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h4 id="Pairs"><a href="#Pairs" class="headerlink" title="Pairs"></a>Pairs</h4><p>在<code>python</code>中，如何使用已学知识实现一种含有两个元素的数据类型。</p>
<p>若两个元素都是非负数，可以使用如下方法实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Pairs of non-negative integers</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pair</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a value that represents the ordered pair of</span></span><br><span class="line"><span class="string">    non-negative integer values (A, B).&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>**a * <span class="number">3</span>**b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">left</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">return</span> multiplicity(<span class="number">2</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">right</span>(<span class="params">p</span>):</span><br><span class="line">    <span class="keyword">return</span> multiplicity(<span class="number">3</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiplicty</span>(<span class="params">factor, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Assuming FACTOR and N are integers with FACTOR &gt; 1, return</span></span><br><span class="line"><span class="string">    the number of times N may be evenly divided by FACTOR.&quot;&quot;&quot;</span></span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n % factor == <span class="number">0</span>:</span><br><span class="line">        r += <span class="number">1</span></span><br><span class="line">        n //= factor</span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure>

<p>进一步泛化，可以使用如下方法实现能够修改的<code>pair</code>：</p>
<p>注意：在内部函数直接给<code>a</code>、<code>b</code>复制会创建新的变量，不会达到预期的效果，可以用<code>nolocal</code>修饰符从父环境中引入环境变量。</p>
<blockquote>
<ul>
<li><p>Assignment in Python usually creates or sets a <code>local variable</code> in the currently executing environment frame. </p>
</li>
<li><p>But that’s useless in the attempted implementation (see the test bad pair function in 10.py). </p>
</li>
<li><p>We need instead to indicate that we actually want to set the variables a and b introduced <code>outside</code> the pair func function in the enclosing (parent) function’s (pair’s) frame. </p>
</li>
<li><p>The declaration</p>
<p>  <code>nonlocal</code> var1, var2, . . . </p>
<p>  means “assignment to any of the variables vari in the current frame actually assigns to those variables in its parent’s frame, grandparent’s frame, etc. (not including the global frame).”</p>
</li>
<li><p>Furthermore, those variables must already exists in one of these ancestor frames.</p>
</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pair</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pair_func</span>(<span class="params">which, v=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> a, b</span><br><span class="line">        <span class="keyword">if</span> which == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        <span class="keyword">elif</span> which == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> b</span><br><span class="line">        <span class="keyword">elif</span> which == <span class="number">2</span>:</span><br><span class="line">            a = v</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            b = v</span><br><span class="line">    <span class="keyword">return</span> pair_func</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_good_pair</span>():</span><br><span class="line">    aPair = pair(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">    set_left(aPair, <span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(left(aPair))</span><br></pre></td></tr></table></figure>

<h4 id="序列（Sequences）"><a href="#序列（Sequences）" class="headerlink" title="序列（Sequences）"></a>序列（<code>Sequences</code>）</h4><p>序列有以下属性（不同序列可能有不同属性）：</p>
<ul>
<li>有限性（<code>finite</code>）</li>
<li>可修改性（<code>mutable</code>）</li>
<li>可索引性（<code>indexable</code>）</li>
<li>可迭代性（<code>iterable</code>）</li>
</ul>
<blockquote>
<ul>
<li>The term <code>sequence</code> refers generally to a data structure consisting of an <code>indexed collection of values</code>, which we’ll generally call elements. </li>
<li>That is, there is a first, second, third value (which CS types call #0, #1, #2, etc.) </li>
<li>A sequence may be <code>finite</code> (with a length) or <code>infinite</code>. </li>
<li>It may be <code>mutable</code> (elements can change) or <code>immutable</code>. </li>
<li>It may be <code>indexable</code>: its elements may be accessed via <code>selection</code> by their indices. </li>
<li>It may be <code>iterable</code>: its values may be accessed <code>sequentially</code> from first to last.</li>
</ul>
</blockquote>
<p>在<code>python</code>中，有以下几种序列：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image8.png"></p>
<h4 id="字符串字面量（String-Literals）"><a href="#字符串字面量（String-Literals）" class="headerlink" title="字符串字面量（String Literals）"></a>字符串字面量（<code>String Literals</code>）</h4><p>以下代码说明了字符串字面量的特性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># String Literals</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string_literals</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Single-quoted strings may contain &quot;double-quoted strings&quot;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Double-quoted strings may contain &#x27;single-quoted strings&#x27;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;Triple double quotes allow &#x27;this&#x27;, &quot;this&quot;, and &quot;&quot;this&quot;&quot;,</span></span><br><span class="line"><span class="string">as well as newline characters&quot;&quot;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;Triple single quotes allow &quot;this&quot;, &#x27;this&#x27;, and &#x27;&#x27;this&#x27;&#x27;,</span></span><br><span class="line"><span class="string">as well as newline characters&#x27;&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;A test of\nescapes\\.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Some unicode: \u0395\u1f55\u03c1\u03b7\u03ba\u03b1\u2764&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">r&quot;In raw strings (starting with &#x27;r&#x27;), \escapes are not replaced&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="选择和切片"><a href="#选择和切片" class="headerlink" title="选择和切片"></a>选择和切片</h4><p>列表可以通过索引得到元素，通过区间切片的到部分列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Collection of sequence expressions</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_sequences</span>():</span><br><span class="line">    t = (<span class="number">2</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>)   <span class="comment"># Tuple</span></span><br><span class="line">    L = [<span class="number">2</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]   <span class="comment"># List</span></span><br><span class="line">    R = <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">13</span>)        <span class="comment"># Integers 2-12.</span></span><br><span class="line">    E = <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">13</span>, <span class="number">2</span>)     <span class="comment"># Even integers 2-12.</span></span><br><span class="line">    S = <span class="string">&quot;Hello, world!&quot;</span>     <span class="comment"># Strings (sequences of characters)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;t[2] == <span class="subst">&#123;t[<span class="number">2</span>]&#125;</span>; L[2] == <span class="subst">&#123;L[<span class="number">2</span>]&#125;</span>; R[2] == <span class="subst">&#123;R[<span class="number">2</span>]&#125;</span>; E[2] == <span class="subst">&#123;E[<span class="number">2</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;t[-1] == <span class="subst">&#123;t[-<span class="number">1</span>]&#125;</span>&#x27; t[len(t)-1] == <span class="subst">&#123;t[<span class="built_in">len</span>(t)-<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;S[1] == <span class="subst">&#123;S[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;t[1:4] == <span class="subst">&#123;t[<span class="number">1</span>:<span class="number">4</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;t[2:] == <span class="subst">&#123;t[<span class="number">2</span>:]&#125;</span>; t[2:len(t)] == <span class="subst">&#123;t[<span class="number">2</span>:<span class="built_in">len</span>(t)]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;t[::2] == <span class="subst">&#123;t[::<span class="number">2</span>]&#125;</span>; t[0:len(t):2] == <span class="subst">&#123;t[<span class="number">0</span>:<span class="built_in">len</span>(t):<span class="number">2</span>]&#125;</span>; &quot;</span>,</span><br><span class="line">          <span class="string">f&quot;t[::-1] == <span class="subst">&#123;t[::-<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;S[0:5] == <span class="subst">&#123;S[<span class="number">0</span>:<span class="number">5</span>]&#125;</span>; S[0:5:2] == <span class="subst">&#123;S[<span class="number">0</span>:<span class="number">5</span>:<span class="number">2</span>]&#125;</span>; S[4::-1] == <span class="subst">&#123;S[<span class="number">4</span>::-<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;S[1:2] == <span class="subst">&#123;S[<span class="number">1</span>:<span class="number">2</span>]&#125;</span>; S[1] == <span class="subst">&#123;S[<span class="number">1</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>用切片的特性很容易实现上节课的<code>reverse_digits</code>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_digits</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Assuming N &gt;= 0 is an integer.  Return the number whose</span></span><br><span class="line"><span class="string">    base-10 representation is the reverse of that of N.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_digits(0)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_digits(1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_digits(123)</span></span><br><span class="line"><span class="string">    321</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_digits(10)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_digits(12321)</span></span><br><span class="line"><span class="string">    12321</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_digits(2222222)</span></span><br><span class="line"><span class="string">    2222222</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; reverse_digits(102)</span></span><br><span class="line"><span class="string">    201</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">str</span>(n)[-<span class="number">1</span>::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<h4 id="序列的结合与转化（Sequence-Combination-and-Conversion）"><a href="#序列的结合与转化（Sequence-Combination-and-Conversion）" class="headerlink" title="序列的结合与转化（Sequence Combination and Conversion）"></a>序列的结合与转化（<code>Sequence Combination and Conversion</code>）</h4><p>使用<code>list()</code>、<code>tuple()</code>、<code>str()</code>函数，可以实现不同序列的转化。</p>
<h4 id="序列的循环迭代器（Sequence-Iteration-For-Loops）"><a href="#序列的循环迭代器（Sequence-Iteration-For-Loops）" class="headerlink" title="序列的循环迭代器（Sequence Iteration: For Loops）"></a>序列的循环迭代器（<code>Sequence Iteration: For Loops</code>）</h4><p>可以使用如下形式，遍历列表中的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> L:</span><br><span class="line">    ···</span><br></pre></td></tr></table></figure>

<h4 id="一个有意思的点"><a href="#一个有意思的点" class="headerlink" title="一个有意思的点"></a>一个有意思的点</h4><p>元组（<code>tuple</code>）是不可被修改的，列表（<code>list</code>）是可以被修改的，但是元组中的列表的元素可以被修改。原因是，元组中保存的是列表的引用，该引用不可以被修改，但引用的对象是列表，可以被修改。</p>
<p><code>eg</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>T = (<span class="number">2020</span>, [<span class="number">1</span>, <span class="number">5</span>], <span class="number">2049</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>T[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">3</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>T</span><br><span class="line">(<span class="number">2020</span>, [<span class="number">3</span>, <span class="number">5</span>], <span class="number">2049</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>T[<span class="number">1</span>] = [<span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">Traceback (most recent call last):       </span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;    </span><br><span class="line">TypeError: <span class="string">&#x27;tuple&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure>

<h3 id="Lecture-11-Sequences-II-and-Data-Abstraction"><a href="#Lecture-11-Sequences-II-and-Data-Abstraction" class="headerlink" title="Lecture #11: Sequences (II) and Data Abstraction"></a>Lecture #11: Sequences (II) and Data Abstraction</h3><p><code>Lab</code>：<a href="https://inst.eecs.berkeley.edu/~cs61a/sp21/lab/lab04/">Lab 4: Midterm Review</a></p>
<p><code>Slide</code>：<a href="https://inst.eecs.berkeley.edu/~cs61a/sp21/assets/slides/11-Data_Abstraction_full.pdf">11-Data_Abstraction_full.pdf</a></p>
<h4 id="多变量（Multiple-Variables）"><a href="#多变量（Multiple-Variables）" class="headerlink" title="多变量（Multiple Variables）"></a>多变量（<code>Multiple Variables</code>）</h4><p>序列的循环迭代器可以支持多变量的迭代：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [ (<span class="number">1</span>, <span class="number">9</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">5</span>, <span class="number">6</span>), (<span class="number">3</span>, <span class="number">3</span>) ]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>same = <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x, y <span class="keyword">in</span> L:</span><br><span class="line"><span class="meta">... </span>   <span class="keyword">if</span> x == y:</span><br><span class="line"><span class="meta">... </span>       same += <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>same</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><p><code>zip</code>函数可以将多个序列组合在一起：</p>
<p>注意，<code>zip</code>函数的返回值是<strong>生成器</strong>，可能需要类型转换函数进行转换。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Examples of zip() function and multiple assignment in a loop.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">zip</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>], [<span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">10</span>]))</span><br><span class="line">[(<span class="number">1</span>, <span class="number">9</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">5</span>, <span class="number">6</span>), (<span class="number">3</span>, <span class="number">3</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Length of result is that of shortest sequence</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">zip</span>([<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>], [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">11</span>], [<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>]))</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>), (<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>beasts = [<span class="string">&quot;aardvark&quot;</span>, <span class="string">&quot;axolotl&quot;</span>, <span class="string">&quot;gnu&quot;</span>, <span class="string">&quot;hartebeest&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n, animal <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>), beasts):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(n, animal)</span><br><span class="line"><span class="number">1</span> aardvark</span><br><span class="line"><span class="number">2</span> axolotl</span><br><span class="line"><span class="number">3</span> gnu</span><br><span class="line"><span class="number">4</span> hartebeest</span><br></pre></td></tr></table></figure>

<h4 id="列表的修改（Modifying-Lists）"><a href="#列表的修改（Modifying-Lists）" class="headerlink" title="列表的修改（Modifying Lists）"></a>列表的修改（<code>Modifying Lists</code>）</h4><p>列表是可以修改的，可以通过其元素的引用修改其内容，也可以通过切片修改：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Various examples of mutating a list.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">2</span>] = <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">1</span>:<span class="number">3</span>] = [<span class="number">9</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L</span><br><span class="line">[<span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">2</span>:<span class="number">4</span>] = []            <span class="comment"># Deleting elements</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L</span><br><span class="line">[<span class="number">1</span>, <span class="number">9</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">1</span>:<span class="number">1</span>] = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]  <span class="comment"># Inserting elements</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="built_in">len</span>(L):] = [<span class="number">10</span>, <span class="number">11</span>]  <span class="comment"># Appending</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">0</span>:<span class="number">0</span>] = <span class="built_in">range</span>(-<span class="number">3</span>, <span class="number">0</span>)  <span class="comment"># Prepending</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L</span><br><span class="line">[-<span class="number">3</span>, -<span class="number">2</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">11</span>]</span><br></pre></td></tr></table></figure>

<p>列表支持乘法运算符<code>*</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Examples of the * operators on sequences.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">0</span>] * <span class="number">3</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">1</span>, <span class="number">2</span>) * <span class="number">3</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;a&quot;</span> * <span class="number">5</span></span><br><span class="line"><span class="string">&#x27;aaaaa&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> * <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="string">&#x27;aaaaa&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="列表推导式（List-Comprehensions）"><a href="#列表推导式（List-Comprehensions）" class="headerlink" title="列表推导式（List Comprehensions）"></a>列表推导式（<code>List Comprehensions</code>）</h4><p>在<code>python</code>中，使用以下形式的语句可以推导出一个列表，推导式中的变量都是局部的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[ &lt;expression&gt; <span class="keyword">for</span> &lt;var&gt; <span class="keyword">in</span> &lt;sequence expression&gt; <span class="keyword">if</span> &lt;boolean expression&gt; ]</span><br></pre></td></tr></table></figure>

<p>使用如下代码可以生成一个列表，包含[0, 100]中的素数的平方：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[ x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>) <span class="keyword">if</span> isprime(x) ]</span><br></pre></td></tr></table></figure>

<p>可以在<code>for</code>语句中嵌套<code>for</code>语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[ (a, b) <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="number">13</span>) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>) ]</span><br><span class="line">[(<span class="number">10</span>, <span class="number">0</span>), (<span class="number">10</span>, <span class="number">1</span>), (<span class="number">11</span>, <span class="number">0</span>), (<span class="number">11</span>, <span class="number">1</span>), (<span class="number">12</span>, <span class="number">0</span>), (<span class="number">12</span>, <span class="number">1</span>)]</span><br></pre></td></tr></table></figure>

<p><code>eg</code>：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[ (a, b) <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(a, <span class="number">4</span>) ]  </span><br><span class="line">[(<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">2</span>), (<span class="number">0</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">3</span>)]</span><br></pre></td></tr></table></figure>

<p><code>eg</code>：</p>
<p>如果一个变量不重要，可以使用<code>_</code>作为其变量名。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[ <span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]  </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[ <span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)] </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<h4 id="练习1（Exercise-I）"><a href="#练习1（Exercise-I）" class="headerlink" title="练习1（Exercise I）"></a>练习1（<code>Exercise I</code>）</h4><p>实现一个<code>match(a, b)</code>函数，返回<code>a</code>、<code>b</code>两个序列中相同索引的元素相等的个数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">matches</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the number of values k such that A[k] == B[k].</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; matches([1, 2, 3, 4, 5], [3, 2, 3, 0, 5])</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; matches(&quot;abdomens&quot;, &quot;indolence&quot;)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; matches(&quot;abcd&quot;, &quot;dcba&quot;)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; matches(&quot;abcde&quot;, &quot;edcba&quot;)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(a, b):</span><br><span class="line">        <span class="keyword">if</span> x == y:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> cnt</span><br></pre></td></tr></table></figure>

<p>等价的，更简洁的实现：</p>
<p><code>sum</code>可以对列表求值，<code>True</code>和<code>False</code>支持加法运算符，结果是整数，<code>True</code>被视为<code>1</code>，<code>False</code>被视为<code>0</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">sum</span>([ <span class="number">1</span> <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(a, b) <span class="keyword">if</span> x == y ])</span><br></pre></td></tr></table></figure>

<h4 id="练习2（Exercise-II）"><a href="#练习2（Exercise-II）" class="headerlink" title="练习2（Exercise II）"></a>练习2（<code>Exercise II</code>）</h4><p>实现<code>triangle(n)</code>函数，输出形如<code>[[0], ..., [n]]</code>的内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">triangle</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Assuming N &gt;= 0, return the list consisting of N lists:</span></span><br><span class="line"><span class="string">    [1], [1, 2], [1, 2, 3], ... [1, 2, ... N].</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; triangle(0)</span></span><br><span class="line"><span class="string">    []</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; triangle(1)</span></span><br><span class="line"><span class="string">    [[1]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; triangle(5)</span></span><br><span class="line"><span class="string">    [[1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [ [ x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i + <span class="number">1</span>) ] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>) ]</span><br></pre></td></tr></table></figure>

<p>等价的，更简洁的实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> [ <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, i + <span class="number">1</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>) ]</span><br></pre></td></tr></table></figure>

<h4 id="数据抽象（Data-Abstraction）"><a href="#数据抽象（Data-Abstraction）" class="headerlink" title="数据抽象（Data Abstraction）"></a>数据抽象（<code>Data Abstraction</code>）</h4><p>几个重要的概念：</p>
<ul>
<li><p>抽象数据类型（<code>abstract data type (ADT)</code>）</p>
</li>
<li><p>应用程序员接口（<code>Application Programmer’s Interface (API)</code>）</p>
</li>
</ul>
<p>抽象数据类型需要：</p>
<ul>
<li>构造器（<code>Constructors</code>）</li>
<li>访问器（<code>Accessors</code>）</li>
<li>修改器（<code>Mutators</code>）</li>
</ul>
<h4 id="有理数（Rational-Numbers）"><a href="#有理数（Rational-Numbers）" class="headerlink" title="有理数（Rational Numbers）"></a>有理数（<code>Rational Numbers</code>）</h4><p>本节课介绍了如何实现有理数的<code>ADT</code>，详见<code>Slide</code>的<code>P13~P21</code>，抽象层次图如下：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image9.png"></p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Rationals</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_rat</span>(<span class="params">n, d</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;The rational number N/D, assuming N, D are integers, D!=0&quot;&quot;&quot;</span></span><br><span class="line">    g = gcd(n, d)</span><br><span class="line">    n //= g; d //= g</span><br><span class="line">    <span class="keyword">return</span> (n, d)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">numer</span>(<span class="params">r</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;The numerator of rational number R in lowest terms.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> r[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">denom</span>(<span class="params">r</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;The denominator of rational number R in lowest terms.</span></span><br><span class="line"><span class="string">       Always positive.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> r[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_rat</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> make_rat(numer(x) * denom(y) + numer(y) * denom(x),</span><br><span class="line">                    denom(x) * denom(y))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_rat</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> make_rat(numer(x) * numer(y), denom(x) * denom(y))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str_rat</span>(<span class="params">r</span>):  <span class="comment"># (For fun: a little new Python string magic)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(numer(r)) <span class="keyword">if</span> denom(r) == <span class="number">1</span> <span class="keyword">else</span> <span class="string">f&quot;<span class="subst">&#123;numer(r)&#125;</span>/<span class="subst">&#123;denom(r)&#125;</span>&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">equal_rat</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> numer(x) * denom(y) == numer(y) * denom(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exact_harmonic_number</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return 1 + 1/2 + 1/3 + ... + 1/N as a rational number.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; str_rat(exact_harmonic_number(1))</span></span><br><span class="line"><span class="string">    &#x27;1&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; str_rat(exact_harmonic_number(3))</span></span><br><span class="line"><span class="string">    &#x27;11/6&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; str_rat(exact_harmonic_number(10))</span></span><br><span class="line"><span class="string">    &#x27;7381/2520&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    s = make_rat(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        s = add_rat(s, make_rat(<span class="number">1</span>, k))</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><strong>翻译视频</strong>：<a href="https://www.bilibili.com/video/BV1v64y1Q78o/?spm_id_from=444.41.top_right_bar_window_default_collection.content.click&vd_source=249a8ad55bb26717dd55ec3dd295f644">【计算机程序的构造和解释】精译【UC Berkeley 公开课-CS61A (Spring 2021)】-中英双语字幕</a></li>
<li><code>github</code>: <a href="https://github.com/Maxwell2020152049/CS61A">Maxwell2020152049&#x2F;CS61A</a></li>
</ul>
]]></content>
      <categories>
        <category>CS61A</category>
        <category>Course Notes</category>
      </categories>
  </entry>
  <entry>
    <title>CS61A Lab03</title>
    <url>/2024/06/11/CS61A-Lab03/</url>
    <content><![CDATA[<h1 id="Lab-3-Recursion-Tree-Recursion"><a href="#Lab-3-Recursion-Tree-Recursion" class="headerlink" title="Lab 3: Recursion, Tree Recursion"></a>Lab 3: Recursion, Tree Recursion</h1><h2 id="What-Would-Python-Display"><a href="#What-Would-Python-Display" class="headerlink" title="What Would Python Display?"></a>What Would Python Display?</h2><h3 id="Q1-WWPD-Recursion"><a href="#Q1-WWPD-Recursion" class="headerlink" title="Q1: WWPD: Recursion"></a>Q1: WWPD: Recursion</h3><p>使用如下命令进行测试：</p>
<p>如果结果是函数，就输入<code>Function</code>，如果是错误就输入<code>Error</code>，如果没有输出就输入<code>Nothing</code>，如果出现无限循环或者无限递归，输出<code>Infinite</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q recursion-wwpd -u --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Lab 3</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Recursion &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">What would Python display? If you get stuck, try it out in the Python</span><br><span class="line">interpreter!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; def f(a, b):</span></span><br><span class="line">...     if a &gt; b:</span><br><span class="line">...         return f(a - 3, 2 * b)</span><br><span class="line">...     elif a &lt; b:</span><br><span class="line">...         return f(b // 2, a)</span><br><span class="line">...     else:</span><br><span class="line">...         return b</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; f(2, 2)</span></span><br><span class="line">? 2</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; f(7, 4)</span></span><br><span class="line">? 4</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; f(2, 28)</span></span><br><span class="line">? 2</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? 8</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; f(-1, -3)</span></span><br><span class="line">? Error</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? Infinite</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Recursion unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<h3 id="Q2-WWPD-Journey-to-the-Center-of-the-Earth"><a href="#Q2-WWPD-Journey-to-the-Center-of-the-Earth" class="headerlink" title="Q2: WWPD: Journey to the Center of the Earth"></a>Q2: WWPD: Journey to the Center of the Earth</h3><p>使用如下命令进行测试：</p>
<p>如果结果是函数，就输入<code>Function</code>，如果是错误就输入<code>Error</code>，如果没有输出就输入<code>Nothing</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q sr-wwpd -u --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Lab 3</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Self-Reference &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 1)</span><br><span class="line"></span><br><span class="line">What would Python display? If you get stuck, try it out in the Python</span><br><span class="line">interpreter!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; def crust():</span></span><br><span class="line">...   print(&quot;70km&quot;)</span><br><span class="line">...   def mantle():</span><br><span class="line">...       print(&quot;2900km&quot;)</span><br><span class="line">...       def core():</span><br><span class="line">...           print(&quot;5300km&quot;)</span><br><span class="line">...           return mantle()</span><br><span class="line">...       return core</span><br><span class="line">...   return mantle</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; drill = crust</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; drill = drill()</span></span><br><span class="line">? 70km</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; drill = drill()</span></span><br><span class="line">? 2900km</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; drill = drill()</span></span><br><span class="line">(line 1)? 5300km</span><br><span class="line">(line 2)? 2900km</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; drill()</span></span><br><span class="line">(line 1)? 5300km</span><br><span class="line">(line 2)? 2900km</span><br><span class="line">(line 3)? Function</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for Self-Reference unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<h2 id="Coding-Practice"><a href="#Coding-Practice" class="headerlink" title="Coding Practice"></a>Coding Practice</h2><h3 id="Q3-Summation"><a href="#Q3-Summation" class="headerlink" title="Q3: Summation"></a>Q3: Summation</h3><p>实现一个函数<code>summation(n, term)</code>，<code>n</code>是正整数，<code>term</code>是一个函数，接收一个参数并返回值，<code>summation</code>计算<code>term(1) + term(2) + ... + trem(n)</code>，并返回结果。</p>
<p>不允许使用循环语句。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">summation</span>(<span class="params">n, term</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the sum of numbers 1 through n (including n) wíth term applied to each number.</span></span><br><span class="line"><span class="string">    Implement using recursion!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation(5, lambda x: x * x * x) # 1^3 + 2^3 + 3^3 + 4^3 + 5^3</span></span><br><span class="line"><span class="string">    225</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation(9, lambda x: x + 1) # 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10</span></span><br><span class="line"><span class="string">    54</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; summation(5, lambda x: 2**x) # 2^1 + 2^2 + 2^3 + 2^4 + 2^5</span></span><br><span class="line"><span class="string">    62</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # Do not use while/for loops!</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban iteration</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;summation&#x27;,</span></span><br><span class="line"><span class="string">    ...       [&#x27;While&#x27;, &#x27;For&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> n &gt;= <span class="number">1</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> term(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> term(n) + summation(n - <span class="number">1</span>, term)</span><br></pre></td></tr></table></figure>

<h3 id="Q4-Pascal’s-Triangle"><a href="#Q4-Pascal’s-Triangle" class="headerlink" title="Q4: Pascal’s Triangle"></a>Q4: Pascal’s Triangle</h3><p>实现一个<code>pascal(row, column)</code>，求解<code>Pascal</code>三角第<code>row</code>行，第<code>column</code>列的值，其实就是杨辉三角。</p>
<p>注意：行、列都是从<code>0</code>开始索引的；越界的<code>Pascal</code>函数返回<code>0</code>。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pascal</span>(<span class="params">row, column</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the value of the item in Pascal&#x27;s Triangle </span></span><br><span class="line"><span class="string">    whose position is specified by row and column.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pascal(0, 0)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pascal(0, 5)	# Empty entry; outside of Pascal&#x27;s Triangle</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pascal(3, 2)	# Row 3 (1 3 3 1), Column 2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; pascal(4, 2)     # Row 4 (1 4 6 4 1), Column 2</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> row &lt; <span class="number">0</span> <span class="keyword">or</span> column &lt; <span class="number">0</span> <span class="keyword">or</span> column &gt; row:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> row == <span class="number">0</span> <span class="keyword">and</span> column == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> pascal(row - <span class="number">1</span>, column - <span class="number">1</span>) + pascal(row - <span class="number">1</span>, column)</span><br></pre></td></tr></table></figure>

<h3 id="Q5-Repeated-repeated"><a href="#Q5-Repeated-repeated" class="headerlink" title="Q5: Repeated, repeated"></a>Q5: Repeated, repeated</h3><p>实现递归函数<code>repeated(f, n)</code>，返回<code>lambda x: f(f(f(...f(x)))</code>，调用<code>n</code>次<code>f</code>。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">repeated</span>(<span class="params">f, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a function that takes in an integer and computes </span></span><br><span class="line"><span class="string">    the nth application of f on that integer.</span></span><br><span class="line"><span class="string">    Implement using recursion!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = repeated(lambda x: x + 1, 3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(5)</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; square = lambda x: x ** 2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; repeated(square, 2)(5) # square(square(5))</span></span><br><span class="line"><span class="string">    625</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; repeated(square, 4)(5) # square(square(square(square(5))))</span></span><br><span class="line"><span class="string">    152587890625</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; repeated(square, 0)(5)</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # ban iteration</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;repeated&#x27;,</span></span><br><span class="line"><span class="string">    ...       [&#x27;For&#x27;, &#x27;While&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span> x: x</span><br><span class="line">    <span class="keyword">return</span> compose1(f, repeated(f, n - <span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<p>使用如下代码进行测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Lab 3</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Running tests</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Test summary</span><br><span class="line">    5 test cases passed! No cases failed.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CS61A</category>
        <category>Lab</category>
      </categories>
  </entry>
  <entry>
    <title>CS61A 课程笔记 Week06</title>
    <url>/2024/06/13/CS61A-CourseNote-Week06/</url>
    <content><![CDATA[<h2 id="Lecture-13-Mutable-Values"><a href="#Lecture-13-Mutable-Values" class="headerlink" title="Lecture #13: Mutable Values"></a>Lecture #13: Mutable Values</h2><h3 id="树的抽象层次（Tree-Layers-of-abstraction）"><a href="#树的抽象层次（Tree-Layers-of-abstraction）" class="headerlink" title="树的抽象层次（Tree: Layers of abstraction）"></a>树的抽象层次（<code>Tree: Layers of abstraction</code>）</h3><p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image18.png"></p>
<p>每一个层次的抽象都由上一个层次的抽象实现。</p>
<blockquote>
<p>Each layer only uses the layer above it.</p>
</blockquote>
<h3 id="一种树的实现（A-tree-implementation）"><a href="#一种树的实现（A-tree-implementation）" class="headerlink" title="一种树的实现（A tree() implementation）"></a>一种树的实现（<code>A tree() implementation</code>）</h3><p>本节课使用以元组为树，以列表为子树的方法创建树。</p>
<p>创建如下的树，<code>draw</code>是<a href="https://code.cs61a.org/">CS 61A Coder</a>中实现的函数，能够绘制不同类型的结构的图形：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image19.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tree</span>(<span class="params">label, children=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Creates a tree whose root node is labeled LABEL and</span></span><br><span class="line"><span class="string">        optionally has CHILDREN, a list of trees.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> (label, <span class="built_in">list</span>(children <span class="keyword">or</span> []))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">label</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Returns the label of the root node of TREE. &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">children</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Returns a list of children of TREE. &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">t = tree(<span class="number">20</span>, [tree(<span class="number">12</span>, [tree(<span class="number">9</span>, [tree(<span class="number">7</span>), tree(<span class="number">2</span>)])]), tree(<span class="number">8</span>, [tree(<span class="number">4</span>), tree(<span class="number">4</span>)])])</span><br></pre></td></tr></table></figure>

<p>输出如下：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image20.png"></p>
<p><a href="https://code.cs61a.org/">CS 61A Coder</a>中也实现了<code>tree</code>函数，但具体方式与上述方法有区别，使用以列表为树，也以列表为子树的方法创建树。如果不自行定义树的相关抽象类型，直接使用内置的<code>tree</code>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = tree(<span class="number">20</span>, [tree(<span class="number">12</span>, [tree(<span class="number">9</span>, [tree(<span class="number">7</span>), tree(<span class="number">2</span>)])]), tree(<span class="number">8</span>, [tree(<span class="number">4</span>), tree(<span class="number">4</span>)])])</span><br></pre></td></tr></table></figure>

<p>输入如下：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image21.png"></p>
<h3 id="树节点翻倍"><a href="#树节点翻倍" class="headerlink" title="树节点翻倍"></a>树节点翻倍</h3><p>实现<code>double(t)</code>函数，<code>t</code>是一棵树，返回一个新的树，树上的节点都是<code>t</code>的两倍：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">double</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a tree identical to T, but with all labels doubled.&quot;&quot;&quot;</span></span><br><span class="line">    child = children(t)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> child:</span><br><span class="line">        <span class="keyword">return</span> tree(label(t) * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> tree(label(t) * <span class="number">2</span>, </span><br><span class="line">                [double(t) <span class="keyword">for</span> t <span class="keyword">in</span> child])</span><br></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; t</span></span><br><span class="line">(20, [(12, [(9, [(7, []), (2, [])])]), (8, [(4, []), (4, [])])])</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; double(t)</span></span><br><span class="line">(40, [(24, [(18, [(14, []), (4, [])])]), (16, [(8, []), (8, [])])])</span><br></pre></td></tr></table></figure>

<p><code>double(t)</code>函数可以更加精简，子树为空就传空列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">double</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a tree identical to T, but with all labels doubled.&quot;&quot;&quot;</span></span><br><span class="line">    child = children(t)</span><br><span class="line">    <span class="keyword">return</span> tree(label(t) * <span class="number">2</span>, </span><br><span class="line">            [double(t) <span class="keyword">for</span> t <span class="keyword">in</span> child])</span><br></pre></td></tr></table></figure>

<p>输出与之前相同。</p>
<h3 id="非破坏性操作与破坏性操作（Non-destructive-and-Destructive）"><a href="#非破坏性操作与破坏性操作（Non-destructive-and-Destructive）" class="headerlink" title="非破坏性操作与破坏性操作（Non-destructive and Destructive）"></a>非破坏性操作与破坏性操作（<code>Non-destructive and Destructive</code>）</h3><p>非破坏性操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>aThing</span><br><span class="line">&lt;output A&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;operation on aThing (that obey abstraction boundaries)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aThing</span><br><span class="line">&lt;output A&gt;</span><br></pre></td></tr></table></figure>

<p><code>A</code>并没有被修改。</p>
<p>破坏性操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>aThing</span><br><span class="line">&lt;output A&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;operation on aThing (that obey abstraction boundaries)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>aThing</span><br><span class="line">&lt;output B&gt;</span><br></pre></td></tr></table></figure>

<p><code>A</code>被修改了。</p>
<p>之前实现的<code>double(t)</code>是非破坏性的，因为没有修改<code>t</code>。</p>
<h3 id="不可变性和可变性（Immutability-and-Mutability）"><a href="#不可变性和可变性（Immutability-and-Mutability）" class="headerlink" title="不可变性和可变性（Immutability and Mutability）"></a>不可变性和可变性（<code>Immutability and Mutability</code>）</h3><p>一个不可变值一但被创建就不可修改。</p>
<blockquote>
<p>An <code>immutable</code> value is unchanging once created. </p>
<p>Immutable types (that we’ve covered): int, float, string, tuple</p>
</blockquote>
<p><code>eg</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a_tuple = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">a_tuple[<span class="number">0</span>] = <span class="number">3</span>                  <span class="comment"># 🚫 Error! Tuple items cannot be set.</span></span><br><span class="line">a_string = <span class="string">&quot;Hi y&#x27;all&quot;</span></span><br><span class="line">a_string[<span class="number">1</span>] = <span class="string">&quot;I&quot;</span>               <span class="comment"># 🚫 Error! String elements cannot be set.</span></span><br><span class="line">a_string += <span class="string">&quot;, how you doing?&quot;</span>  <span class="comment"># 🤔 How does this work?</span></span><br><span class="line">an_int = <span class="number">20</span></span><br><span class="line">an_int += <span class="number">2</span>                     <span class="comment"># 🤔 And this?</span></span><br></pre></td></tr></table></figure>

<p>可变值在计算过程中可以被修改，所有绑定了同一对象的值都会收到修改的影响。</p>
<blockquote>
<p>A <code>mutable</code> value can change in value throughout the course of computation. All names that refer to the same object are afected by a mutation. </p>
<p>Mutable types (that we’ve covered): list, dict</p>
</blockquote>
<p><code>eg</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grades = [<span class="number">90</span>, <span class="number">70</span>, <span class="number">85</span>]</span><br><span class="line">grades_copy = grades</span><br><span class="line">grades[<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line">words = &#123;<span class="string">&quot;agua&quot;</span>: <span class="string">&quot;water&quot;</span>&#125;</span><br><span class="line">words[<span class="string">&quot;pavo&quot;</span>] = <span class="string">&quot;turkey&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>id()</code>函数返回一个对象的<code>id</code>值，如果两个对象是同一个，<code>id</code>值应当相同，反之不一定。</p>
<p>在函数调用中可以进行修改，也可以修改父环境框架中的值。</p>
<p>若不可变序列包含可变值，可变值可以被修改。</p>
<p>之前实现的<code>tree()</code>函数创建的树是不可变的。</p>
<h3 id="可被修改的树（A-mutable-tree-）"><a href="#可被修改的树（A-mutable-tree-）" class="headerlink" title="可被修改的树（A mutable tree()）"></a>可被修改的树（<code>A mutable tree()</code>）</h3><p>可被修改的树可以使用以下方法实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tree</span>(<span class="params">label, children=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">return</span> [label] + <span class="built_in">list</span>(children <span class="keyword">or</span> [])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">label</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">children</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_label</span>(<span class="params">tree, label</span>):</span><br><span class="line">    tree[<span class="number">0</span>] = label</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_children</span>(<span class="params">tree, children</span>):</span><br><span class="line">    tree[<span class="number">1</span>] = children</span><br></pre></td></tr></table></figure>

<p>破坏性的翻倍操作如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">double</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Doubles every label in T, mutating T.&quot;&quot;&quot;</span></span><br><span class="line">    set_label(t, label(t) * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> children(t):</span><br><span class="line">            double(c)</span><br></pre></td></tr></table></figure>

<h3 id="复制列表（Copying-lists）"><a href="#复制列表（Copying-lists）" class="headerlink" title="复制列表（Copying lists）"></a>复制列表（<code>Copying lists</code>）</h3><p>可以使用<strong>切片</strong>来创建新列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">listA = [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">listB = listA</span><br><span class="line"></span><br><span class="line">listC = listA[:]</span><br><span class="line">listA[<span class="number">0</span>] = <span class="number">4</span></span><br><span class="line">listB[<span class="number">1</span>] = <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>或者使用<code>list()</code>函数，<code>list()</code>函数能接受任意类型的可迭代对象（<code>list()</code>是非破坏性的，列表是可修改的）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">listA = [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">listB = listA</span><br><span class="line"></span><br><span class="line">listC = <span class="built_in">list</span>(listA)</span><br><span class="line">listA[<span class="number">0</span>] = <span class="number">4</span></span><br><span class="line">listB[<span class="number">1</span>] = <span class="number">5</span></span><br></pre></td></tr></table></figure>

<h3 id="对象的同一性与内容的相等性"><a href="#对象的同一性与内容的相等性" class="headerlink" title="对象的同一性与内容的相等性"></a>对象的同一性与内容的相等性</h3><p><code>is</code>可以验证对象的同一性，若是同一个对象，返回<code>True</code>，否则返回<code>False</code>。</p>
<p><code>==</code>可以验证内容的相等性，若两个对象的内容相同，返回<code>True</code>，否则返回<code>False</code>。</p>
<p><code>eg</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">identical = list1 <span class="keyword">is</span> list2</span><br><span class="line">are_equal = list1 == list2</span><br></pre></td></tr></table></figure>

<h2 id="Lecture-14-List-Mutation-Identity-and-Nonlocal"><a href="#Lecture-14-List-Mutation-Identity-and-Nonlocal" class="headerlink" title="Lecture #14: List Mutation, Identity, and Nonlocal"></a>Lecture #14: List Mutation, Identity, and Nonlocal</h2><h3 id="列表的创建（List-creation）"><a href="#列表的创建（List-creation）" class="headerlink" title="列表的创建（List creation）"></a>列表的创建（<code>List creation</code>）</h3><p>使用方括号可以创建列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Creating a list from scratch:</span></span><br><span class="line">a = []</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<p>从已经存在的列表可以创建列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Creating a list from existing lists:</span></span><br><span class="line">c = b + [<span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">d = c[:]</span><br><span class="line">e = <span class="built_in">list</span>(c)</span><br></pre></td></tr></table></figure>

<p>以上方法都是非破坏性的（<code>Non-destructive</code>）。</p>
<h3 id="通过切片修改列表（Mutating-lists-with-slicing）"><a href="#通过切片修改列表（Mutating-lists-with-slicing）" class="headerlink" title="通过切片修改列表（Mutating lists with slicing）"></a>通过切片修改列表（<code>Mutating lists with slicing</code>）</h3><p>通过<strong>切片</strong>可以修改列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># List Mutation</span></span><br><span class="line">L = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">L[<span class="number">2</span>] = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">L[<span class="number">1</span>:<span class="number">3</span>] = [<span class="number">9</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">L[<span class="number">2</span>:<span class="number">4</span>] = []            <span class="comment"># Deleting elements</span></span><br><span class="line"></span><br><span class="line">L[<span class="number">1</span>:<span class="number">1</span>] = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]  <span class="comment"># Inserting elements</span></span><br><span class="line"></span><br><span class="line">L[<span class="built_in">len</span>(L):] = [<span class="number">10</span>, <span class="number">11</span>]  <span class="comment"># Appending</span></span><br><span class="line"></span><br><span class="line">L = L + [<span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"></span><br><span class="line">L[<span class="number">0</span>:<span class="number">0</span>] = <span class="built_in">range</span>(-<span class="number">3</span>, <span class="number">0</span>)  <span class="comment"># Prepending</span></span><br></pre></td></tr></table></figure>

<p>注意列表的<code>+</code>和<code>+=</code>运算符，前者会为右值创建一个新的列表绑定到左值的名称上（非破坏性操作）；后者不会创建新的列表（破坏性操作）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Test List&#x27;s &#x27;+&#x27; and &#x27;+=&#x27;</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(a, <span class="built_in">id</span>(a))</span><br><span class="line"></span><br><span class="line">b = a + [<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(b, <span class="built_in">id</span>(b))</span><br><span class="line"></span><br><span class="line">a += [<span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="built_in">print</span>(a, <span class="built_in">id</span>(a))</span><br><span class="line"></span><br><span class="line">a = a + [<span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(a, <span class="built_in">id</span>(a))</span><br></pre></td></tr></table></figure>

<h3 id="使用列表的方法修改列表（Mutating-lists-with-methods）"><a href="#使用列表的方法修改列表（Mutating-lists-with-methods）" class="headerlink" title="使用列表的方法修改列表（Mutating lists with methods）"></a>使用列表的方法修改列表（<code>Mutating lists with methods</code>）</h3><p><code>append()</code>函数可以把一个元素添加到列表尾部：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># append() adds a single element to a list:</span></span><br><span class="line">s = [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">t = [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">s.append(<span class="number">4</span>)</span><br><span class="line">s.append(t)</span><br><span class="line">t = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><code>extend()</code>函数可以把一个列表的所有元素添加到指定列表的尾部：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># extend() adds all the elements in one list to a list:</span></span><br><span class="line">s = [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">t = [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">s.extend(<span class="number">4</span>) <span class="comment"># 🚫 Error: 4 is not an iterable!</span></span><br><span class="line">s.extend(t)</span><br><span class="line">t = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><code>pop()</code>函数可以移除并返回列表的最后一个元素：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pop() removes and returns the last element:</span></span><br><span class="line">s = [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">t = [<span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">t = s.pop()</span><br></pre></td></tr></table></figure>

<p><code>reomve(val)</code>会移除列表中第一个等于<code>val</code>的值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># remove() removes the first element equal to the argument:</span></span><br><span class="line">s = [<span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">4</span>]</span><br><span class="line">s.remove(<span class="number">4</span>)</span><br><span class="line">s.remove(<span class="number">9</span>)</span><br></pre></td></tr></table></figure>

<p>以上方法都会修改列表，都是破坏性操作（<code>Destructive</code>）。</p>
<h3 id="对象的同一性与内容的相等性-1"><a href="#对象的同一性与内容的相等性-1" class="headerlink" title="对象的同一性与内容的相等性"></a>对象的同一性与内容的相等性</h3><p><code>is</code>可以验证对象的同一性，若是同一个对象，返回<code>True</code>，否则返回<code>False</code>。</p>
<p><code>==</code>可以验证内容的相等性，若两个对象的内容相同，返回<code>True</code>，否则返回<code>False</code>。</p>
<p><code>eg</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">list2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment"># evaluates to True if both exp0 and exp1 evaluate to objects containing equal values</span></span><br><span class="line">are_equal = list1 == list2</span><br><span class="line"><span class="comment"># evaluates to True if both exp0 and exp1 evaluate to the same object</span></span><br><span class="line">identical = list1 <span class="keyword">is</span> list2</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Try this in your local friendly Python interpreter:</span></span><br><span class="line">a = <span class="string">&quot;orange&quot;</span></span><br><span class="line">b = <span class="string">&quot;orange&quot;</span></span><br><span class="line">c = <span class="string">&quot;o&quot;</span> + <span class="string">&quot;range&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)</span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> c)</span><br><span class="line"></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)</span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> <span class="number">10</span> * <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(a == <span class="number">10</span> * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="number">100000000000000000</span></span><br><span class="line">b = <span class="number">100000000000000000</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">100000000000000000</span> <span class="keyword">is</span> <span class="number">100000000000000000</span>)</span><br></pre></td></tr></table></figure>

<h3 id="本地空间的命名（Names-inside-local-scopes）"><a href="#本地空间的命名（Names-inside-local-scopes）" class="headerlink" title="本地空间的命名（Names inside local scopes）"></a>本地空间的命名（<code>Names inside local scopes</code>）</h3><p>命名的规则如下：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image22.png"></p>
<p><code>eg</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># access is allowed</span></span><br><span class="line">attendees = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mark_attendance</span>(<span class="params">name</span>):</span><br><span class="line">    attendees.append(name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;In attendance:&quot;</span>, attendees)</span><br><span class="line"></span><br><span class="line">mark_attendance(<span class="string">&quot;Emily&quot;</span>)</span><br><span class="line">mark_attendance(<span class="string">&quot;Cristiano&quot;</span>)</span><br><span class="line">mark_attendance(<span class="string">&quot;Samantha&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># re-assign is not allowed</span></span><br><span class="line"><span class="comment"># UnboundLocalError: local variable &#x27;current&#x27; referenced before assignment</span></span><br><span class="line">current = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count</span>():</span><br><span class="line">    current = current + <span class="number">1</span>     <span class="comment"># 🚫  Error!</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Count:&quot;</span>, current)</span><br><span class="line"></span><br><span class="line">count()</span><br><span class="line">count()</span><br></pre></td></tr></table></figure>

<p>可以使用<code>global</code>描述符引入全局环境的变量（但应尽量避免使用<code>global</code>）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Re-assigning globals</span></span><br><span class="line">current = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count</span>():</span><br><span class="line">    <span class="keyword">global</span> current</span><br><span class="line">    current = current + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Count:&quot;</span>, current)</span><br><span class="line"></span><br><span class="line">count()</span><br><span class="line">count()</span><br></pre></td></tr></table></figure>

<h3 id="嵌套空间内的名称（Names-inside-nested-scopes）"><a href="#嵌套空间内的名称（Names-inside-nested-scopes）" class="headerlink" title="嵌套空间内的名称（Names inside nested scopes）"></a>嵌套空间内的名称（<code>Names inside nested scopes</code>）</h3><p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image23.png"></p>
<p>不允许在嵌套函数中重命名变量，因为根据计算顺序，左值会先创建<code>current</code>，右值访问<code>current</code>时，又会发现<code>current</code>没有绑定任何对象，就直接访问。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># UnboundLocalError: local variable &#x27;current&#x27; referenced before assignment</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_counter</span>(<span class="params">start</span>):</span><br><span class="line">    current = start</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count</span>():</span><br><span class="line">        current = current + <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Count:&quot;</span>, current)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">counter = make_counter(<span class="number">30</span>)</span><br><span class="line">counter()</span><br><span class="line">counter()</span><br><span class="line">counter()</span><br></pre></td></tr></table></figure>

<p>可以使用<code>nonlocal</code>修饰符（<code>Python3</code>的新特性），在嵌套函数中引入父函数的变量（但应尽量避免使用<code>nonlocal</code>）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The nonlocal declaration tells Python to look in the parent frame for the name lookup.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_counter</span>(<span class="params">start</span>):</span><br><span class="line">    current = start</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> current</span><br><span class="line">        current = current + <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Count:&quot;</span>, current)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">counter = make_counter(<span class="number">30</span>)</span><br><span class="line">counter()</span><br><span class="line">counter()</span><br><span class="line">counter()</span><br></pre></td></tr></table></figure>

<h2 id="Lecture-15-Iterators-Generators"><a href="#Lecture-15-Iterators-Generators" class="headerlink" title="Lecture #15: Iterators + Generators"></a>Lecture #15: Iterators + Generators</h2><h3 id="可迭代对象（Iterables）"><a href="#可迭代对象（Iterables）" class="headerlink" title="可迭代对象（Iterables）"></a>可迭代对象（<code>Iterables</code>）</h3><p>列表、元组、字典、字符串都是<strong>可迭代对象</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Lists, tuples, dictionaries, and strings are all iterable objects.</span></span><br><span class="line">my_order = [<span class="string">&quot;Yuca Shepherds Pie&quot;</span>, <span class="string">&quot;Pão de queijo&quot;</span>, <span class="string">&quot;Guaraná&quot;</span>]</span><br><span class="line"></span><br><span class="line">ranked_chocolates = (<span class="string">&quot;Dark&quot;</span>, <span class="string">&quot;Milk&quot;</span>, <span class="string">&quot;White&quot;</span>)</span><br><span class="line"></span><br><span class="line">prices = &#123;<span class="string">&quot;pineapple&quot;</span>: <span class="number">9.99</span>, <span class="string">&quot;pen&quot;</span>: <span class="number">2.99</span>, <span class="string">&quot;pineapple-pen&quot;</span>: <span class="number">19.99</span>&#125;</span><br><span class="line"></span><br><span class="line">best_topping = <span class="string">&quot;pineapple&quot;</span></span><br></pre></td></tr></table></figure>

<p>这些类型都支持循环迭代：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># We can iterate over iterable objects:</span></span><br><span class="line">my_order = [<span class="string">&quot;Yuca Shepherds Pie&quot;</span>, <span class="string">&quot;Pão de queijo&quot;</span>, <span class="string">&quot;Guaraná&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> my_order:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line">lowered = [item.lower() <span class="keyword">for</span> item <span class="keyword">in</span> my_order]</span><br><span class="line"></span><br><span class="line">ranked_chocolates = (<span class="string">&quot;Dark&quot;</span>, <span class="string">&quot;Milk&quot;</span>, <span class="string">&quot;White&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> chocolate <span class="keyword">in</span> ranked_chocolates:</span><br><span class="line">    <span class="built_in">print</span>(chocolate)</span><br><span class="line"></span><br><span class="line">prices = &#123;<span class="string">&quot;pineapple&quot;</span>: <span class="number">9.99</span>, <span class="string">&quot;pen&quot;</span>: <span class="number">2.99</span>, <span class="string">&quot;pineapple-pen&quot;</span>: <span class="number">19.99</span>&#125;</span><br><span class="line"><span class="keyword">for</span> product <span class="keyword">in</span> prices:</span><br><span class="line">    <span class="built_in">print</span>(product, <span class="string">&quot; costs &quot;</span>, prices[product])</span><br><span class="line">discounted = &#123; item: prices[item] * <span class="number">0.75</span> <span class="keyword">for</span> item <span class="keyword">in</span> prices &#125;</span><br><span class="line"></span><br><span class="line">best_topping = <span class="string">&quot;pineapple&quot;</span></span><br><span class="line"><span class="keyword">for</span> letter <span class="keyword">in</span> best_topping:</span><br><span class="line">    <span class="built_in">print</span>(letter)</span><br></pre></td></tr></table></figure>

<h3 id="迭代器（Iterators）"><a href="#迭代器（Iterators）" class="headerlink" title="迭代器（Iterators）"></a>迭代器（<code>Iterators</code>）</h3><p>迭代器可以提供对可迭代序列的元素的访问，一次访问一个元素：</p>
<p><code>iter(iterable)</code>函数返回可迭代对象<code>iterable</code>的迭代器。</p>
<p><code>next(iterator)</code>函数返回迭代器<code>iterator</code>的下一个元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># An iterator is an object that provides sequential access to values, one by one.</span></span><br><span class="line"><span class="comment"># iter(iterable) returns an iterator over the elements of an iterable.</span></span><br><span class="line"><span class="comment"># next(iterator) returns the next element in an iterator.</span></span><br><span class="line">toppings = [<span class="string">&quot;pineapple&quot;</span>, <span class="string">&quot;pepper&quot;</span>, <span class="string">&quot;mushroom&quot;</span>, <span class="string">&quot;roasted red pepper&quot;</span>]</span><br><span class="line"></span><br><span class="line">topperator = <span class="built_in">iter</span>(toppings)</span><br><span class="line"><span class="built_in">next</span>(topperator) <span class="comment"># &#x27;pineapple&#x27;</span></span><br><span class="line"><span class="built_in">next</span>(topperator) <span class="comment"># &#x27;pepper&#x27;</span></span><br><span class="line"><span class="built_in">next</span>(topperator) <span class="comment"># &#x27;mushroom&#x27;</span></span><br><span class="line"><span class="built_in">next</span>(topperator) <span class="comment"># &#x27;roasted red pepper&#x27;</span></span><br><span class="line"><span class="built_in">next</span>(topperator) <span class="comment"># ❌ StopIteration exception</span></span><br></pre></td></tr></table></figure>

<p>迭代器中不含元素时调用<code>next</code>，会返回一个<code>StopIteration: StopIteration</code>对象，停止迭代。</p>
<p>可以使用<code>try/except</code>捕获异常：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># An unhandled exception will immediately stop a program.</span></span><br><span class="line"><span class="comment"># Use try/except to handle an exception:</span></span><br><span class="line">ranked_chocolates = (<span class="string">&quot;Dark&quot;</span>, <span class="string">&quot;Milk&quot;</span>, <span class="string">&quot;White&quot;</span>)</span><br><span class="line"></span><br><span class="line">chocolaterator = <span class="built_in">iter</span>(ranked_chocolates)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(chocolaterator))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(chocolaterator))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(chocolaterator))</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">next</span>(chocolaterator))</span><br><span class="line"><span class="keyword">except</span> StopIteration:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No more left!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>但这样我们就需要知道迭代器的元素个数，可以使用<code>while</code>循环：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># We can use a while loop to process iterators of arbitrary length:</span></span><br><span class="line">ranked_chocolates = (<span class="string">&quot;Dark&quot;</span>, <span class="string">&quot;Milk&quot;</span>, <span class="string">&quot;White&quot;</span>)</span><br><span class="line">chocolaterator = <span class="built_in">iter</span>(ranked_chocolates)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        choco = <span class="built_in">next</span>(chocolaterator)</span><br><span class="line">        <span class="built_in">print</span>(choco)</span><br><span class="line"><span class="keyword">except</span> StopIteration:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No more left!&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="迭代器与For循环（Iterators-vs-For-loops）"><a href="#迭代器与For循环（Iterators-vs-For-loops）" class="headerlink" title="迭代器与For循环（Iterators vs. For loops）"></a>迭代器与<code>For</code>循环（<code>Iterators vs. For loops</code>）</h3><p>上述使用<code>while</code>的迭代器可以用<code>for</code>循环替代：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># use for loops</span></span><br><span class="line">ranked_chocolates = (<span class="string">&quot;Dark&quot;</span>, <span class="string">&quot;Milk&quot;</span>, <span class="string">&quot;White&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> chocolate <span class="keyword">in</span> ranked_chocolates:</span><br><span class="line">    <span class="built_in">print</span>(chocolate)</span><br></pre></td></tr></table></figure>

<p><code>for</code>循环可以视为对迭代器的封装（语法糖）。</p>
<h3 id="For循环的执行（For-loop-execution）"><a href="#For循环的执行（For-loop-execution）" class="headerlink" title="For循环的执行（For loop execution）"></a><code>For</code>循环的执行（<code>For loop execution</code>）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;name&gt; <span class="keyword">in</span> &lt;expression&gt;:</span><br><span class="line">    &lt;suite&gt;</span><br></pre></td></tr></table></figure>

<p>上述语句执行过程如下：</p>
<blockquote>
<ol>
<li><p>Python evaluates <code>&lt;expression&gt;</code> to make sure it’s an iterable.</p>
</li>
<li><p>Python gets an iterator for the iterable.</p>
</li>
<li><p>Python gets the next value from the iterator and assigns to <code>&lt;name&gt;</code>.</p>
</li>
<li><p>Python executes <code>&lt;suite&gt;</code>.</p>
</li>
<li><p>Python repeats until it sees a StopIteration error.</p>
</li>
</ol>
</blockquote>
<p>与以下代码等价：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iterator = <span class="built_in">iter</span>(&lt;expression&gt;)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        &lt;name&gt; = <span class="built_in">next</span>(iterator)</span><br><span class="line">        &lt;suite&gt;</span><br><span class="line"><span class="keyword">except</span> StopIteration:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p><code>for</code>循环迭代是更好的选择，无论从语法的简洁性还是从程序的性能开销考虑。</p>
<h3 id="next-and-iter"><a href="#next-and-iter" class="headerlink" title="__next__() and __iter__()"></a><code>__next__() and __iter__()</code></h3><p>调用<code>next()</code>函数时，会调用迭代器内置的<code>__next__()</code>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># When the iter() function is passed an iterable object, it calls the __iter__() method on it:</span></span><br><span class="line">ranked_chocolates = (<span class="string">&quot;Dark&quot;</span>, <span class="string">&quot;Milk&quot;</span>, <span class="string">&quot;White&quot;</span>)</span><br><span class="line">chocorator1 = <span class="built_in">iter</span>(ranked_chocolates)</span><br><span class="line">chocorator2 = ranked_chocolates.__iter__()</span><br></pre></td></tr></table></figure>

<p>调用<code>iter()</code>函数时，会调用迭代器内置的<code>__iter__()</code>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># When the next() function is passed an iterator, it calls the __next__() method on it:</span></span><br><span class="line">ranked_chocolates = (<span class="string">&quot;Dark&quot;</span>, <span class="string">&quot;Milk&quot;</span>, <span class="string">&quot;White&quot;</span>)</span><br><span class="line">chocolate1 = <span class="built_in">next</span>(chocorator1)</span><br><span class="line">chocolate2 = chocorator2.__next__()</span><br></pre></td></tr></table></figure>

<h3 id="返回迭代器的函数（Functions-that-return-iterators）"><a href="#返回迭代器的函数（Functions-that-return-iterators）" class="headerlink" title="返回迭代器的函数（Functions that return iterators）"></a>返回迭代器的函数（<code>Functions that return iterators</code>）</h3><p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image24.png"></p>
<p><code>reversed(sequence)</code>函数会返回<code>sequence</code>的逆序的迭代器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Iterate over item in sequence in reverse order</span></span><br><span class="line">chocolate_bars = (<span class="string">&quot;90%&quot;</span>, <span class="string">&quot;70%&quot;</span>, <span class="string">&quot;55%&quot;</span>)</span><br><span class="line"></span><br><span class="line">worst_first = <span class="built_in">reversed</span>(chocolate_bars)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> chocolate <span class="keyword">in</span> worst_first:</span><br><span class="line">    <span class="built_in">print</span>(chocolate)</span><br></pre></td></tr></table></figure>

<p><code>zip(*iterables)</code>函数返回若干可迭代对象的合并，第<code>i</code>个元素是<code>(a1[i]， a2[i], ..., an[i])</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Iterate over co-indexed tuples with elements from each of the iterables</span></span><br><span class="line">eng_nums = [<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>]</span><br><span class="line">esp_nums = [<span class="string">&quot;uno&quot;</span>, <span class="string">&quot;dos&quot;</span>, <span class="string">&quot;tres&quot;</span>]</span><br><span class="line"></span><br><span class="line">zip_iter = <span class="built_in">zip</span>(eng_nums, esp_nums)</span><br><span class="line">eng, esp = <span class="built_in">next</span>(zip_iter)</span><br><span class="line"><span class="built_in">print</span>(eng, esp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> eng, esp <span class="keyword">in</span> <span class="built_in">zip</span>(eng_nums, esp_nums):</span><br><span class="line">    <span class="built_in">print</span>(eng, esp)</span><br></pre></td></tr></table></figure>

<p><code>map(func, iterable, ...)</code>函数，返回一个迭代器，元素是<code>func(x)</code>，<code>x</code>是可迭代对象<code>iterable</code>的元素：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Iterate over func(x) for x in iterable</span></span><br><span class="line"><span class="comment"># Same as [func(x) for x in iterable]</span></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Map returns an iterator</span></span><br><span class="line">squares1 = <span class="built_in">map</span>(<span class="keyword">lambda</span> num: num ** <span class="number">2</span>, nums)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a list of all the elements from the iterator</span></span><br><span class="line">squares1 = <span class="built_in">list</span>(squares1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compare to...</span></span><br><span class="line">squares2 = [num**<span class="number">2</span> <span class="keyword">for</span> num <span class="keyword">in</span> nums]</span><br></pre></td></tr></table></figure>

<p><code>filter(func, iterable)</code>函数，返回一个迭代器，元素是可迭代对象<code>iterable</code>中满足<code>func(x)</code>的元素：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Iterate over x in iterable if func(x)</span></span><br><span class="line"><span class="comment"># Same as [x for x in iterable if func(x)]</span></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Filter returns an iterator</span></span><br><span class="line">even1 = <span class="built_in">filter</span>(<span class="keyword">lambda</span> num: num % <span class="number">2</span> == <span class="number">0</span>, nums)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a list of all the elements from the iterator</span></span><br><span class="line">even1 = <span class="built_in">list</span>(even1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compare to...</span></span><br><span class="line">even2 = [num <span class="keyword">for</span> num <span class="keyword">in</span> nums <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<h3 id="返回可迭代对象的函数（Functions-that-return-iterables）"><a href="#返回可迭代对象的函数（Functions-that-return-iterables）" class="headerlink" title="返回可迭代对象的函数（Functions that return iterables）"></a>返回可迭代对象的函数（<code>Functions that return iterables</code>）</h3><p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/image25.png"></p>
<h3 id="生成器（Generators）"><a href="#生成器（Generators）" class="headerlink" title="生成器（Generators）"></a>生成器（<code>Generators</code>）</h3><p><code>生成器</code>是一种特殊的迭代器，从一个生成器函数中产生值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># A generator is a type of iterator that yields results from a generator function.</span></span><br><span class="line"><span class="comment"># A generator function uses yield instead of return:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evens</span>():</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> num &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">yield</span> num</span><br><span class="line">        num += <span class="number">2</span></span><br><span class="line">        </span><br><span class="line">evengen = evens()</span><br><span class="line"></span><br><span class="line"><span class="built_in">next</span>(evengen)  <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">next</span>(evengen)  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">next</span>(evengen)  <span class="comment"># 4</span></span><br><span class="line"><span class="built_in">next</span>(evengen)  <span class="comment"># 6</span></span><br><span class="line"><span class="built_in">next</span>(evengen)  <span class="comment"># 8</span></span><br><span class="line"><span class="built_in">next</span>(evengen)  <span class="comment"># ❌ StopIteration exception</span></span><br></pre></td></tr></table></figure>

<h3 id="生成器是如何工作的（How-generators-work）"><a href="#生成器是如何工作的（How-generators-work）" class="headerlink" title="生成器是如何工作的（How generators work）"></a>生成器是如何工作的（<code>How generators work</code>）</h3><p>生成器中运作原理如下：</p>
<blockquote>
<ul>
<li>When the function is called, Python immediately returns an iterator without entering the function.</li>
<li>When <code>next()</code>is called on the iterator, it executes the body of the generator from the last stopping point up to the next <code>yield</code> statement.</li>
<li>If it finds a <code>yield</code> statement, it pauses on the next statement and returns the value of the yielded expression.</li>
<li>If it doesn’t reach a yield statement, it stops at the end of the function and raises a <code>StopIteration</code> exception.</li>
</ul>
</blockquote>
<h3 id="基于生成器的循环（Looping-over-generators）"><a href="#基于生成器的循环（Looping-over-generators）" class="headerlink" title="基于生成器的循环（Looping over generators）"></a>基于生成器的循环（<code>Looping over generators</code>）</h3><p>可以在<code>for</code>循环中使用生成器，因为生成器是特殊的迭代器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># We can use for loops on generators, since generators are just special types of iterators.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evens</span>(<span class="params">start, end</span>):</span><br><span class="line">    num = start + (start % <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> num &lt; end:</span><br><span class="line">        <span class="keyword">yield</span> num</span><br><span class="line">        num += <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> evens(<span class="number">12</span>, <span class="number">60</span>):</span><br><span class="line">   <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure>

<p>与下面代码等价：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Looks a lot like...</span></span><br><span class="line">evens = [num <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>, <span class="number">60</span>) <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="comment"># Or  = filter(lambda x: x % 2 == 0, range(12, 60))</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> evens:</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure>

<h3 id="为什么使用生成器（Why-use-generators-）"><a href="#为什么使用生成器（Why-use-generators-）" class="headerlink" title="为什么使用生成器（Why use generators?）"></a>为什么使用生成器（<code>Why use generators?</code>）</h3><p>生成器只有在需要下一个元素时才会调用生成器函数，如果迭代的对象很大，那么使用生成器是个比较好的选择。</p>
<p>下面的代码会计算整个序列：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Generators are lazy: they only generate the next item when needed.</span></span><br><span class="line"><span class="comment"># Why generate the whole sequence...</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_matches</span>(<span class="params">filename, <span class="keyword">match</span></span>):</span><br><span class="line">    matched = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(filename):</span><br><span class="line">        <span class="keyword">if</span> line.find(<span class="keyword">match</span>) &gt; -<span class="number">1</span>:</span><br><span class="line">            matched.append(line)</span><br><span class="line">    <span class="keyword">return</span> matched</span><br><span class="line"></span><br><span class="line">matched_lines = find_matches(<span class="string">&#x27;frankenstein.txt&#x27;</span>, <span class="string">&quot;!&quot;</span>)</span><br><span class="line">matched_lines[<span class="number">0</span>]</span><br><span class="line">matched_lines[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p>使用生成器只生成部分元素：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ...if you only want some elements?</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_matches</span>(<span class="params">filename, <span class="keyword">match</span></span>):</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(filename):</span><br><span class="line">        <span class="keyword">if</span> line.find(<span class="keyword">match</span>) &gt; -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">yield</span> line</span><br><span class="line"></span><br><span class="line">line_iter = find_matches(<span class="string">&#x27;frankenstein.txt&#x27;</span>, <span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="built_in">next</span>(line_iter)</span><br><span class="line"><span class="built_in">next</span>(line_iter)</span><br></pre></td></tr></table></figure>

<h3 id="yield-from：从迭代器生成元素（Yielding-from-iterables）"><a href="#yield-from：从迭代器生成元素（Yielding-from-iterables）" class="headerlink" title="yield from：从迭代器生成元素（Yielding from iterables）"></a><code>yield from</code>：从迭代器生成元素（<code>Yielding from iterables</code>）</h3><p><code>yield from iterable</code>可以从一个迭代器生成元素，一次生成一个元素。</p>
<p>先从迭代器<code>a</code>中生成，再从迭代器<code>b</code>中生成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># A yield from statement yields the values from an iterator one at a time. 🍬</span></span><br><span class="line"><span class="comment"># Instead of...</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_then_b</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> a:</span><br><span class="line">        <span class="keyword">yield</span> item</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> b:</span><br><span class="line">        <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(a_then_b([<span class="string">&quot;Apples&quot;</span>, <span class="string">&quot;Aardvarks&quot;</span>], [<span class="string">&quot;Bananas&quot;</span>, <span class="string">&quot;BEARS&quot;</span>]))</span><br></pre></td></tr></table></figure>

<p>使用<code>yield from</code>的等价版本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># We can write...</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_then_b</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> a</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> b</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(a_then_b([<span class="string">&quot;Apples&quot;</span>, <span class="string">&quot;Aardvarks&quot;</span>], [<span class="string">&quot;Bananas&quot;</span>, <span class="string">&quot;BEARS&quot;</span>]))</span><br></pre></td></tr></table></figure>

<p><code>yield from</code>也可以从生成器函数的结果中生成值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># A yield from can also yield the results of a generator function.</span></span><br><span class="line"><span class="comment"># Instead of...</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n, accum</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">yield</span> accum</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> factorial(n - <span class="number">1</span>, n * accum):</span><br><span class="line">            <span class="keyword">yield</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> factorial(<span class="number">3</span>, <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># We can write...</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n, accum</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">yield</span> accum</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> factorial(n - <span class="number">1</span>, n * accum)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> factorial(<span class="number">3</span>, <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure>

<h3 id="树的递归生成器（Recursive-generators-for-trees）"><a href="#树的递归生成器（Recursive-generators-for-trees）" class="headerlink" title="树的递归生成器（Recursive generators for trees）"></a>树的递归生成器（<code>Recursive generators for trees</code>）</h3><p>生成器支持递归，那么树也可以有生成器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># A pre-order traversal of the tree leaves:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leaves</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="keyword">yield</span> label(t)</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> branches(t):</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> leaves(c)</span><br><span class="line"></span><br><span class="line">t = tree(<span class="number">20</span>, [tree(<span class="number">12</span>,</span><br><span class="line">               [tree(<span class="number">9</span>,</span><br><span class="line">                  [tree(<span class="number">7</span>), tree(<span class="number">2</span>)]),</span><br><span class="line">                tree(<span class="number">3</span>)]),</span><br><span class="line">              tree(<span class="number">8</span>,</span><br><span class="line">               [tree(<span class="number">4</span>), tree(<span class="number">4</span>)])])</span><br><span class="line"></span><br><span class="line">leave_gen = leaves(t)</span><br><span class="line"><span class="built_in">next</span>(leave_gen)</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><p><strong>翻译视频</strong>：<a href="https://www.bilibili.com/video/BV1v64y1Q78o/?spm_id_from=444.41.top_right_bar_window_default_collection.content.click&vd_source=249a8ad55bb26717dd55ec3dd295f644">【计算机程序的构造和解释】精译【UC Berkeley 公开课-CS61A (Spring 2021)】-中英双语字幕</a></p>
</li>
<li><p><code>github</code>: <a href="https://github.com/Maxwell2020152049/CS61A">Maxwell2020152049&#x2F;CS61A</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>CS61A</category>
        <category>Course Notes</category>
      </categories>
  </entry>
  <entry>
    <title>CS61A Lab05</title>
    <url>/2024/06/13/CS61A-Lab05/</url>
    <content><![CDATA[<h1 id="Lab-5-Python-Lists-Data-Abstraction-Trees"><a href="#Lab-5-Python-Lists-Data-Abstraction-Trees" class="headerlink" title="Lab 5: Python Lists, Data Abstraction, Trees"></a>Lab 5: Python Lists, Data Abstraction, Trees</h1><h2 id="Required-Questions"><a href="#Required-Questions" class="headerlink" title="Required Questions"></a>Required Questions</h2><h3 id="List-Comprehensions"><a href="#List-Comprehensions" class="headerlink" title="List Comprehensions"></a>List Comprehensions</h3><h4 id="Q1-Couple"><a href="#Q1-Couple" class="headerlink" title="Q1: Couple"></a>Q1: Couple</h4><p>实现函数<code>couple(s, t)</code>，<code>s</code>和<code>t</code>是两个长度相同的列表，返回一个列表，第<code>i</code>个元素是<code>[s[i], t[i]]</code>。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">couple</span>(<span class="params">s, t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a list of two-element lists in which the i-th element is [s[i], t[i]].</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = [1, 2, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b = [4, 5, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; couple(a, b)</span></span><br><span class="line"><span class="string">    [[1, 4], [2, 5], [3, 6]]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; c = [&#x27;c&#x27;, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; d = [&#x27;s&#x27;, &#x27;1&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; couple(c, d)</span></span><br><span class="line"><span class="string">    [[&#x27;c&#x27;, &#x27;s&#x27;], [6, &#x27;1&#x27;]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(s) == <span class="built_in">len</span>(t)</span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [[x, y] <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(s, t)]</span><br></pre></td></tr></table></figure>

<h3 id="Data-Abstraction"><a href="#Data-Abstraction" class="headerlink" title="Data Abstraction"></a>Data Abstraction</h3><p>本实验提供了一个<strong>城市</strong>的抽象数据类型（<code>ADT</code>），用法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>berkeley = make_city(<span class="string">&#x27;Berkeley&#x27;</span>, <span class="number">122</span>, <span class="number">37</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_name(berkeley)</span><br><span class="line"><span class="string">&#x27;Berkeley&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_lat(berkeley)</span><br><span class="line"><span class="number">122</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_york = make_city(<span class="string">&#x27;New York City&#x27;</span>, <span class="number">74</span>, <span class="number">40</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_lon(new_york)</span><br><span class="line"><span class="number">40</span></span><br></pre></td></tr></table></figure>

<p>实现方式如下（理论上，用户不该知道这些信息）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Treat all the following code as being behind an abstraction layer, you shouldn&#x27;t need to look at it!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_city</span>(<span class="params">name, lat, lon</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; city = make_city(&#x27;Berkeley&#x27;, 0, 1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_name(city)</span></span><br><span class="line"><span class="string">    &#x27;Berkeley&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_lat(city)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_lon(city)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> change_abstraction.changed:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;name&quot;</span>: name, <span class="string">&quot;lat&quot;</span>: lat, <span class="string">&quot;lon&quot;</span>: lon&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> [name, lat, lon]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">city</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; city = make_city(&#x27;Berkeley&#x27;, 0, 1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_name(city)</span></span><br><span class="line"><span class="string">    &#x27;Berkeley&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> change_abstraction.changed:</span><br><span class="line">        <span class="keyword">return</span> city[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> city[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_lat</span>(<span class="params">city</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; city = make_city(&#x27;Berkeley&#x27;, 0, 1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_lat(city)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> change_abstraction.changed:</span><br><span class="line">        <span class="keyword">return</span> city[<span class="string">&quot;lat&quot;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> city[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_lon</span>(<span class="params">city</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; city = make_city(&#x27;Berkeley&#x27;, 0, 1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; get_lon(city)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> change_abstraction.changed:</span><br><span class="line">        <span class="keyword">return</span> city[<span class="string">&quot;lon&quot;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> city[<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<h4 id="Q2-Distance"><a href="#Q2-Distance" class="headerlink" title="Q2: Distance"></a>Q2: Distance</h4><p>实现<code>distance(city_a, city_b)</code>函数，<code>city_a</code>和<code>city_b</code>是两个城市对象，返回它们之间的距离，用<code>(latitude， longitude)</code>表示坐标，距离为<a href="https://zh.wikipedia.org/zh-hans/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E8%B7%9D%E7%A6%BB">欧几里得距离</a>。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">distance</span>(<span class="params">city_a, city_b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; city_a = make_city(&#x27;city_a&#x27;, 0, 1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; city_b = make_city(&#x27;city_b&#x27;, 0, 2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; distance(city_a, city_b)</span></span><br><span class="line"><span class="string">    1.0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; city_c = make_city(&#x27;city_c&#x27;, 6.5, 12)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; city_d = make_city(&#x27;city_d&#x27;, 2.5, 15)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; distance(city_c, city_d)</span></span><br><span class="line"><span class="string">    5.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    x1 = get_lat(city_a)</span><br><span class="line">    y1 = get_lon(city_a)</span><br><span class="line">    x2 = get_lat(city_b)</span><br><span class="line">    y2 = get_lon(city_b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sqrt((x1 - x2) ** <span class="number">2</span> + (y1 - y2) ** <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h4 id="Q3-Closer-city"><a href="#Q3-Closer-city" class="headerlink" title="Q3: Closer city"></a>Q3: Closer city</h4><p>实现<code>closer_city(lat, lon, city_a, city_b)</code>函数：</p>
<ul>
<li><code>lat</code>、<code>lon</code>：目标城市的纬度、经度</li>
<li><code>city_a</code>、<code>city_b</code>：两个城市对象</li>
</ul>
<p>返回两个城市中距离<code>(lat, lon)</code>较近的一个，若一样近，返回<code>city_b</code>。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">closer_city</span>(<span class="params">lat, lon, city_a, city_b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns the name of either city_a or city_b, whichever is closest to</span></span><br><span class="line"><span class="string">    coordinate (lat, lon). If the two cities are the same distance away</span></span><br><span class="line"><span class="string">    from the coordinate, consider city_b to be the closer city.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; berkeley = make_city(&#x27;Berkeley&#x27;, 37.87, 112.26)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; stanford = make_city(&#x27;Stanford&#x27;, 34.05, 118.25)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; closer_city(38.33, 121.44, berkeley, stanford)</span></span><br><span class="line"><span class="string">    &#x27;Stanford&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; bucharest = make_city(&#x27;Bucharest&#x27;, 44.43, 26.10)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; vienna = make_city(&#x27;Vienna&#x27;, 48.20, 16.37)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; closer_city(41.29, 174.78, bucharest, vienna)</span></span><br><span class="line"><span class="string">    &#x27;Bucharest&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    city_c = make_city(<span class="string">&quot;Target&quot;</span>, lat, lon)</span><br><span class="line">    <span class="keyword">return</span> get_name(city_a)\</span><br><span class="line">        <span class="keyword">if</span> distance(city_a, city_c) &lt; distance(city_b, city_c)\</span><br><span class="line">            <span class="keyword">else</span> get_name(city_b)</span><br></pre></td></tr></table></figure>

<h4 id="Q4-Don’t-violate-the-abstraction-barrier"><a href="#Q4-Don’t-violate-the-abstraction-barrier" class="headerlink" title="Q4: Don’t violate the abstraction barrier!"></a>Q4: Don’t violate the abstraction barrier!</h4><p>没有代码的实现，本题是让你检查在之前两题的实现中，是否违反了抽象的隔离，没有使用<code>ADT</code>的构造器和选择器，而是之间访问其数据，直接用列表构造<strong>城市</strong>，这些行为会导致无法通过本题测试。</p>
<h3 id="Trees"><a href="#Trees" class="headerlink" title="Trees"></a>Trees</h3><p>本实验的<strong>树</strong>的<code>ADT</code>如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tree ADT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tree</span>(<span class="params">label, branches=[]</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Construct a tree with the given label value and a list of branches.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> change_abstraction.changed:</span><br><span class="line">        <span class="keyword">for</span> branch <span class="keyword">in</span> branches:</span><br><span class="line">            <span class="keyword">assert</span> is_tree(branch), <span class="string">&#x27;branches must be trees&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;label&#x27;</span>: label, <span class="string">&#x27;branches&#x27;</span>: <span class="built_in">list</span>(branches)&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> branch <span class="keyword">in</span> branches:</span><br><span class="line">            <span class="keyword">assert</span> is_tree(branch), <span class="string">&#x27;branches must be trees&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> [label] + <span class="built_in">list</span>(branches)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">label</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the label value of a tree.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> change_abstraction.changed:</span><br><span class="line">        <span class="keyword">return</span> tree[<span class="string">&#x27;label&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">branches</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the list of branches of the given tree.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> change_abstraction.changed:</span><br><span class="line">        <span class="keyword">return</span> tree[<span class="string">&#x27;branches&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> tree[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_tree</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns True if the given tree is a tree, and False otherwise.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> change_abstraction.changed:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(tree) != <span class="built_in">dict</span> <span class="keyword">or</span> <span class="built_in">len</span>(tree) != <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> branch <span class="keyword">in</span> branches(tree):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> is_tree(branch):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(tree) != <span class="built_in">list</span> <span class="keyword">or</span> <span class="built_in">len</span>(tree) &lt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> branch <span class="keyword">in</span> branches(tree):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> is_tree(branch):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_leaf</span>(<span class="params">tree</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns True if the given tree&#x27;s list of branches is empty, and False</span></span><br><span class="line"><span class="string">    otherwise.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> branches(tree)</span><br></pre></td></tr></table></figure>

<h4 id="Q5-Finding-Berries"><a href="#Q5-Finding-Berries" class="headerlink" title="Q5: Finding Berries!"></a>Q5: Finding Berries!</h4><p>实现一个<code>berry_finder(t)</code>，<code>t</code>是一棵树，如果树中某个节点包含<code>&#39;berry&#39;</code>，返回<code>True</code>，否则返回<code>False</code>。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">berry_finder</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns True if t contains a node with the value &#x27;berry&#x27; and </span></span><br><span class="line"><span class="string">    False otherwise.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; scrat = tree(&#x27;berry&#x27;)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; berry_finder(scrat)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sproul = tree(&#x27;roots&#x27;, [tree(&#x27;branch1&#x27;, [tree(&#x27;leaf&#x27;), tree(&#x27;berry&#x27;)]), tree(&#x27;branch2&#x27;)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; berry_finder(sproul)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; berry_finder(numbers)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t = tree(1, [tree(&#x27;berry&#x27;,[tree(&#x27;not berry&#x27;)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; berry_finder(t)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> label(t) == <span class="string">&#x27;berry&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> label(t) == <span class="string">&#x27;berry&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    child = branches(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> child:</span><br><span class="line">        <span class="keyword">if</span> berry_finder(b):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h4 id="Q6-Sprout-leaves"><a href="#Q6-Sprout-leaves" class="headerlink" title="Q6: Sprout leaves"></a>Q6: Sprout leaves</h4><p>实现<code>sprout_leaves(t, leaves)</code>函数：</p>
<ul>
<li><code>t</code>：一棵树</li>
<li><code>leaves</code>：值的列表</li>
</ul>
<p>返回一棵新的树，是在<code>t</code>的叶子上加上<code>leaves</code>得到的。</p>
<p><code>eg</code>：</p>
<p>有这样一棵树<code>t = tree(1, [tree(2), tree(3, [tree(4)])])</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="number">1</span></span><br><span class="line"> / \</span><br><span class="line"><span class="number">2</span>   <span class="number">3</span></span><br><span class="line">    |</span><br><span class="line">    <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>调用<code>sprout_leaves(t, [5, 6])</code>之后：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">     <span class="number">1</span></span><br><span class="line">   /   \</span><br><span class="line">  <span class="number">2</span>     <span class="number">3</span></span><br><span class="line"> / \    |</span><br><span class="line"><span class="number">5</span>   <span class="number">6</span>   <span class="number">4</span></span><br><span class="line">       / \</span><br><span class="line">      <span class="number">5</span>   <span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sprout_leaves</span>(<span class="params">t, leaves</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sprout new leaves containing the data in leaves at each leaf in</span></span><br><span class="line"><span class="string">    the original tree t and return the resulting tree.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t1 = tree(1, [tree(2), tree(3)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(t1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; new1 = sprout_leaves(t1, [4, 5])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(new1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        4</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">        4</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t2 = tree(1, [tree(2, [tree(3)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(t2)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        3</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; new2 = sprout_leaves(t2, [6, 1, 2])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(new2)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">        3</span></span><br><span class="line"><span class="string">          6</span></span><br><span class="line"><span class="string">          1</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> tree(label(t), [tree(leave) <span class="keyword">for</span> leave <span class="keyword">in</span> leaves])</span><br><span class="line">    </span><br><span class="line">    child = branches(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tree(label(t), [sprout_leaves(b, leaves) <span class="keyword">for</span> b <span class="keyword">in</span> child])</span><br></pre></td></tr></table></figure>

<h4 id="Q7-Don’t-violate-the-abstraction-barrier"><a href="#Q7-Don’t-violate-the-abstraction-barrier" class="headerlink" title="Q7: Don’t violate the abstraction barrier!"></a>Q7: Don’t violate the abstraction barrier!</h4><p>和<code>Q4</code>一样，不再多加赘述。</p>
<p>使用如下命令测试上述题目：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Lab 5</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Running tests</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Test summary</span><br><span class="line">    7 test cases passed! No cases failed.</span><br></pre></td></tr></table></figure>

<h2 id="Optional-Questions"><a href="#Optional-Questions" class="headerlink" title="Optional Questions"></a>Optional Questions</h2><h3 id="Q8-Coordinates"><a href="#Q8-Coordinates" class="headerlink" title="Q8: Coordinates"></a>Q8: Coordinates</h3><p>实现<code>coords(fn, seq, lower, upper)</code>函数：</p>
<ul>
<li><code>fn</code>：计算函数</li>
<li><code>seq</code>：自变量的序列</li>
<li><code>lower</code>、<code>upper</code>：因变量<code>fn(x)</code>的最小值和最大值</li>
</ul>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">coords</span>(<span class="params">fn, seq, lower, upper</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; seq = [-4, -2, 0, 1, 3]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fn = lambda x: x**2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; coords(fn, seq, 1, 9)</span></span><br><span class="line"><span class="string">    [[-2, 4], [1, 1], [3, 9]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [[x, fn(x)] <span class="keyword">for</span> x <span class="keyword">in</span> seq <span class="keyword">if</span> lower &lt;= fn(x) &lt;= upper]</span><br></pre></td></tr></table></figure>

<h3 id="Q9-Riffle-Shuffle"><a href="#Q9-Riffle-Shuffle" class="headerlink" title="Q9: Riffle Shuffle"></a>Q9: Riffle Shuffle</h3><p>实现<code>riffle(deck)</code>函数：</p>
<ul>
<li><code>deck</code>：值的序列</li>
</ul>
<p>返回一个列表，值是序列的第一个元素，中间一个元素，循环往复。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">riffle</span>(<span class="params">deck</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Produces a single, perfect riffle shuffle of DECK, consisting of</span></span><br><span class="line"><span class="string">    DECK[0], DECK[M], DECK[1], DECK[M+1], ... where M is position of the</span></span><br><span class="line"><span class="string">    second half of the deck.  Assume that len(DECK) is even.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; riffle([3, 4, 5, 6])</span></span><br><span class="line"><span class="string">    [3, 5, 4, 6]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; riffle(range(20))</span></span><br><span class="line"><span class="string">    [0, 10, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line"></span><br><span class="line">    deck = <span class="built_in">list</span>(deck)</span><br><span class="line">    <span class="keyword">return</span> deck <span class="keyword">if</span> <span class="built_in">len</span>(deck) == <span class="number">2</span> <span class="keyword">else</span>\</span><br><span class="line">        [deck[<span class="number">0</span>], deck[<span class="built_in">len</span>(deck) // <span class="number">2</span>]] +\</span><br><span class="line">            riffle(deck[<span class="number">1</span> : <span class="built_in">len</span>(deck) // <span class="number">2</span>] + deck[<span class="built_in">len</span>(deck) // <span class="number">2</span> + <span class="number">1</span> : ])</span><br></pre></td></tr></table></figure>

<h3 id="Q10-Add-trees"><a href="#Q10-Add-trees" class="headerlink" title="Q10: Add trees"></a>Q10: Add trees</h3><p>实现<code>add_trees(t1, t2)</code>函数，返回两棵树相加的结果树，如果有的节点只有一棵树有，就创建新的节点。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_trees</span>(<span class="params">t1, t2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; numbers = tree(1,</span></span><br><span class="line"><span class="string">    ...                [tree(2,</span></span><br><span class="line"><span class="string">    ...                      [tree(3),</span></span><br><span class="line"><span class="string">    ...                       tree(4)]),</span></span><br><span class="line"><span class="string">    ...                 tree(5,</span></span><br><span class="line"><span class="string">    ...                      [tree(6,</span></span><br><span class="line"><span class="string">    ...                            [tree(7)]),</span></span><br><span class="line"><span class="string">    ...                       tree(8)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(add_trees(numbers, numbers))</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">      4</span></span><br><span class="line"><span class="string">        6</span></span><br><span class="line"><span class="string">        8</span></span><br><span class="line"><span class="string">      10</span></span><br><span class="line"><span class="string">        12</span></span><br><span class="line"><span class="string">          14</span></span><br><span class="line"><span class="string">        16</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(add_trees(tree(2), tree(3, [tree(4), tree(5)])))</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">      4</span></span><br><span class="line"><span class="string">      5</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(add_trees(tree(2, [tree(3)]), tree(2, [tree(3), tree(4)])))</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">      6</span></span><br><span class="line"><span class="string">      4</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(add_trees(tree(2, [tree(3, [tree(4), tree(5)])]), \</span></span><br><span class="line"><span class="string">    tree(2, [tree(3, [tree(4)]), tree(5)])))</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">      6</span></span><br><span class="line"><span class="string">        8</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">      5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> t1:</span><br><span class="line">        <span class="keyword">return</span> t2</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> t2:</span><br><span class="line">        <span class="keyword">return</span> t1</span><br><span class="line"></span><br><span class="line">    child1 = branches(t1)</span><br><span class="line">    child2 = branches(t2)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> tree(label(t1) + label(t2),\</span><br><span class="line">            [ add_trees(child1[i] <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(child1) <span class="keyword">else</span> [],\</span><br><span class="line">                child2[i] <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(child2) <span class="keyword">else</span> []) \</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="built_in">len</span>(child1), <span class="built_in">len</span>(child2)))])</span><br></pre></td></tr></table></figure>

<h3 id="Fun-Question"><a href="#Fun-Question" class="headerlink" title="Fun Question!"></a>Fun Question!</h3><h3 id="Shakespeare-and-Dictionaries"><a href="#Shakespeare-and-Dictionaries" class="headerlink" title="Shakespeare and Dictionaries"></a>Shakespeare and Dictionaries</h3><blockquote>
<p>We will use dictionaries to approximate the entire works of Shakespeare! We’re going to use a bigram language model. Here’s the idea: We start with some word – we’ll use “The” as an example. Then we look through all of the texts of Shakespeare and for every instance of “The” we record the word that follows “The” and add it to a list, known as the <em>successors</em> of “The”. Now suppose we’ve done this for every word Shakespeare has used, ever.</p>
<p>Let’s go back to “The”. Now, we randomly choose a word from this list, say “cat”. Then we look up the successors of “cat” and randomly choose a word from that list, and we continue this process. This eventually will terminate in a period (“.”) and we will have generated a Shakespearean sentence!</p>
<p>The object that we’ll be looking things up in is called a “successor table”, although really it’s just a dictionary. The keys in this dictionary are words, and the values are lists of successors to those words.</p>
</blockquote>
<h4 id="Q11-Successor-Tables"><a href="#Q11-Successor-Tables" class="headerlink" title="Q11: Successor Tables"></a>Q11: Successor Tables</h4><p>实现<code>build_successors_table(tokens)</code>函数，返回<code>tokens</code>中的单词的后续字典。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_successors_table</span>(<span class="params">tokens</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a dictionary: keys are words; values are lists of successors.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; text = [&#x27;We&#x27;, &#x27;came&#x27;, &#x27;to&#x27;, &#x27;investigate&#x27;, &#x27;,&#x27;, &#x27;catch&#x27;, &#x27;bad&#x27;, &#x27;guys&#x27;, &#x27;and&#x27;, &#x27;to&#x27;, &#x27;eat&#x27;, &#x27;pie&#x27;, &#x27;.&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; table = build_successors_table(text)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sorted(table)</span></span><br><span class="line"><span class="string">    [&#x27;,&#x27;, &#x27;.&#x27;, &#x27;We&#x27;, &#x27;and&#x27;, &#x27;bad&#x27;, &#x27;came&#x27;, &#x27;catch&#x27;, &#x27;eat&#x27;, &#x27;guys&#x27;, &#x27;investigate&#x27;, &#x27;pie&#x27;, &#x27;to&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; table[&#x27;to&#x27;]</span></span><br><span class="line"><span class="string">    [&#x27;investigate&#x27;, &#x27;eat&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; table[&#x27;pie&#x27;]</span></span><br><span class="line"><span class="string">    [&#x27;.&#x27;]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; table[&#x27;.&#x27;]</span></span><br><span class="line"><span class="string">    [&#x27;We&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    table = &#123;&#125;</span><br><span class="line">    prev = <span class="string">&#x27;.&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> tokens:</span><br><span class="line">        <span class="keyword">if</span> prev <span class="keyword">not</span> <span class="keyword">in</span> table:</span><br><span class="line">            <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">            table[prev] = [word]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            table[prev] += [word]</span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        prev = word</span><br><span class="line">    <span class="keyword">return</span> table</span><br></pre></td></tr></table></figure>

<h4 id="Q12-Construct-the-Sentence"><a href="#Q12-Construct-the-Sentence" class="headerlink" title="Q12: Construct the Sentence"></a>Q12: Construct the Sentence</h4><p>实现<code>construct_sent(word, table)</code>，根据<code>table</code>字典，返回一个以<code>word</code>开头的句子。</p>
<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">construct_sent</span>(<span class="params">word, table</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Prints a random sentence starting with word, sampling from</span></span><br><span class="line"><span class="string">    table.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; table = &#123;&#x27;Wow&#x27;: [&#x27;!&#x27;], &#x27;Sentences&#x27;: [&#x27;are&#x27;], &#x27;are&#x27;: [&#x27;cool&#x27;], &#x27;cool&#x27;: [&#x27;.&#x27;]&#125;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; construct_sent(&#x27;Wow&#x27;, table)</span></span><br><span class="line"><span class="string">    &#x27;Wow!&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; construct_sent(&#x27;Sentences&#x27;, table)</span></span><br><span class="line"><span class="string">    &#x27;Sentences are cool.&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> word <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;?&#x27;</span>]:</span><br><span class="line">        <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">        result += word + <span class="string">&#x27; &#x27;</span></span><br><span class="line">        word = random.choice(table[word])</span><br><span class="line">    <span class="keyword">return</span> result.strip() + word</span><br></pre></td></tr></table></figure>

<h4 id="Putting-it-all-together"><a href="#Putting-it-all-together" class="headerlink" title="Putting it all together"></a>Putting it all together</h4><p>给予<code>Q11</code>和<code>Q12</code>更多真实的数据，我跑的时候一直报<code>urllib.error.HTTPError: HTTP Error 502: Bad Gateway</code>，就不做了。</p>
]]></content>
  </entry>
  <entry>
    <title>【C++游戏开发】游戏框架|井字棋游戏</title>
    <url>/2024/06/13/Cpp-EasyX-%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6-%E4%BA%95%E5%AD%97%E6%A3%8B%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<p>实现以下功能：</p>
<ul>
<li><p><input checked="" disabled="" type="checkbox"> 
绘制井字棋界面</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
单机对战交互</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
游戏胜负的判断</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
提示信息：当前的玩家、游戏结束的弹窗</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
性能优化</p>
</li>
</ul>
<p>注意事项：</p>
<ul>
<li>在多个文件中使用同一个常量，需要把常量的声明和定义都写成<code>extern</code>，因为常量默认是内部连接的。</li>
</ul>
<h2 id="绘制井字棋界面"><a href="#绘制井字棋界面" class="headerlink" title="绘制井字棋界面"></a>绘制井字棋界面</h2><p>游戏界面使用<code>600 X 600</code>的大小，<code>flag</code>参数选择<code>EX_SHOWCONSOLE</code>，使得游戏界面和控制台能够同时显示。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">int</span> WIDTH = <span class="number">600</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">int</span> HEIGHT = <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">initgraph</span>(WIDTH, HEIGHT, EX_SHOWCONSOLE);</span><br></pre></td></tr></table></figure>

<p>使用<code>EasyX</code>的<code>line</code>函数绘制棋盘，需要两横两纵共4条直线。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">drawBoard</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">line</span>(<span class="number">0</span>, <span class="number">200</span>, <span class="number">600</span>, <span class="number">200</span>);</span><br><span class="line">	<span class="built_in">line</span>(<span class="number">0</span>, <span class="number">400</span>, <span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line">	<span class="built_in">line</span>(<span class="number">200</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">600</span>);</span><br><span class="line">	<span class="built_in">line</span>(<span class="number">400</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">600</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>绘制效果如下（左上角为提示信息，后文将提及）：</p>
<img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/fd68309c35b4e123c41e5ac6531b947.png" width="40%" height="40%">

<h2 id="单机对战交互"><a href="#单机对战交互" class="headerlink" title="单机对战交互"></a>单机对战交互</h2><p>定义一个<code>3 X 3</code>的棋盘，有X和<code>O</code>两位棋手。初始时，所有位置都没有棋子，默认为<code>-</code>，放置了棋子后，变成<code>X</code>或<code>O</code>。</p>
<p>初始化棋盘和玩家：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> player = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">std::vector&lt;std::vector&lt;<span class="type">char</span>&gt;&gt; board;</span><br><span class="line"></span><br><span class="line">board = &#123;</span><br><span class="line">	&#123;<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;-&#x27;</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;-&#x27;</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;-&#x27;</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>使用peekmessage函数处理鼠标事件，在对应位置尝试放置棋子（<code>logMouseClick</code>函数用于向控制台打印日志信息，方便调试）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">logMouseClick</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;Click at (&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;).&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">setPiece</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i &gt;= <span class="number">0</span> &amp;&amp; i &lt; board.<span class="built_in">size</span>() &amp;&amp;</span><br><span class="line">		j &gt;= <span class="number">0</span> &amp;&amp; j &lt; board[i].<span class="built_in">size</span>() &amp;&amp;</span><br><span class="line">		board[i][j] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">		board[i][j] = player;</span><br><span class="line">		player = (player == <span class="string">&#x27;X&#x27;</span> ? <span class="string">&#x27;O&#x27;</span> : <span class="string">&#x27;X&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">readAndProcessData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ExMessage msg;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">peekmessage</span>(&amp;msg)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (msg.message == WM_LBUTTONDOWN) &#123;</span><br><span class="line">			<span class="type">int</span> i = msg.y / <span class="number">200</span>, j = msg.x / <span class="number">200</span>;</span><br><span class="line">			<span class="built_in">logMouseClick</span>(i, j);</span><br><span class="line">			<span class="built_in">setPiece</span>(i, j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每一轮游戏循环都要检查游戏是否结束，结束条件如下：</p>
<ul>
<li>玩家X或玩家O获胜</li>
<li>棋盘已经被摆满且无人获胜</li>
</ul>
<p>游戏结束时使用<code>MessageBox</code>函数（此函数为<code>Windows API</code>）弹出确认按钮。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">checkWin</span><span class="params">(<span class="type">char</span> player)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">0</span>] == player &amp;&amp; board[<span class="number">0</span>][<span class="number">0</span>] == board[<span class="number">0</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">0</span>][<span class="number">1</span>] == board[<span class="number">0</span>][<span class="number">2</span>]) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (board[<span class="number">1</span>][<span class="number">0</span>] == player &amp;&amp; board[<span class="number">1</span>][<span class="number">0</span>] == board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">1</span>] == board[<span class="number">1</span>][<span class="number">2</span>]) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (board[<span class="number">2</span>][<span class="number">0</span>] == player &amp;&amp; board[<span class="number">2</span>][<span class="number">0</span>] == board[<span class="number">2</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">2</span>][<span class="number">1</span>] == board[<span class="number">2</span>][<span class="number">2</span>]) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">0</span>] == player &amp;&amp; board[<span class="number">0</span>][<span class="number">0</span>] == board[<span class="number">1</span>][<span class="number">0</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">0</span>] == board[<span class="number">2</span>][<span class="number">0</span>]) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">0</span>] == player &amp;&amp; board[<span class="number">0</span>][<span class="number">0</span>] == board[<span class="number">1</span>][<span class="number">0</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">0</span>] == board[<span class="number">2</span>][<span class="number">0</span>]) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">1</span>] == player &amp;&amp; board[<span class="number">0</span>][<span class="number">1</span>] == board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">1</span>] == board[<span class="number">2</span>][<span class="number">1</span>]) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">2</span>] == player &amp;&amp; board[<span class="number">0</span>][<span class="number">2</span>] == board[<span class="number">1</span>][<span class="number">2</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">2</span>] == board[<span class="number">2</span>][<span class="number">2</span>]) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">0</span>] == player &amp;&amp; board[<span class="number">0</span>][<span class="number">0</span>] == board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">1</span>] == board[<span class="number">2</span>][<span class="number">2</span>]) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (board[<span class="number">0</span>][<span class="number">2</span>] == player &amp;&amp; board[<span class="number">0</span>][<span class="number">2</span>] == board[<span class="number">1</span>][<span class="number">1</span>] &amp;&amp; board[<span class="number">1</span>][<span class="number">1</span>] == board[<span class="number">2</span>][<span class="number">0</span>]) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">checkTie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> line : board) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> piece : line) &#123;</span><br><span class="line">			<span class="keyword">if</span> (piece == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">checkGameOver</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> lastPlayer = player == <span class="string">&#x27;X&#x27;</span> ? <span class="string">&#x27;O&#x27;</span> : <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">checkWin</span>(lastPlayer)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (lastPlayer == <span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">			<span class="built_in">MessageBox</span>(<span class="built_in">GetHWnd</span>(), <span class="string">L&quot;X 玩家获胜&quot;</span>, <span class="string">L&quot;对局结束&quot;</span>, MB_OK);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (lastPlayer == <span class="string">&#x27;O&#x27;</span>)</span><br><span class="line">			<span class="built_in">MessageBox</span>(<span class="built_in">GetHWnd</span>(), <span class="string">L&quot;O 玩家获胜&quot;</span>, <span class="string">L&quot;对局结束&quot;</span>, MB_OK);</span><br><span class="line">		running = <span class="literal">false</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">checkTie</span>()) &#123;</span><br><span class="line">		<span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">L&quot;平局&quot;</span>, <span class="string">L&quot;对局结束&quot;</span>, MB_OK);</span><br><span class="line">		running = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>outtextxy</code>函数在游戏窗口左上角打印提示信息（注意需要使用宽字符串）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">showHints</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">wchar_t</span> str[<span class="number">64</span>];</span><br><span class="line">	_stprintf_s(str, <span class="string">L&quot;当前玩家: %c&quot;</span>, player);</span><br><span class="line">	<span class="built_in">settextcolor</span>(LIGHTRED);</span><br><span class="line">	<span class="built_in">outtextxy</span>(<span class="number">10</span>, <span class="number">10</span>, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>游戏结束画面如下：</p>
<img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/227c2561b45b2ca320d91762b735da5.png" width="70%" height="70%">

<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>游戏的主循环运行次数较多，对<code>CPU</code>资源造成了较大的浪费，限制每秒渲染的帧数，降低资源浪费。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (running) &#123;</span><br><span class="line">    <span class="keyword">auto</span> time_start = std::chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">readAndProcessData</span>();  <span class="comment">// 读取数据并处理数据</span></span><br><span class="line">    <span class="built_in">draw</span>();	 <span class="comment">// 绘制画面</span></span><br><span class="line">    <span class="built_in">checkGameOver</span>(); <span class="comment">// 检查游戏是否结束</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> time_end = std::chrono::system_clock::<span class="built_in">now</span>();</span><br><span class="line">    <span class="keyword">auto</span> duration = std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;</span><br><span class="line">        (time_end - time_start).<span class="built_in">count</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1000</span> / <span class="number">60</span> &gt; duration) &#123;</span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(std::chrono::<span class="built_in">milliseconds</span>(<span class="number">1000</span> / <span class="number">60</span> - duration));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p><a href="https://www.bilibili.com/video/BV1ru4y1a7rL/">【从零开始的C++游戏开发】最简游戏框架 | EasyX制作井字棋小游戏（上）</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/BV1Gg4y1R74m/">【从零开始的C++游戏开发】动态延时优化性能 | EasyX制作井字棋小游戏（下）</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
        <category>EasyX</category>
      </categories>
  </entry>
  <entry>
    <title>【C++ Primer】Static关键字</title>
    <url>/2024/06/13/Cpp-CppPrimer-Static-Keyword/</url>
    <content><![CDATA[<p>在C++中，static可以修饰局部变量、全局变量、类外函数、类内的数据成员、类内函数成员，本文将对其一一进行分析。</p>
<h3 id="static修饰的局部变量"><a href="#static修饰的局部变量" class="headerlink" title="static修饰的局部变量"></a>static修饰的局部变量</h3><p>static修饰局部变量时，局部变量的生命周期和整个程序相同，作用域不变。因此，static修饰的局部变量常用于在块内重复使用的变量。</p>
<p>在下面的示例代码中，func函数有一个static变量cnt，每次调用这个函数时，只有第一次调用会定义cnt：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	std::cout &lt;&lt; ++cnt &lt;&lt; <span class="string">&quot;\tfunction call.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">		<span class="built_in">func</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1       function call.</span><br><span class="line">2       function call.</span><br><span class="line">3       function call.</span><br><span class="line">4       function call.</span><br><span class="line">5       function call.</span><br><span class="line">6       function call.</span><br><span class="line">7       function call.</span><br><span class="line">8       function call.</span><br><span class="line">9       function call.</span><br><span class="line">10      function call.</span><br></pre></td></tr></table></figure>

<h3 id="static修饰的全局变量与类外函数"><a href="#static修饰的全局变量与类外函数" class="headerlink" title="static修饰的全局变量与类外函数"></a>static修饰的全局变量与类外函数</h3><p>当static修饰全局变量和类外函数时，会将两者的链接属性变成内部链接，意味着其他文件访问不到static修饰的全局变量和类外函数。这样做有利于保持全局命名空间的简洁，对于只在本文件使用的全局变量和类外函数，建议使用static修饰。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// in main.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> s_g_cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	std::cout &lt;&lt; s_g_cnt &lt;&lt; std::endl;</span><br><span class="line">	<span class="built_in">func2</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// in static.cpp</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> s_g_cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>编译时报错：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Build started at <span class="number">18</span>:<span class="number">21.</span>..</span><br><span class="line"><span class="number">1</span>&gt;------ Build started: Project: StaticKeyword, Configuration: Debug x64 ------</span><br><span class="line"><span class="number">1</span>&gt;main.cpp</span><br><span class="line"><span class="number">1</span>&gt;main.obj : error LNK2019: unresolved external symbol <span class="string">&quot;void __cdecl func2(void)&quot;</span> (?func2@@YAXXZ) referenced in function main</span><br><span class="line"><span class="number">1</span>&gt;main.obj : error LNK2001: unresolved external symbol <span class="string">&quot;int s_g_cnt&quot;</span> (?s_g_cnt@@<span class="number">3</span>HA)</span><br><span class="line"><span class="number">1</span>&gt;D:\repos\Example\CppKeyword\x64\Debug\StaticKeyword.exe : fatal error LNK1120: <span class="number">2</span> unresolved externals</span><br><span class="line"><span class="number">1</span>&gt;Done building project <span class="string">&quot;StaticKeyword.vcxproj&quot;</span> -- FAILED.</span><br><span class="line">========== Build: <span class="number">0</span> succeeded, <span class="number">1</span> failed, <span class="number">0</span> up-to-date, <span class="number">0</span> skipped ==========</span><br><span class="line">========== Build completed at <span class="number">18</span>:<span class="number">21</span> <span class="keyword">and</span> took <span class="number">00.904</span> seconds ==========</span><br></pre></td></tr></table></figure>

<p>因为全局变量s_g_cnt和类外函数func2都被static修饰，所以其他文件不能访问到他们。</p>
<h3 id="static修饰的类内数据成员和类内函数成员"><a href="#static修饰的类内数据成员和类内函数成员" class="headerlink" title="static修饰的类内数据成员和类内函数成员"></a>static修饰的类内数据成员和类内函数成员</h3><p>类内的成员被static修饰后，就变成了该类的类成员，不需要创建实例也可以通过类名直接访问。但是，static修饰的成员函数不能访问普通的成员，因为调用static成员函数不需要实例化，也就不能保证初始化了普通成员。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> s_m_x;</span><br><span class="line">	<span class="type">int</span> m_y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		s_m_x = <span class="number">2024</span>;</span><br><span class="line">		m_y = <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上述定义会导致编译出错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Build started at 20:13...</span><br><span class="line"><span class="meta prompt_">1&gt;</span><span class="language-bash">------ Build started: Project: StaticKeyword, Configuration: Debug x64 ------</span></span><br><span class="line"><span class="meta prompt_">1&gt;</span><span class="language-bash">main.cpp</span></span><br><span class="line"><span class="meta prompt_">1&gt;</span><span class="language-bash">D:\repos\Example\CppKeyword\StaticKeyword\main.cpp(22,3): error C2597: illegal reference to non-static member <span class="string">&#x27;C::m_y&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">1&gt;</span><span class="language-bash">Done building project <span class="string">&quot;StaticKeyword.vcxproj&quot;</span> -- FAILED.</span></span><br><span class="line">========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========</span><br><span class="line">========== Build completed at 20:13 and took 01.018 seconds ==========</span><br></pre></td></tr></table></figure>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://www.youtube.com/watch?v=f3FVU-iwNuA">Static in C++</a></li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
        <category>C++ Primer</category>
      </categories>
  </entry>
  <entry>
    <title>CS61A Homework04</title>
    <url>/2024/06/13/CS61A-Homework04/</url>
    <content><![CDATA[<h1 id="Homework-4-Trees-Data-Abstraction"><a href="#Homework-4-Trees-Data-Abstraction" class="headerlink" title="Homework 4: Trees, Data Abstraction"></a>Homework 4: Trees, Data Abstraction</h1><p>本次作业的内容主要涉及抽象数据类型的编程，题目背景一般较为冗长，故不多加赘述。</p>
<h2 id="Abstraction"><a href="#Abstraction" class="headerlink" title="Abstraction"></a>Abstraction</h2><h3 id="Q1-Weights"><a href="#Q1-Weights" class="headerlink" title="Q1: Weights"></a>Q1: Weights</h3><p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">planet</span>(<span class="params">size</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Construct a planet of some size.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> size &gt; <span class="number">0</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;planet&#x27;</span>, size]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">w</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Select the size of a planet.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> is_planet(w), <span class="string">&#x27;must call size on a planet&#x27;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> w[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h3 id="Q2-Balanced"><a href="#Q2-Balanced" class="headerlink" title="Q2: Balanced"></a>Q2: Balanced</h3><p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">balanced</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether m is balanced.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t, u, v = examples()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(t)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(v)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; w = mobile(arm(3, t), arm(2, u))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(w)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(mobile(arm(1, v), arm(1, w)))</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(mobile(arm(1, w), arm(1, v)))</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # checking for abstraction barrier violations by banning indexing</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;balanced&#x27;, [&#x27;Index&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_planet(m):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    left_m = left(m)</span><br><span class="line">    right_m = right(m)</span><br><span class="line">    end_left_m = end(left_m)</span><br><span class="line">    end_right_m = end(right_m)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  length(left_m) * total_weight(end_left_m) ==\</span><br><span class="line">        length(right_m) * total_weight(end_right_m) <span class="keyword">and</span>\</span><br><span class="line">            balanced(end_left_m) <span class="keyword">and</span> balanced(end_right_m)</span><br></pre></td></tr></table></figure>

<h3 id="Q3-Totals"><a href="#Q3-Totals" class="headerlink" title="Q3: Totals"></a>Q3: Totals</h3><p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">totals_tree</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a tree representing the mobile with its total weight at the root.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t, u, v = examples()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(totals_tree(t))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">      2</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(totals_tree(u))</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">      1</span></span><br><span class="line"><span class="string">      5</span></span><br><span class="line"><span class="string">        3</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(totals_tree(v))</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">      3</span></span><br><span class="line"><span class="string">        2</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">      6</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string">        5</span></span><br><span class="line"><span class="string">          3</span></span><br><span class="line"><span class="string">          2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # checking for abstraction barrier violations by banning indexing</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;totals_tree&#x27;, [&#x27;Index&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_planet(m):</span><br><span class="line">        <span class="keyword">return</span> tree(size(m))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> tree(total_weight(m),\</span><br><span class="line">        [ totals_tree(end(left(m))),\</span><br><span class="line">            totals_tree(end(right(m))) ])</span><br></pre></td></tr></table></figure>

<h2 id="Trees"><a href="#Trees" class="headerlink" title="Trees"></a>Trees</h2><h3 id="Q4-Replace-Thor-at-Leaf"><a href="#Q4-Replace-Thor-at-Leaf" class="headerlink" title="Q4: Replace Thor at Leaf"></a>Q4: Replace Thor at Leaf</h3><p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">replace_thor_at_leaf</span>(<span class="params">t, thors_replacement</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a new tree where every leaf value equal to &quot;thor&quot; has</span></span><br><span class="line"><span class="string">    been replaced with thors_replacement.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; yggdrasil = tree(&#x27;odin&#x27;,</span></span><br><span class="line"><span class="string">    ...                  [tree(&#x27;balder&#x27;,</span></span><br><span class="line"><span class="string">    ...                        [tree(&#x27;thor&#x27;),</span></span><br><span class="line"><span class="string">    ...                         tree(&#x27;freya&#x27;)]),</span></span><br><span class="line"><span class="string">    ...                   tree(&#x27;frigg&#x27;,</span></span><br><span class="line"><span class="string">    ...                        [tree(&#x27;thor&#x27;)]),</span></span><br><span class="line"><span class="string">    ...                   tree(&#x27;thor&#x27;,</span></span><br><span class="line"><span class="string">    ...                        [tree(&#x27;sif&#x27;),</span></span><br><span class="line"><span class="string">    ...                         tree(&#x27;thor&#x27;)]),</span></span><br><span class="line"><span class="string">    ...                   tree(&#x27;thor&#x27;)])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; laerad = copy_tree(yggdrasil) # copy yggdrasil for testing purposes</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(replace_thor_at_leaf(yggdrasil, &#x27;freya&#x27;))</span></span><br><span class="line"><span class="string">    odin</span></span><br><span class="line"><span class="string">      balder</span></span><br><span class="line"><span class="string">        freya</span></span><br><span class="line"><span class="string">        freya</span></span><br><span class="line"><span class="string">      frigg</span></span><br><span class="line"><span class="string">        freya</span></span><br><span class="line"><span class="string">      thor</span></span><br><span class="line"><span class="string">        sif</span></span><br><span class="line"><span class="string">        freya</span></span><br><span class="line"><span class="string">      freya</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; laerad == yggdrasil # Make sure original tree is unmodified</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> tree(label(t) <span class="keyword">if</span> label(t) != <span class="string">&#x27;thor&#x27;</span> <span class="keyword">else</span> thors_replacement)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tree(label(t),\</span><br><span class="line">        [replace_thor_at_leaf(child, thors_replacement) <span class="keyword">for</span> child <span class="keyword">in</span> branches(t)] )</span><br></pre></td></tr></table></figure>

<h3 id="Q5-Has-Path"><a href="#Q5-Has-Path" class="headerlink" title="Q5: Has Path"></a>Q5: Has Path</h3><p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">has_path</span>(<span class="params">t, word</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether there is a path in a tree where the entries along the path</span></span><br><span class="line"><span class="string">    spell out a particular word.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; greetings = tree(&#x27;h&#x27;, [tree(&#x27;i&#x27;),</span></span><br><span class="line"><span class="string">    ...                        tree(&#x27;e&#x27;, [tree(&#x27;l&#x27;, [tree(&#x27;l&#x27;, [tree(&#x27;o&#x27;)])]),</span></span><br><span class="line"><span class="string">    ...                                   tree(&#x27;y&#x27;)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; print_tree(greetings)</span></span><br><span class="line"><span class="string">    h</span></span><br><span class="line"><span class="string">      i</span></span><br><span class="line"><span class="string">      e</span></span><br><span class="line"><span class="string">        l</span></span><br><span class="line"><span class="string">          l</span></span><br><span class="line"><span class="string">            o</span></span><br><span class="line"><span class="string">        y</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;h&#x27;)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;i&#x27;)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;hi&#x27;)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;hello&#x27;)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;hey&#x27;)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;bye&#x27;)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; has_path(greetings, &#x27;hint&#x27;)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(word) &gt; <span class="number">0</span>, <span class="string">&#x27;no path for empty word.&#x27;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> word[<span class="number">0</span>] != label(t):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(word) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> branches(t):</span><br><span class="line">        <span class="keyword">if</span> has_path(child, word[<span class="number">1</span>:]):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h3 id="Q6-Preorder"><a href="#Q6-Preorder" class="headerlink" title="Q6: Preorder"></a>Q6: Preorder</h3><p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">preorder</span>(<span class="params">t</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a list of the entries in this tree in the order that they</span></span><br><span class="line"><span class="string">    would be visited by a preorder traversal (see problem description).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; numbers = tree(1, [tree(2), tree(3, [tree(4), tree(5)]), tree(6, [tree(7)])])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; preorder(numbers)</span></span><br><span class="line"><span class="string">    [1, 2, 3, 4, 5, 6, 7]</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; preorder(tree(2, [tree(4, [tree(6)])]))</span></span><br><span class="line"><span class="string">    [2, 4, 6]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> [label(t)]</span><br><span class="line">    </span><br><span class="line">    preorder_t = [label(t)]</span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> branches(t):</span><br><span class="line">        preorder_t += preorder(child)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> preorder_t</span><br></pre></td></tr></table></figure>

<h3 id="最终测试"><a href="#最终测试" class="headerlink" title="最终测试"></a>最终测试</h3><p>使用如下命令对以上题目进行测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q preorder --local</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Homework 4</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Running tests</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Test summary</span><br><span class="line">    1 test cases passed! No cases failed.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<h2 id="Extra-Questions"><a href="#Extra-Questions" class="headerlink" title="Extra Questions"></a>Extra Questions</h2><h3 id="Q7-Interval-Abstraction"><a href="#Q7-Interval-Abstraction" class="headerlink" title="Q7: Interval Abstraction"></a>Q7: Interval Abstraction</h3><p>使用如下代码进行解锁测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q interval -u --local</span><br></pre></td></tr></table></figure>

<p>过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Homework 4</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">interval &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import hw04</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hw04 import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; str_interval(interval(-1, 2))</span></span><br><span class="line">? &#x27;-1 to 2&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; str_interval(add_interval(interval(-1, 2), interval(4, 8)))</span></span><br><span class="line">? &#x27;3 to 10&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for interval unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">def interval(a, b):</span><br><span class="line">    &quot;&quot;&quot;Construct an interval from a to b.&quot;&quot;&quot;</span><br><span class="line">    return [a, b]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def lower_bound(x):</span><br><span class="line">    &quot;&quot;&quot;Return the lower bound of interval x.&quot;&quot;&quot;</span><br><span class="line">    &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">    return x[0]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def upper_bound(x):</span><br><span class="line">    &quot;&quot;&quot;Return the upper bound of interval x.&quot;&quot;&quot;</span><br><span class="line">    &quot;*** YOUR CODE HERE ***&quot;</span><br><span class="line">    return x[1]</span><br></pre></td></tr></table></figure>

<p>使用如下代码进行解锁测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q mul_interval -u --local</span><br></pre></td></tr></table></figure>

<p>过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Homework 4</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">mul_interval &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import hw04</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hw04 import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; str_interval(mul_interval(interval(-1, 2), interval(4, 8)))</span></span><br><span class="line">? &#x27;-4 to 32&#x27;</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? &#x27;-8 to 32&#x27;</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? &#x27;-8 to 16&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for mul_interval unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mul_interval</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the interval that contains the product of any value in x and any</span></span><br><span class="line"><span class="string">    value in y.&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    x0 = lower_bound(x)</span><br><span class="line">    x1 = upper_bound(x)</span><br><span class="line">    y0 = lower_bound(y)</span><br><span class="line">    y1 = upper_bound(y)</span><br><span class="line"></span><br><span class="line">    p1 = x0 * y0</span><br><span class="line">    p2 = x0 * y1</span><br><span class="line">    p3 = x1 * y0</span><br><span class="line">    p4 = x1 * y1</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> interval(<span class="built_in">min</span>(p1, p2, p3, p4), <span class="built_in">max</span>(p1, p2, p3, p4))</span><br></pre></td></tr></table></figure>

<h3 id="Q8-Sub-Interval"><a href="#Q8-Sub-Interval" class="headerlink" title="Q8: Sub Interval"></a>Q8: Sub Interval</h3><p>使用如下代码进行解锁测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q sub_interval -u --local</span><br></pre></td></tr></table></figure>

<p>过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Homework 4</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">sub_interval &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import hw04</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hw04 import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; str_interval(sub_interval(interval(-1, 2), interval(4, 8)))</span></span><br><span class="line">? &#x27;-9 to 9&#x27;</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? &#x27;-9 to -2&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for sub_interval unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sub_interval</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the interval that contains the difference between any value in x</span></span><br><span class="line"><span class="string">    and any value in y.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> interval(lower_bound(x) - upper_bound(y), upper_bound(x) - lower_bound(y))</span><br></pre></td></tr></table></figure>

<h3 id="Q9-Div-Interval"><a href="#Q9-Div-Interval" class="headerlink" title="Q9: Div Interval"></a>Q9: Div Interval</h3><p>使用如下代码进行解锁测试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 ok -q div_interval -u --local</span><br></pre></td></tr></table></figure>

<p>过程如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">=====================================================================</span><br><span class="line">Assignment: Homework 4</span><br><span class="line">OK, version v1.18.1</span><br><span class="line">=====================================================================</span><br><span class="line"></span><br><span class="line">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">Unlocking tests</span><br><span class="line"></span><br><span class="line">At each &quot;? &quot;, type what you would expect the output to be.</span><br><span class="line">Type exit() to quit</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">div_interval &gt; Suite 1 &gt; Case 1</span><br><span class="line">(cases remaining: 2)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import hw04</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; from hw04 import *</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="comment"># Type AssertionError if you think an AssertionError is raised</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; str_interval(div_interval(interval(-1, 2), interval(4, 8)))</span></span><br><span class="line">? &#x27;-0.125 to 0.5&#x27;</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? &#x27;-0.25 to 0.5&#x27;</span><br><span class="line">-- OK! --</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; str_interval(div_interval(interval(4, 8), interval(-1, 2)))</span></span><br><span class="line">? &#x27;-8.0 to 4.0&#x27;</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? &#x27;-8 to 4&#x27;</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? &#x27;-8.0 to 4.0&#x27;</span><br><span class="line">-- Not quite. Try again! --</span><br><span class="line"></span><br><span class="line">? AssertionError</span><br><span class="line">-- OK! --</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">OK! All cases for div_interval unlocked.</span><br><span class="line"></span><br><span class="line">Cannot backup when running ok with --local.</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">div_interval</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the interval that contains the quotient of any value in x divided by</span></span><br><span class="line"><span class="string">    any value in y. Division is implemented as the multiplication of x by the</span></span><br><span class="line"><span class="string">    reciprocal of y.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> lower_bound(y) &gt; <span class="number">0</span> <span class="keyword">or</span> upper_bound(y) &lt; <span class="number">0</span></span><br><span class="line">    reciprocal_y = interval(<span class="number">1</span> / upper_bound(y), <span class="number">1</span> / lower_bound(y))</span><br><span class="line">    <span class="keyword">return</span> mul_interval(x, reciprocal_y)</span><br></pre></td></tr></table></figure>

<h3 id="Q10-Par-Diff"><a href="#Q10-Par-Diff" class="headerlink" title="Q10: Par Diff"></a>Q10: Par Diff</h3><p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_par</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return two intervals that give different results for parallel resistors.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; r1, r2 = check_par()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; x = par1(r1, r2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; y = par2(r1, r2)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; lower_bound(x) != lower_bound(y) or upper_bound(x) != upper_bound(y)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    r1 = interval(<span class="number">1</span>, <span class="number">1</span>)  <span class="comment"># Replace this line!</span></span><br><span class="line">    r2 = interval(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># Replace this line!</span></span><br><span class="line">    <span class="keyword">return</span> r1, r2</span><br></pre></td></tr></table></figure>

<h3 id="Q11-Multiple-References"><a href="#Q11-Multiple-References" class="headerlink" title="Q11: Multiple References"></a>Q11: Multiple References</h3><p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">multiple_references_explanation</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;&quot;The multiple reference problem</span></span><br><span class="line"><span class="string">        caused more caculations</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Q12-Quadratic"><a href="#Q12-Quadratic" class="headerlink" title="Q12: Quadratic"></a>Q12: Quadratic</h3><p>实现代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quadratic</span>(<span class="params">x, a, b, c</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the interval that is the range of the quadratic defined by</span></span><br><span class="line"><span class="string">    coefficients a, b, and c, for domain interval x.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; str_interval(quadratic(interval(0, 2), -2, 3, -1))</span></span><br><span class="line"><span class="string">    &#x27;-3 to 0.125&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; str_interval(quadratic(interval(1, 3), 2, -3, 1))</span></span><br><span class="line"><span class="string">    &#x27;0 to 10&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">t</span>):</span><br><span class="line">        <span class="keyword">return</span> a * t * t + b * t + c</span><br><span class="line"></span><br><span class="line">    mid = -b / (<span class="number">2</span> * a)</span><br><span class="line">    lower = lower_bound(x)</span><br><span class="line">    upper = upper_bound(x)</span><br><span class="line"></span><br><span class="line">    y0 = f(mid)</span><br><span class="line">    y1 = f(lower)</span><br><span class="line">    y2 = f(upper)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> lower &lt;= mid &lt;= upper:</span><br><span class="line">        <span class="keyword">return</span> interval(<span class="built_in">min</span>(y0, y1, y2), <span class="built_in">max</span>(y0, y1, y2))</span><br><span class="line">    <span class="keyword">return</span> interval(<span class="built_in">min</span>(y1, y2), <span class="built_in">max</span>(y1, y2))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS61A</category>
        <category>Homework</category>
      </categories>
  </entry>
  <entry>
    <title>CS61A 课程笔记 Week07</title>
    <url>/2024/06/14/CS61A-CourseNote-Week07/</url>
    <content><![CDATA[<h1 id="Week7"><a href="#Week7" class="headerlink" title="Week7"></a>Week7</h1><h2 id="Lecture-16-Objects-Classes"><a href="#Lecture-16-Objects-Classes" class="headerlink" title="Lecture #16: Objects + Classes"></a>Lecture #16: Objects + Classes</h2><h3 id="如何建造一间巧克力商店（Building-a-chocolate-shop）"><a href="#如何建造一间巧克力商店（Building-a-chocolate-shop）" class="headerlink" title="如何建造一间巧克力商店（Building a chocolate shop）"></a>如何建造一间巧克力商店（<code>Building a chocolate shop</code>）</h3><p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/9f142f35cdd98af831e65a770ca6a67.png" alt="9f142f35cdd98af831e65a770ca6a67"></p>
<p>使用我们之前学习过的抽象数据类型（<code>Abstract Data Type</code>）的知识，用函数可以实现巧克力商店的所有行为，但这节课我们会引入类和对象（<code>Class and Objects</code>）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inventory tracking</span></span><br><span class="line">add_product(name, price, nutrition)</span><br><span class="line">get_label(product)</span><br><span class="line">get_nutrition_info(product)</span><br><span class="line">increase_inventory(product, amount)</span><br><span class="line">reduce_inventory(product, amount)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Customer tracking</span></span><br><span class="line">signup_customer(name, address)</span><br><span class="line">get_greeting(customer)</span><br><span class="line">get_formatted_address(customer)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Purchase tracking</span></span><br><span class="line">order(customer, product, quantity, cc_info)</span><br><span class="line">track(order_number)</span><br><span class="line">refund(order_number, reason)</span><br></pre></td></tr></table></figure>

<h3 id="从函数到对象（From-functions-to-objects）"><a href="#从函数到对象（From-functions-to-objects）" class="headerlink" title="从函数到对象（From functions to objects）"></a>从函数到对象（<code>From functions to objects</code>）</h3><p>使用<strong>对象</strong>来组织数据结构：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Inventory tracking</span></span><br><span class="line">Product(name, price, nutrition)</span><br><span class="line">Product.get_label()</span><br><span class="line">Product.get_nutrition_info()</span><br><span class="line">Product.increase_inventory(amount)</span><br><span class="line">Product.reduce_inventory(amount)</span><br><span class="line">Product.get_inventory_report()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Customer tracking</span></span><br><span class="line">Customer(name, address)</span><br><span class="line">Customer.get_greeting()</span><br><span class="line">Customer.get_formatted_address()</span><br><span class="line">Customer.buy(product, quantity, cc_info)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Purchase tracking</span></span><br><span class="line">Order(customer, product, quantity, cc_info)</span><br><span class="line">Order.ship()</span><br><span class="line">Order.refund(reason)</span><br></pre></td></tr></table></figure>

<p>一些关于<strong>类和对象</strong>的概念：</p>
<blockquote>
<ul>
<li><p>A <strong>class</strong> is a template for defining new data types.</p>
</li>
<li><p>An instance of a class is called an <strong>object</strong>.</p>
</li>
<li><p>Each object has data attributes called <strong>instance variables</strong> that describe its state.</p>
</li>
<li><p>Each object also has function attributes called <strong>methods</strong>.</p>
</li>
</ul>
</blockquote>
<h3 id="类（Classes）"><a href="#类（Classes）" class="headerlink" title="类（Classes）"></a>类（<code>Classes</code>）</h3><p>类能够实现：</p>
<ul>
<li>初始化实例对象</li>
<li>定义方法，这些方法能够修改或者报告实例对象的值</li>
</ul>
<blockquote>
<ul>
<li><p>Set the <strong>initial values</strong> for instance variables.</p>
</li>
<li><p>Define <strong>methods</strong> specific to the object, often used to change or report the values of instance variables.</p>
</li>
</ul>
</blockquote>
<p>本课程给出了一种<strong>产品</strong>类的实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define a new type of data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Set the initial values</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, price, nutrition_info</span>):</span><br><span class="line">        self._name = name</span><br><span class="line">        self._price = price</span><br><span class="line">        self._nutrition_info = nutrition_info</span><br><span class="line">        self._inventory = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Define methods</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increase_inventory</span>(<span class="params">self, amount</span>):</span><br><span class="line">        self._inventory += amount</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reduce_inventory</span>(<span class="params">self, amount</span>):</span><br><span class="line">        self._inventory -= amount</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_label</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Foxolate Shop: &quot;</span> + self._name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_inventory_report</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self._inventory == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;There are no bars!&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;There are <span class="subst">&#123;self._inventory&#125;</span> bars.&quot;</span></span><br></pre></td></tr></table></figure>

<p>使用方法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pina_bar = Product(<span class="string">&quot;Piña Chocolotta&quot;</span>, <span class="number">7.99</span>,</span><br><span class="line">    [<span class="string">&quot;200 calories&quot;</span>, <span class="string">&quot;24 g sugar&quot;</span>])</span><br><span class="line"></span><br><span class="line">pina_bar.increase_inventory(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="类定义（Class-definition）"><a href="#类定义（Class-definition）" class="headerlink" title="类定义（Class definition）"></a>类定义（<code>Class definition</code>）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, price, nutrition_info</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increase_inventory</span>(<span class="params">self, amount</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reduce_inventory</span>(<span class="params">self, amount</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_label</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_inventory_report</span>(<span class="params">self</span>):</span><br></pre></td></tr></table></figure>

<p>一个类语句可以创建一个新的类，并再当前环境的第一个帧中，把该类绑定到类名上。</p>
<blockquote>
<ul>
<li><p>A class statement creates a new class and binds that class to the class name in the first frame of the current environment.</p>
</li>
<li><p>Inner <code>def</code> statements create attributes of the class (<em>not</em> names in frames).</p>
</li>
</ul>
</blockquote>
<h3 id="类的实例化（对象的构造）（Class-instantiation-Object-construction-）"><a href="#类的实例化（对象的构造）（Class-instantiation-Object-construction-）" class="headerlink" title="类的实例化（对象的构造）（Class instantiation (Object construction)）"></a>类的实例化（对象的构造）（<code>Class instantiation (Object construction)</code>）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pina_bar = Product(<span class="string">&quot;Piña Chocolotta&quot;</span>, <span class="number">7.99</span>,</span><br><span class="line">    [<span class="string">&quot;200 calories&quot;</span>, <span class="string">&quot;24 g sugar&quot;</span>])</span><br></pre></td></tr></table></figure>

<p><code>Product(args)</code>一般被称为<strong>构造器</strong>。</p>
<p>当<strong>构造器</strong>被调用时：</p>
<ul>
<li>该类的一个实例被创建</li>
<li>该类的<code>__init__</code>函数被调用，新的对象作为<code>__init__</code>的第一个参数<code>self</code>。</li>
</ul>
<blockquote>
<p><code>Product(args)</code> is often called the <strong>constructor</strong>.</p>
<p>When the constructor is called:</p>
<ul>
<li>A new instance of that class is created</li>
<li>The <code>__init__</code> method of the class is called with the new object as its first argument (named <code>self</code>), along with any additional arguments provided in the call expression</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, price, nutrition_info</span>):</span><br><span class="line">        self._name = name</span><br><span class="line">        self._price = price</span><br><span class="line">        self._nutrition_info = nutrition_info</span><br><span class="line">        self._inventory = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="点运算符-（Dot-notation）"><a href="#点运算符-（Dot-notation）" class="headerlink" title="点运算符.（Dot notation）"></a>点运算符<code>.</code>（<code>Dot notation</code>）</h3><p>一个对象的所有属性都可以被<code>.</code>运算符访问:</p>
<blockquote>
<p>All object attributes (which includes variables <em>and</em> methods) can be accessed with <strong>dot notation</strong>:</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pina_bar.increase_inventory(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>上述表达式会在<code>pina_bar</code>类中查找名为<code>increase_inventory</code>的方法。</p>
<blockquote>
<p>That evaluates to the value of the attribute looked up by <code>increase_inventory</code> in the object referenced by <code>pina_bar</code>.</p>
</blockquote>
<p><code>.</code>运算符的左边也可以是任意的表达式：</p>
<blockquote>
<p>The left-hand side of the dot notation can also be any expression that evaluates to an object reference:</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bars = [pina_bar, truffle_bar]</span><br><span class="line">bars[<span class="number">0</span>].increase_inventory(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="实例的变量（Instance-variables）"><a href="#实例的变量（Instance-variables）" class="headerlink" title="实例的变量（Instance variables）"></a>实例的变量（<code>Instance variables</code>）</h3><blockquote>
<p><strong>Instance variables</strong> are data attributes that describe the state of an object.</p>
<p>This <code>__init__</code> initializes 4 instance variables:</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, price, nutrition_info</span>):</span><br><span class="line">        self._name = name</span><br><span class="line">        self._price = price</span><br><span class="line">        self._nutrition_info = nutrition_info</span><br><span class="line">        self._inventory = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>The object’s methods can then change the values of those variables or assign new variables.</p>
</blockquote>
<h3 id="方法的调用（Method-invocation）"><a href="#方法的调用（Method-invocation）" class="headerlink" title="方法的调用（Method invocation）"></a>方法的调用（<code>Method invocation</code>）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pina_bar.increase_inventory(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increase_inventory</span>(<span class="params">self, amount</span>):</span><br><span class="line">        self._inventory += amount</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>pina_bar.increase_inventory</code> is a <strong>bound method</strong>: a function which has its first parameter pre-bound to a particular value.</p>
<p>In this case, <code>self</code> is pre-bound to <code>pina_bar</code> and <code>amount</code> is set to 2.</p>
</blockquote>
<blockquote>
<p>It’s equivalent to:</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Product.increase_inventory(pina_bar, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h3 id="动态实例变量（Dynamic-instance-variables）"><a href="#动态实例变量（Dynamic-instance-variables）" class="headerlink" title="动态实例变量（Dynamic instance variables）"></a>动态实例变量（<code>Dynamic instance variables</code>）</h3><blockquote>
<p>An object can create a new instance variable whenever it’d like.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reduce_inventory</span>(<span class="params">self, amount</span>):</span><br><span class="line">        <span class="keyword">if</span> (self._inventory - amount) &lt;= <span class="number">0</span>:</span><br><span class="line">            self._needs_restocking = <span class="literal">True</span></span><br><span class="line">        self._inventory -= amount</span><br><span class="line"></span><br><span class="line">pina_bar = Product(<span class="string">&quot;Piña Chocolotta&quot;</span>, <span class="number">7.99</span>,</span><br><span class="line">    [<span class="string">&quot;200 calories&quot;</span>, <span class="string">&quot;24 g sugar&quot;</span>])</span><br><span class="line">pina_bar.reduce_inventory(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Now <code>pina_bar</code> has an updated binding for <code>_inventory</code> and a new binding for <code>_needs_restocking</code> (which was not in <code>__init__</code>).</p>
</blockquote>
<h3 id="类变量（Class-variables）"><a href="#类变量（Class-variables）" class="headerlink" title="类变量（Class variables）"></a>类变量（<code>Class variables</code>）</h3><blockquote>
<p>A <strong>class variable</strong> is an assignment inside the class that isn’t inside a method body.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span>:</span><br><span class="line">    sales_tax = <span class="number">0.07</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Class variables are “shared” across all instances of a class because they are attributes of the class, not the instance.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span>:</span><br><span class="line">    _sales_tax = <span class="number">0.07</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_total_price</span>(<span class="params">self, quantity</span>):</span><br><span class="line">        <span class="keyword">return</span> (self._price * (<span class="number">1</span> + self._sales_tax)) * quantity</span><br><span class="line"></span><br><span class="line">pina_bar = Product(<span class="string">&quot;Piña Chocolotta&quot;</span>, <span class="number">7.99</span>,</span><br><span class="line">    [<span class="string">&quot;200 calories&quot;</span>, <span class="string">&quot;24 g sugar&quot;</span>])</span><br><span class="line">truffle_bar = Product(<span class="string">&quot;Truffalapagus&quot;</span>, <span class="number">9.99</span>,</span><br><span class="line">    [<span class="string">&quot;170 calories&quot;</span>, <span class="string">&quot;19 g sugar&quot;</span>])</span><br><span class="line"></span><br><span class="line">pina_bar._sales_tax</span><br><span class="line">truffle_bar._sales_tax</span><br><span class="line">pina_bar.get_total_price(<span class="number">4</span>)</span><br><span class="line">truffle_bar.get_total_price(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<h3 id="属性都是公共的（Attributes-are-all-public）"><a href="#属性都是公共的（Attributes-are-all-public）" class="headerlink" title="属性都是公共的（Attributes are all public）"></a>属性都是公共的（<code>Attributes are all public</code>）</h3><blockquote>
<p>As long as you have a reference to an object, you can set or mutate any attributes.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pina_bar = Product(<span class="string">&quot;Piña Chocolotta&quot;</span>, <span class="number">7.99</span>,</span><br><span class="line">    [<span class="string">&quot;200 calories&quot;</span>, <span class="string">&quot;24 g sugar&quot;</span>])</span><br><span class="line"></span><br><span class="line">pina_bar._inventory</span><br><span class="line">pina_bar._inventory = <span class="number">5000000</span></span><br><span class="line">pina_bar._inventory = -<span class="number">5000</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>You can even assign new instance variables:</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pina_bar.brand_new_attribute_haha = <span class="string">&quot;instanception&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="“私有”属性（-Private-attributes）"><a href="#“私有”属性（-Private-attributes）" class="headerlink" title="“私有”属性（&quot;Private&quot; attributes）"></a>“私有”属性（<code>&quot;Private&quot; attributes</code>）</h3><blockquote>
<p>To communicate the desired access level of attributes, Python programmers generally use this convention:</p>
<ul>
<li><code>__</code> (double underscore) before very private attribute names</li>
<li><code>_</code> (single underscore) before semi-private attribute names</li>
<li>no underscore before public attribute names</li>
</ul>
<p>That allows classes to hide implementation details and add additional error checking.</p>
<p>We will discuss <code>__</code> vs <code>_</code> next time.</p>
<p>For now, if you see no underscore, HAVE FUN! 🎉 🎉</p>
</blockquote>
<h2 id="Lecture-17-Inheritance-Composition"><a href="#Lecture-17-Inheritance-Composition" class="headerlink" title="Lecture #17: Inheritance + Composition"></a>Lecture #17: Inheritance + Composition</h2><h3 id="创建一个“动物园”（Building-Animal-Conserving-）"><a href="#创建一个“动物园”（Building-Animal-Conserving-）" class="headerlink" title="创建一个“动物园”（Building &quot;Animal Conserving&quot;）"></a>创建一个“动物园”（<code>Building &quot;Animal Conserving&quot;</code>）</h3><p>要实现一个包含下图的动物的动物园，我们至少需要实现以下类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Panda()</span><br><span class="line">Lion()</span><br><span class="line">Rabbit()</span><br><span class="line">Vulture()</span><br><span class="line">Elephant()</span><br><span class="line">Food()</span><br></pre></td></tr></table></figure>

<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/e8c10fb6c0716f1b62a9e5a08af5929.png" alt="e8c10fb6c0716f1b62a9e5a08af5929"></p>
<h3 id="食物类（A-Food-class）"><a href="#食物类（A-Food-class）" class="headerlink" title="食物类（A Food class）"></a>食物类（<code>A Food class</code>）</h3><p>一个简单的食物类的实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Let&#x27;s start simple:</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Food</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, <span class="built_in">type</span>, calories</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.<span class="built_in">type</span> = <span class="built_in">type</span></span><br><span class="line">        self.calories = calories</span><br></pre></td></tr></table></figure>

<p>使用方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># How would we use that class?</span></span><br><span class="line">broccoli = Food(<span class="string">&quot;Broccoli Rabe&quot;</span>, <span class="string">&quot;veggies&quot;</span>, <span class="number">20</span>)</span><br><span class="line">bone_marrow = Food(<span class="string">&quot;Bone Marrow&quot;</span>, <span class="string">&quot;meat&quot;</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<h3 id="大象类（An-Elephant-class）"><a href="#大象类（An-Elephant-class）" class="headerlink" title="大象类（An Elephant class）"></a>大象类（<code>An Elephant class</code>）</h3><p>一个简单的大象类的实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Elephant</span>:</span><br><span class="line">    species_name = <span class="string">&quot;African Savanna Elephant&quot;</span></span><br><span class="line">    scientific_name = <span class="string">&quot;Loxodonta africana&quot;</span></span><br><span class="line">    calories_needed = <span class="number">8000</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age=<span class="number">0</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.calories_eaten  = <span class="number">0</span></span><br><span class="line">        self.happiness = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self, num_hours</span>):</span><br><span class="line">        self.happiness += (num_hours * <span class="number">4</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;WHEEE PLAY TIME!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self, food</span>):</span><br><span class="line">        self.calories_eaten += food.calories</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Om nom nom yummy <span class="subst">&#123;food.name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> self.calories_eaten &gt; self.calories_needed:</span><br><span class="line">            self.happiness -= <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Ugh so full&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">interact_with</span>(<span class="params">self, animal2</span>):</span><br><span class="line">        self.happiness += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Yay happy fun time with <span class="subst">&#123;animal2.name&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>使用方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">el1 = Elephant(<span class="string">&quot;Willaby&quot;</span>, <span class="number">5</span>)</span><br><span class="line">el2 = Elephant(<span class="string">&quot;Wallaby&quot;</span>, <span class="number">3</span>)</span><br><span class="line">el1.play(<span class="number">2</span>)</span><br><span class="line">el1.interact_with(el2)</span><br></pre></td></tr></table></figure>

<h3 id="兔子类（An-Rabbit-class）"><a href="#兔子类（An-Rabbit-class）" class="headerlink" title="兔子类（An Rabbit class）"></a>兔子类（<code>An Rabbit class</code>）</h3><p>一个简单的兔子类的实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbit</span>:</span><br><span class="line">    species_name = <span class="string">&quot;European rabbit&quot;</span></span><br><span class="line">    scientific_name = <span class="string">&quot;Oryctolagus cuniculus&quot;</span></span><br><span class="line">    calories_needed = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age=<span class="number">0</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.calories_eaten = <span class="number">0</span></span><br><span class="line">        self.happiness = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self, num_hours</span>):</span><br><span class="line">        self.happiness += (num_hours * <span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;WHEEE PLAY TIME!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self, food</span>):</span><br><span class="line">        self.calories_eaten += food.calories</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Om nom nom yummy <span class="subst">&#123;food.name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> self.calories_eaten &gt; self.calories_needed:</span><br><span class="line">            self.happiness -= <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Ugh so full&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">interact_with</span>(<span class="params">self, animal2</span>):</span><br><span class="line">        self.happiness += <span class="number">4</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Yay happy fun time with <span class="subst">&#123;animal2.name&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>使用方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rabbit1 = Rabbit(<span class="string">&quot;Mister Wabbit&quot;</span>, <span class="number">3</span>)</span><br><span class="line">rabbit2 = Rabbit(<span class="string">&quot;Bugs Bunny&quot;</span>, <span class="number">2</span>)</span><br><span class="line">rabbit1.eat(broccoli)</span><br><span class="line">rabbit2.interact_with(rabbit1)</span><br></pre></td></tr></table></figure>

<h3 id="继承——基类与子类（Inheritance-Base-classes-and-subclasses）"><a href="#继承——基类与子类（Inheritance-Base-classes-and-subclasses）" class="headerlink" title="继承——基类与子类（Inheritance--Base classes and subclasses）"></a>继承——基类与子类（<code>Inheritance--Base classes and subclasses</code>）</h3><p>如果多个类有相似的属性，可以实现一个基类（<code>Base class</code>），让这些类继承基类。</p>
<p>基类也被成为超类（<code>superclass</code>）。</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/61feadd3b714075fedfad27bfe1c9af.png" alt="61feadd3b714075fedfad27bfe1c9af"></p>
<h3 id="基类（The-base-class）"><a href="#基类（The-base-class）" class="headerlink" title="基类（The base class）"></a>基类（<code>The base class</code>）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The base class contains method headers common to the subclasses, and code that is used by multiple subclasses.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    species_name = <span class="string">&quot;Animal&quot;</span></span><br><span class="line">    scientific_name = <span class="string">&quot;Animalia&quot;</span></span><br><span class="line">    play_multiplier = <span class="number">2</span></span><br><span class="line">    interact_increment = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age=<span class="number">0</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.calories_eaten  = <span class="number">0</span></span><br><span class="line">        self.happiness = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self, num_hours</span>):</span><br><span class="line">        self.happiness += (num_hours * self.play_multiplier)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;WHEEE PLAY TIME!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self, food</span>):</span><br><span class="line">        self.calories_eaten += food.calories</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Om nom nom yummy <span class="subst">&#123;food.name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> self.calories_eaten &gt; self.calories_needed:</span><br><span class="line">            self.happiness -= <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Ugh so full&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">interact_with</span>(<span class="params">self, animal2</span>):</span><br><span class="line">        self.happiness += self.interact_increment</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Yay happy fun time with <span class="subst">&#123;animal2.name&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="子类（The-subclasses）"><a href="#子类（The-subclasses）" class="headerlink" title="子类（The subclasses）"></a>子类（<code>The subclasses</code>）</h3><p>可用如下方式定义一个<code>Animal</code>类的子类<code>Panda</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># To declare a subclass, put parentheses after the class name and specify the base class in the parentheses:</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Panda</span>(<span class="title class_ inherited__">Animal</span>):</span><br></pre></td></tr></table></figure>

<p>子类只需要不同于基类的代码部分。子类可以重新定义基类的任何部分，如类变量，方法定义，构造器等。</p>
<p>重新定义（<code>redefinition</code>）也称重载（<code>overriding</code>）。</p>
<p>如果子类不需要重载任何代码，可以这样实现（<code>pass</code>语句是为了防止报错）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The simplest subclass overrides nothing:</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AmorphousBlob</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h3 id="重载类变量（Overriding-class-variables）"><a href="#重载类变量（Overriding-class-variables）" class="headerlink" title="重载类变量（Overriding class variables）"></a>重载类变量（<code>Overriding class variables</code>）</h3><p>上述的兔子类和大象类可以重载动物类如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Subclasses can override existing class variables and assign new class variables:</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbit</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    species_name = <span class="string">&quot;European rabbit&quot;</span></span><br><span class="line">    scientific_name = <span class="string">&quot;Oryctolagus cuniculus&quot;</span></span><br><span class="line">    calories_needed = <span class="number">200</span></span><br><span class="line">    play_multiplier = <span class="number">8</span></span><br><span class="line">    interact_increment = <span class="number">4</span></span><br><span class="line">    num_in_litter = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Elephant</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    species_name = <span class="string">&quot;African Savanna Elephant&quot;</span></span><br><span class="line">    scientific_name = <span class="string">&quot;Loxodonta africana&quot;</span></span><br><span class="line">    calories_needed = <span class="number">8000</span></span><br><span class="line">    play_multiplier = <span class="number">4</span></span><br><span class="line">    interact_increment = <span class="number">2</span></span><br><span class="line">    num_tusks = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="重载方法（Overriding-methods）"><a href="#重载方法（Overriding-methods）" class="headerlink" title="重载方法（Overriding methods）"></a>重载方法（<code>Overriding methods</code>）</h3><p>子类可以重载基类的方法(调用基类时，使用的是重载的方法)：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># If a subclass overrides a method, Python will use that definition instead of the superclass definition.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Panda</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    species_name = <span class="string">&quot;Giant Panda&quot;</span></span><br><span class="line">    scientific_name = <span class="string">&quot;Ailuropoda melanoleuca&quot;</span></span><br><span class="line">    calories_needed = <span class="number">6000</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">interact_with</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;I&#x27;m a Panda, I&#x27;m solitary, go away <span class="subst">&#123;other.name&#125;</span>!&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>使用方式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># How would we call that method?</span></span><br><span class="line">panda1 = Panda(<span class="string">&quot;Pandeybear&quot;</span>, <span class="number">6</span>)</span><br><span class="line">panda2 = Panda(<span class="string">&quot;Spot&quot;</span>, <span class="number">3</span>)</span><br><span class="line">panda1.interact_with(panda2)</span><br></pre></td></tr></table></figure>

<h3 id="使用基类的方法（Using-methods-from-the-base-class）"><a href="#使用基类的方法（Using-methods-from-the-base-class）" class="headerlink" title="使用基类的方法（Using methods from the base class）"></a>使用基类的方法（<code>Using methods from the base class</code>）</h3><p>可以使用<code>super()</code>表示当前类对象的基类，并调用基类方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># To refer to a superclass method, we can use super():</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lion</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    species_name = <span class="string">&quot;Lion&quot;</span></span><br><span class="line">    scientific_name = <span class="string">&quot;Panthera&quot;</span></span><br><span class="line">    calories_needed = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self, food</span>):</span><br><span class="line">        <span class="keyword">if</span> food.<span class="built_in">type</span> == <span class="string">&quot;meat&quot;</span>:</span><br><span class="line">            <span class="built_in">super</span>().eat(food)</span><br></pre></td></tr></table></figure>

<p>使用方法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># How would we call that method?</span></span><br><span class="line">bones = Food(<span class="string">&quot;Bones&quot;</span>, <span class="string">&quot;meat&quot;</span>)</span><br><span class="line">mufasa = Lion(<span class="string">&quot;Mufasa&quot;</span>, <span class="number">10</span>)</span><br><span class="line">mufasa.eat(bones)</span><br></pre></td></tr></table></figure>

<p>以下两种调用是等价的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># super().attribute refers to the definition of attribute in the superclass of the first parameter to the method.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self, food</span>):</span><br><span class="line">    <span class="keyword">if</span> food.<span class="built_in">type</span> == <span class="string">&quot;meat&quot;</span>:</span><br><span class="line">        <span class="built_in">super</span>().eat(food)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ...is the same as:</span></span><br><span class="line"><span class="comment"># super() is better style than BaseClassName, though slightly slower.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self, food</span>):</span><br><span class="line">    <span class="keyword">if</span> food.<span class="built_in">type</span> == <span class="string">&quot;meat&quot;</span>:</span><br><span class="line">        Animal.eat(self, food)</span><br></pre></td></tr></table></figure>

<h3 id="重载-init-（Overriding-init-）"><a href="#重载-init-（Overriding-init-）" class="headerlink" title="重载__init__（Overriding __init__）"></a>重载<code>__init__</code>（<code>Overriding __init__</code>）</h3><p>使用<code>super().__init__()</code>会<strong>实例化基类</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Similarly, we need to explicitly call super().__init__() if we want to call the __init__ functionality of the base class.</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Elephant</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    species_name = <span class="string">&quot;Elephant&quot;</span></span><br><span class="line">    scientific_name = <span class="string">&quot;Loxodonta&quot;</span></span><br><span class="line">    calories_needed = <span class="number">8000</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age=<span class="number">0</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age)</span><br><span class="line">        <span class="keyword">if</span> age &lt; <span class="number">1</span>:</span><br><span class="line">            self.calories_needed = <span class="number">1000</span></span><br><span class="line">        <span class="keyword">elif</span> age &lt; <span class="number">5</span>:</span><br><span class="line">            self.calories_needed = <span class="number">3000</span></span><br></pre></td></tr></table></figure>

<p>使用方式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># What would this display?</span></span><br><span class="line">elly = Elephant(<span class="string">&quot;Ellie&quot;</span>, <span class="number">3</span>)</span><br><span class="line">elly.calories_needed        <span class="comment"># 3000</span></span><br></pre></td></tr></table></figure>

<h3 id="继承的层次（Layers-of-inheritance）"><a href="#继承的层次（Layers-of-inheritance）" class="headerlink" title="继承的层次（Layers of inheritance）"></a>继承的层次（<code>Layers of inheritance</code>）</h3><p>每一个<code>Python3</code>的类都隐式地继承了<code>object</code>类：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/01bd2d2228b91429525a1ad5e256bc1.png" alt="01bd2d2228b91429525a1ad5e256bc1"></p>
<h3 id="多继承（Multiple-inhteritance）"><a href="#多继承（Multiple-inhteritance）" class="headerlink" title="多继承（Multiple inhteritance）"></a>多继承（<code>Multiple inhteritance</code>）</h3><p><code>Python</code>也支持多继承，一个类可以继承多个基类：</p>
<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/25bd4bf86c08cd9542a8db8491cc3f8.png" alt="25bd4bf86c08cd9542a8db8491cc3f8"></p>
<h3 id="组合（Composition）"><a href="#组合（Composition）" class="headerlink" title="组合（Composition）"></a>组合（<code>Composition</code>）</h3><p>一个对象可能包含其他类的对象的引用。</p>
<blockquote>
<p>An object can contain references to objects of other classes.</p>
</blockquote>
<p>下面的<code>Animal</code>类的实例变量<code>mate</code>就指向了另一个<code>Animal</code>类的对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mate_with</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">if</span> other <span class="keyword">is</span> <span class="keyword">not</span> self <span class="keyword">and</span> other.species_name == self.species_name:</span><br><span class="line">            self.mate = other</span><br><span class="line">            other.mate = self</span><br></pre></td></tr></table></figure>

<p>使用方式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mr_wabbit = Rabbit(<span class="string">&quot;Mister Wabbit&quot;</span>, <span class="number">3</span>)</span><br><span class="line">jane_doe = Rabbit(<span class="string">&quot;Jane Doe&quot;</span>, <span class="number">2</span>)</span><br><span class="line">mr_wabbit.mate_with(jane_doe)</span><br></pre></td></tr></table></figure>

<p><code>eg</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbit</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reproduce_like_rabbits</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.mate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;oh no! better go on ZoOkCupid&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.babies = []</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, self.num_in_litter):</span><br><span class="line">            self.babies.append(Rabbit(<span class="string">&quot;bunny&quot;</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mr_wabbit = Rabbit(<span class="string">&quot;Mister Wabbit&quot;</span>, <span class="number">3</span>)</span><br><span class="line">jane_doe = Rabbit(<span class="string">&quot;Jane Doe&quot;</span>, <span class="number">2</span>)</span><br><span class="line">mr_wabbit.mate_with(jane_doe)</span><br><span class="line">jane_doe.reproduce_like_rabbits()</span><br></pre></td></tr></table></figure>

<p><code>eg.</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">partytime</span>(<span class="params">animals</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Assuming ANIMALS is a list of Animals, cause each</span></span><br><span class="line"><span class="string">    to interact with all the others exactly once.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(animals)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(animals)):</span><br><span class="line">            animals[i].interact_with(animals[j])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">jane_doe = Rabbit(<span class="string">&quot;Jane Doe&quot;</span>, <span class="number">2</span>)</span><br><span class="line">scar = Lion(<span class="string">&quot;Scar&quot;</span>, <span class="number">12</span>)</span><br><span class="line">elly = Elephant(<span class="string">&quot;Elly&quot;</span>, <span class="number">5</span>)</span><br><span class="line">pandy = Panda(<span class="string">&quot;PandeyBear&quot;</span>, <span class="number">4</span>)</span><br><span class="line">partytime([jane_doe, scar, elly, pandy])</span><br></pre></td></tr></table></figure>

<h2 id="Lecture-18-Special-Object-Methods"><a href="#Lecture-18-Special-Object-Methods" class="headerlink" title="Lecture #18: Special Object Methods"></a>Lecture #18: Special Object Methods</h2><h3 id="关于对象（So-many-objects）"><a href="#关于对象（So-many-objects）" class="headerlink" title="关于对象（So many objects）"></a>关于对象（<code>So many objects</code>）</h3><p>在<code>Python</code>中，所有的类型和自定义类都隐式地直接或间接继承了<code>object</code>类，以下的变量名称都是对象的引用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Lamb</span>:</span><br><span class="line">    species_name = <span class="string">&quot;Lamb&quot;</span></span><br><span class="line">    scientific_name = <span class="string">&quot;Ovis aries&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        self.happy = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">lamb = Lamb(<span class="string">&quot;Lil&quot;</span>)</span><br><span class="line">owner = <span class="string">&quot;Mary&quot;</span></span><br><span class="line">had_a_lamb = <span class="literal">True</span></span><br><span class="line">fleece = &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;white&quot;</span>, <span class="string">&quot;fluffiness&quot;</span>: <span class="number">100</span>&#125;</span><br><span class="line">kids_at_school = [<span class="string">&quot;Billy&quot;</span>, <span class="string">&quot;Tilly&quot;</span>, <span class="string">&quot;Jilly&quot;</span>]</span><br><span class="line">day = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>使用某个对象的<code>__class__</code>属性可以查看其类名，查看其类名的<code>__bases__</code>属性，可以得到基类（返回一个元组，基类可能不止一个）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; lamb.__class__</span></span><br><span class="line">&lt;class &#x27;__main__.Lamb&#x27;&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; lamb.__class__.__bases__</span></span><br><span class="line">(&lt;class &#x27;object&#x27;&gt;,)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; owner.__class__</span></span><br><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; owner.__class__.__bases__</span></span><br><span class="line">(&lt;class &#x27;object&#x27;&gt;,)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; had_a_lamb.__class__</span></span><br><span class="line">&lt;class &#x27;bool&#x27;&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; had_a_lamb.__class__.__bases__</span></span><br><span class="line">(&lt;class &#x27;int&#x27;&gt;,)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; fleece.__class__</span></span><br><span class="line">&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; fleece.__class__.__bases__</span></span><br><span class="line">(&lt;class &#x27;object&#x27;&gt;,)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; kids_at_school.__class__</span></span><br><span class="line">&lt;class &#x27;list&#x27;&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; kids_at_school.__class__.__bases__</span></span><br><span class="line">(&lt;class &#x27;object&#x27;&gt;,)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; day.__class__</span></span><br><span class="line">&lt;class &#x27;int&#x27;&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; day.__class__.__bases__</span></span><br><span class="line">(&lt;class &#x27;object&#x27;&gt;,)</span><br></pre></td></tr></table></figure>

<p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/8f11a006a0e4c378fe2a40a4cb0ceca.png" alt="8f11a006a0e4c378fe2a40a4cb0ceca"></p>
<h3 id="对象内置的属性（Built-in-object-attributes）"><a href="#对象内置的属性（Built-in-object-attributes）" class="headerlink" title="对象内置的属性（Built-in object attributes）"></a>对象内置的属性（<code>Built-in object attributes</code>）</h3><p>因为所有类都继承自<code>object</code>类，所以自然继承了该类的属性，用<code>dir()</code>函数可以查看一个类的属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span>(<span class="built_in">object</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">dir</span>(object)</span></span><br><span class="line">[&#x27;__bases__&#x27;, &#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dir__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;]</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>For string representation: <code>__repr__</code>, <code>__str__</code>, <code>__format__</code></li>
<li>For comparisons: <code>__eq__</code>, <code>__ge__</code>, <code>__gt__</code>, <code>__le__</code>, <code>__lt__</code>, <code>__ne__</code></li>
<li>Related to classes: <code>__bases__</code>, <code>__class__</code>, <code>__new__</code>, <code>__init__</code>, <code>__init_subclass__</code>, <code>__subclasshook__</code>, <code>__setattr__</code>, <code>__delattr__</code>, <code>__getattribute__</code></li>
<li>Others: <code>__dir__</code>, <code>__hash__</code>, <code>__module__</code>, <code>__reduce__</code>, <code>__reduce_ex__</code></li>
</ul>
</blockquote>
<h3 id="str-方法（-str-）"><a href="#str-方法（-str-）" class="headerlink" title="__str__方法（__str__）"></a><code>__str__</code>方法（<code>__str__</code>）</h3><p><code>__str__</code>方法会返回一个可被人类阅读的字符串表示，在字符串构造，<code>print</code>函数，f-字符串（<code>f-string</code>）等地方都被调用了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction</span><br><span class="line"></span><br><span class="line">one_third = <span class="number">1</span>/<span class="number">3</span></span><br><span class="line">one_half = Fraction(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; one_third</span></span><br><span class="line">0.3333333333333333</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">print</span>(one_third)</span></span><br><span class="line">0.3333333333333333</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; one_half</span></span><br><span class="line">Fraction(1, 2)</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">print</span>(one_half)</span></span><br><span class="line">1/2</span><br></pre></td></tr></table></figure>

<p>f-字符串可以把<code>&#123;&#125;</code>中的变量名进行替换，运算结果是一个字符串，<code>eval</code>函数可以接受一个字符串，对其进行计算，就和输入该字符串到终端一样。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; f<span class="string">&quot;&#123;one_half&#125; &gt; &#123;one_third&#125;&quot;</span></span></span><br><span class="line">&#x27;1/2 &gt; 0.3333333333333333&#x27;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">eval</span>(f<span class="string">&quot;&#123;one_half&#125; &gt; &#123;one_third&#125;&quot;</span>)</span></span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<h3 id="自定义-str-方法（Custom-str-behavior）"><a href="#自定义-str-方法（Custom-str-behavior）" class="headerlink" title="自定义__str__方法（Custom __str__ behavior）"></a>自定义<code>__str__</code>方法（<code>Custom __str__ behavior</code>）</h3><p>内置的<code>__str__</code>函数一般返回一个描述对象类名的字符串。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; lamb</span></span><br><span class="line">&lt;__main__.Lamb object&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; str(lamb)</span></span><br><span class="line">&#x27;&lt;__main__.Lamb object&gt;&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; lamb.__str__()</span></span><br><span class="line">&#x27;&lt;__main__.Lamb object&gt;&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">print</span>(lamb)</span></span><br><span class="line">&lt;__main__.Lamb object&gt;</span><br></pre></td></tr></table></figure>

<p>重载<code>Lamb</code>类中的<code>__str__</code>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;🐑 : &quot;</span> + self.name</span><br></pre></td></tr></table></figure>

<p>重载之后，注意到，输入<code>lamb</code>返回的是对象，并没有使用<code>__str__</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; lamb</span></span><br><span class="line">&lt;__main__.Lamb object&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; lamb.__str__()</span></span><br><span class="line">&#x27;🐑 : Lil&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">print</span>(lamb)</span></span><br><span class="line">🐑 : Lil</span><br></pre></td></tr></table></figure>

<h3 id="repr-方法（-repr-）"><a href="#repr-方法（-repr-）" class="headerlink" title="__repr__方法（__repr__）"></a><code>__repr__</code>方法（<code>__repr__</code>）</h3><p>对象调用<code>__repr__</code>方法会返回一个字符串，该字符串可以被计算，得到该对象。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; one_half.__repr__()</span></span><br><span class="line">&#x27;Fraction(1, 2)&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">eval</span>(one_half.__repr__())</span></span><br><span class="line">Fraction(1, 2)</span><br></pre></td></tr></table></figure>

<p><code>__repr__</code>主要用于展示如何得到某个对象：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;</span> </span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; one_third</span></span><br><span class="line">0.3333333333333333</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; repr(one_third)</span></span><br><span class="line">&#x27;0.3333333333333333&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; one_half</span></span><br><span class="line">Fraction(1, 2)</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; repr(one_half)</span></span><br><span class="line">&#x27;Fraction(1, 2)&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="自定义-repr-方法（Custom-repr-behavior）"><a href="#自定义-repr-方法（Custom-repr-behavior）" class="headerlink" title="自定义__repr__方法（Custom __repr__ behavior）"></a>自定义<code>__repr__</code>方法（<code>Custom __repr__ behavior</code>）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; lamb</span></span><br><span class="line">&lt;__main__.Lamb object&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; repr(lamb)</span></span><br><span class="line">&#x27;&lt;__main__.Lamb object&gt;&#x27;</span><br></pre></td></tr></table></figure>

<p>重载<code>Lamb</code>类中的<code>__repr__</code>方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;Lamb(<span class="subst">&#123;<span class="built_in">repr</span>(self.name)&#125;</span>)&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; lamb</span></span><br><span class="line">Lamb(&#x27;Lil&#x27;)</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; repr(lamb)</span></span><br><span class="line">&quot;Lamb(&#x27;Lil&#x27;)&quot;</span><br></pre></td></tr></table></figure>

<h3 id="使用getattr方法获取对象属性（Get-attribute-with-getattr-）"><a href="#使用getattr方法获取对象属性（Get-attribute-with-getattr-）" class="headerlink" title="使用getattr方法获取对象属性（Get attribute with getattr()）"></a>使用<code>getattr</code>方法获取对象属性（<code>Get attribute with getattr()</code>）</h3><p>使用<code>getattr(object, name[, default])</code>可以在<code>object</code>对象中查找<code>name</code>属性，若存在，返回该对象的类名的字符串，若不存在，返回<code>default</code>（若有该参数），否则返回<code>AttributeError</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; getattr(lamb, <span class="string">&quot;species_name&quot;</span>)</span></span><br><span class="line">&#x27;Lamb&#x27;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; getattr(lamb, <span class="string">&quot;not_exist_name&quot;</span>)</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &lt;string&gt;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: not_exist_name</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; getattr(lamb, <span class="string">&quot;not_exist_name&quot;</span>, <span class="string">&#x27;not this attribute&#x27;</span>)</span></span><br><span class="line">&#x27;not this attribute&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="使用hasattr方法检测属性是否存在（Check-attribute-exists-with-hasattr-）"><a href="#使用hasattr方法检测属性是否存在（Check-attribute-exists-with-hasattr-）" class="headerlink" title="使用hasattr方法检测属性是否存在（Check attribute exists with hasattr()）"></a>使用<code>hasattr</code>方法检测属性是否存在（<code>Check attribute exists with hasattr()</code>）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; hasattr(lamb, <span class="string">&quot;scientific_name&quot;</span>)</span></span><br><span class="line">True</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; hasattr(lamb, <span class="string">&quot;not_exist_name&quot;</span>)</span></span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<h3 id="特别的方法（Special-methods）"><a href="#特别的方法（Special-methods）" class="headerlink" title="特别的方法（Special methods）"></a>特别的方法（<code>Special methods</code>）</h3><p><img src="https://bucket-hexo-blog-2020152049.oss-cn-shenzhen.aliyuncs.com/img/4588895c4397fe4136843e4677233a7.png" alt="4588895c4397fe4136843e4677233a7"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><strong>翻译视频</strong>：<a href="https://www.bilibili.com/video/BV1v64y1Q78o/?spm_id_from=444.41.top_right_bar_window_default_collection.content.click&vd_source=249a8ad55bb26717dd55ec3dd295f644">【计算机程序的构造和解释】精译【UC Berkeley 公开课-CS61A (Spring 2021)】-中英双语字幕</a></li>
<li><code>github</code>: <a href="https://github.com/Maxwell2020152049/CS61A">Maxwell2020152049&#x2F;CS61A</a></li>
</ul>
]]></content>
      <categories>
        <category>CS61A</category>
        <category>Course Notes</category>
      </categories>
  </entry>
  <entry>
    <title>CS61A-Lab06</title>
    <url>/2024/06/14/CS61A-Lab06/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>CS61A-Homework05</title>
    <url>/2024/06/14/CS61A-Homework05/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>CS61A-Project3-Ants</title>
    <url>/2024/06/14/CS61A-Project3-Ants/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
